Metadata-Version: 1.1
Name: his.almanac
Version: 0.0.1
Summary: A services registry
Home-page: UNKNOWN
Author: Jonathan Moss
Author-email: xirisr@gmail.com
License: BSD
Description: Alamanac
        ========
        
        A simple service registry for use within HIS, but useful elsewhere.
        
        Services registered must extend an abstract base class, which acts as a contract or interface.
        
        
        Usage
        -----
        
        Services should be defined as follows
        
        
        .. code-block:: python
        
            import abc
        
            class ExampleContract(metaclass=abc.ABCMeta):
        
                @abc.abstractmethod
                def method(self):
                    pass
        
        
            class ExampleService(ExampleContract):
        
                def method(self):
                    print("I'm an example")
        
        
        Then register an instance of the service:
        
        
        .. code-block:: python
        
            from almanac import services
        
            s = ExampleService()
            services.register(s)
        
        
        Finally, to retrieve a registered service you need to use the contract:
        
        .. code-block:: python
        
            from almanac import services
        
            s = services.get(ExampleContract)
        
        
        Errors and Exceptions
        ---------------------
        
        If you try to register an object as a service which does not have an abstract parent then it will raise an
        `InvalidServiceType` exception.
        
        Attempting to get a service which has not been registered will raise a `ServiceNotFoundError` exception.
        
        Attempting to get a service with anything other than an abstract base class (e.g. the contract) will result in the
        system raising an `InvalidContract` exception
        
Keywords: registry
Platform: linux
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: Unix
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.6
Classifier: Topic :: Other/Nonlisted Topic
