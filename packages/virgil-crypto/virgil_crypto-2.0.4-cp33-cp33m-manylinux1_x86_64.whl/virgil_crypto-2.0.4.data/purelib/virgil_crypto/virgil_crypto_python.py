# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_virgil_crypto_python', [dirname(__file__)])
        except ImportError:
            import _virgil_crypto_python
            return _virgil_crypto_python
        if fp is not None:
            try:
                _mod = imp.load_module('_virgil_crypto_python', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _virgil_crypto_python = swig_import_helper()
    del swig_import_helper
else:
    import _virgil_crypto_python
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _virgil_crypto_python.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _virgil_crypto_python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _virgil_crypto_python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _virgil_crypto_python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _virgil_crypto_python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _virgil_crypto_python.SwigPyIterator_equal(self, x)

    def copy(self):
        return _virgil_crypto_python.SwigPyIterator_copy(self)

    def next(self):
        return _virgil_crypto_python.SwigPyIterator_next(self)

    def __next__(self):
        return _virgil_crypto_python.SwigPyIterator___next__(self)

    def previous(self):
        return _virgil_crypto_python.SwigPyIterator_previous(self)

    def advance(self, n):
        return _virgil_crypto_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _virgil_crypto_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _virgil_crypto_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _virgil_crypto_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _virgil_crypto_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _virgil_crypto_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _virgil_crypto_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _virgil_crypto_python.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VirgilByteArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilByteArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilByteArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _virgil_crypto_python.VirgilByteArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _virgil_crypto_python.VirgilByteArray___nonzero__(self)

    def __bool__(self):
        return _virgil_crypto_python.VirgilByteArray___bool__(self)

    def __len__(self):
        return _virgil_crypto_python.VirgilByteArray___len__(self)

    def pop(self):
        return _virgil_crypto_python.VirgilByteArray_pop(self)

    def __getslice__(self, i, j):
        return _virgil_crypto_python.VirgilByteArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _virgil_crypto_python.VirgilByteArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _virgil_crypto_python.VirgilByteArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _virgil_crypto_python.VirgilByteArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _virgil_crypto_python.VirgilByteArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _virgil_crypto_python.VirgilByteArray___setitem__(self, *args)

    def append(self, x):
        return _virgil_crypto_python.VirgilByteArray_append(self, x)

    def empty(self):
        return _virgil_crypto_python.VirgilByteArray_empty(self)

    def size(self):
        return _virgil_crypto_python.VirgilByteArray_size(self)

    def clear(self):
        return _virgil_crypto_python.VirgilByteArray_clear(self)

    def swap(self, v):
        return _virgil_crypto_python.VirgilByteArray_swap(self, v)

    def get_allocator(self):
        return _virgil_crypto_python.VirgilByteArray_get_allocator(self)

    def begin(self):
        return _virgil_crypto_python.VirgilByteArray_begin(self)

    def end(self):
        return _virgil_crypto_python.VirgilByteArray_end(self)

    def rbegin(self):
        return _virgil_crypto_python.VirgilByteArray_rbegin(self)

    def rend(self):
        return _virgil_crypto_python.VirgilByteArray_rend(self)

    def pop_back(self):
        return _virgil_crypto_python.VirgilByteArray_pop_back(self)

    def erase(self, *args):
        return _virgil_crypto_python.VirgilByteArray_erase(self, *args)

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilByteArray(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _virgil_crypto_python.VirgilByteArray_push_back(self, x)

    def front(self):
        return _virgil_crypto_python.VirgilByteArray_front(self)

    def back(self):
        return _virgil_crypto_python.VirgilByteArray_back(self)

    def assign(self, n, x):
        return _virgil_crypto_python.VirgilByteArray_assign(self, n, x)

    def resize(self, *args):
        return _virgil_crypto_python.VirgilByteArray_resize(self, *args)

    def insert(self, *args):
        return _virgil_crypto_python.VirgilByteArray_insert(self, *args)

    def reserve(self, n):
        return _virgil_crypto_python.VirgilByteArray_reserve(self, n)

    def capacity(self):
        return _virgil_crypto_python.VirgilByteArray_capacity(self)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilByteArray
    __del__ = lambda self: None
VirgilByteArray_swigregister = _virgil_crypto_python.VirgilByteArray_swigregister
VirgilByteArray_swigregister(VirgilByteArray)

class VirgilVersion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilVersion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilVersion, name)
    __repr__ = _swig_repr
    __swig_getmethods__["asNumber"] = lambda x: _virgil_crypto_python.VirgilVersion_asNumber
    if _newclass:
        asNumber = staticmethod(_virgil_crypto_python.VirgilVersion_asNumber)
    __swig_getmethods__["asString"] = lambda x: _virgil_crypto_python.VirgilVersion_asString
    if _newclass:
        asString = staticmethod(_virgil_crypto_python.VirgilVersion_asString)
    __swig_getmethods__["majorVersion"] = lambda x: _virgil_crypto_python.VirgilVersion_majorVersion
    if _newclass:
        majorVersion = staticmethod(_virgil_crypto_python.VirgilVersion_majorVersion)
    __swig_getmethods__["minorVersion"] = lambda x: _virgil_crypto_python.VirgilVersion_minorVersion
    if _newclass:
        minorVersion = staticmethod(_virgil_crypto_python.VirgilVersion_minorVersion)
    __swig_getmethods__["patchVersion"] = lambda x: _virgil_crypto_python.VirgilVersion_patchVersion
    if _newclass:
        patchVersion = staticmethod(_virgil_crypto_python.VirgilVersion_patchVersion)
    __swig_getmethods__["fullName"] = lambda x: _virgil_crypto_python.VirgilVersion_fullName
    if _newclass:
        fullName = staticmethod(_virgil_crypto_python.VirgilVersion_fullName)

    def __init__(self):
        this = _virgil_crypto_python.new_VirgilVersion()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilVersion
    __del__ = lambda self: None
VirgilVersion_swigregister = _virgil_crypto_python.VirgilVersion_swigregister
VirgilVersion_swigregister(VirgilVersion)

def VirgilVersion_asNumber():
    return _virgil_crypto_python.VirgilVersion_asNumber()
VirgilVersion_asNumber = _virgil_crypto_python.VirgilVersion_asNumber

def VirgilVersion_asString():
    return _virgil_crypto_python.VirgilVersion_asString()
VirgilVersion_asString = _virgil_crypto_python.VirgilVersion_asString

def VirgilVersion_majorVersion():
    return _virgil_crypto_python.VirgilVersion_majorVersion()
VirgilVersion_majorVersion = _virgil_crypto_python.VirgilVersion_majorVersion

def VirgilVersion_minorVersion():
    return _virgil_crypto_python.VirgilVersion_minorVersion()
VirgilVersion_minorVersion = _virgil_crypto_python.VirgilVersion_minorVersion

def VirgilVersion_patchVersion():
    return _virgil_crypto_python.VirgilVersion_patchVersion()
VirgilVersion_patchVersion = _virgil_crypto_python.VirgilVersion_patchVersion

def VirgilVersion_fullName():
    return _virgil_crypto_python.VirgilVersion_fullName()
VirgilVersion_fullName = _virgil_crypto_python.VirgilVersion_fullName

class VirgilDataSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilDataSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilDataSource, name)
    __repr__ = _swig_repr

    def hasData(self):
        return _virgil_crypto_python.VirgilDataSource_hasData(self)

    def read(self):
        return _virgil_crypto_python.VirgilDataSource_read(self)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilDataSource
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == VirgilDataSource:
            _self = None
        else:
            _self = self
        this = _virgil_crypto_python.new_VirgilDataSource(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _virgil_crypto_python.disown_VirgilDataSource(self)
        return weakref_proxy(self)
VirgilDataSource_swigregister = _virgil_crypto_python.VirgilDataSource_swigregister
VirgilDataSource_swigregister(VirgilDataSource)

class VirgilDataSink(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilDataSink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilDataSink, name)
    __repr__ = _swig_repr

    def isGood(self):
        return _virgil_crypto_python.VirgilDataSink_isGood(self)

    def write(self, data):
        return _virgil_crypto_python.VirgilDataSink_write(self, data)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilDataSink
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == VirgilDataSink:
            _self = None
        else:
            _self = self
        this = _virgil_crypto_python.new_VirgilDataSink(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _virgil_crypto_python.disown_VirgilDataSink(self)
        return weakref_proxy(self)
VirgilDataSink_swigregister = _virgil_crypto_python.VirgilDataSink_swigregister
VirgilDataSink_swigregister(VirgilDataSink)

class VirgilAsn1Compatible(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilAsn1Compatible, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilAsn1Compatible, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def toAsn1(self):
        return _virgil_crypto_python.VirgilAsn1Compatible_toAsn1(self)

    def fromAsn1(self, asn1):
        return _virgil_crypto_python.VirgilAsn1Compatible_fromAsn1(self, asn1)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilAsn1Compatible
    __del__ = lambda self: None
VirgilAsn1Compatible_swigregister = _virgil_crypto_python.VirgilAsn1Compatible_swigregister
VirgilAsn1Compatible_swigregister(VirgilAsn1Compatible)

class VirgilHash(VirgilAsn1Compatible):
    __swig_setmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilHash, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilHash, name)
    __repr__ = _swig_repr
    Algorithm_MD5 = _virgil_crypto_python.VirgilHash_Algorithm_MD5
    Algorithm_SHA1 = _virgil_crypto_python.VirgilHash_Algorithm_SHA1
    Algorithm_SHA224 = _virgil_crypto_python.VirgilHash_Algorithm_SHA224
    Algorithm_SHA256 = _virgil_crypto_python.VirgilHash_Algorithm_SHA256
    Algorithm_SHA384 = _virgil_crypto_python.VirgilHash_Algorithm_SHA384
    Algorithm_SHA512 = _virgil_crypto_python.VirgilHash_Algorithm_SHA512

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilHash(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def name(self):
        return _virgil_crypto_python.VirgilHash_name(self)

    def type(self):
        return _virgil_crypto_python.VirgilHash_type(self)

    def hash(self, data):
        return _virgil_crypto_python.VirgilHash_hash(self, data)

    def start(self):
        return _virgil_crypto_python.VirgilHash_start(self)

    def update(self, data):
        return _virgil_crypto_python.VirgilHash_update(self, data)

    def finish(self):
        return _virgil_crypto_python.VirgilHash_finish(self)

    def hmac(self, key, data):
        return _virgil_crypto_python.VirgilHash_hmac(self, key, data)

    def hmacStart(self, key):
        return _virgil_crypto_python.VirgilHash_hmacStart(self, key)

    def hmacReset(self):
        return _virgil_crypto_python.VirgilHash_hmacReset(self)

    def hmacUpdate(self, data):
        return _virgil_crypto_python.VirgilHash_hmacUpdate(self, data)

    def hmacFinish(self):
        return _virgil_crypto_python.VirgilHash_hmacFinish(self)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilHash
    __del__ = lambda self: None
VirgilHash_swigregister = _virgil_crypto_python.VirgilHash_swigregister
VirgilHash_swigregister(VirgilHash)

class VirgilBase64(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilBase64, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilBase64, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["encode"] = lambda x: _virgil_crypto_python.VirgilBase64_encode
    if _newclass:
        encode = staticmethod(_virgil_crypto_python.VirgilBase64_encode)
    __swig_getmethods__["decode"] = lambda x: _virgil_crypto_python.VirgilBase64_decode
    if _newclass:
        decode = staticmethod(_virgil_crypto_python.VirgilBase64_decode)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilBase64
    __del__ = lambda self: None
VirgilBase64_swigregister = _virgil_crypto_python.VirgilBase64_swigregister
VirgilBase64_swigregister(VirgilBase64)

def VirgilBase64_encode(data):
    return _virgil_crypto_python.VirgilBase64_encode(data)
VirgilBase64_encode = _virgil_crypto_python.VirgilBase64_encode

def VirgilBase64_decode(base64str):
    return _virgil_crypto_python.VirgilBase64_decode(base64str)
VirgilBase64_decode = _virgil_crypto_python.VirgilBase64_decode

class VirgilPBKDF(VirgilAsn1Compatible):
    __swig_setmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilPBKDF, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilPBKDF, name)
    __repr__ = _swig_repr
    kIterationCount_Default = _virgil_crypto_python.VirgilPBKDF_kIterationCount_Default
    Algorithm_PBKDF2 = _virgil_crypto_python.VirgilPBKDF_Algorithm_PBKDF2

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilPBKDF(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getSalt(self):
        return _virgil_crypto_python.VirgilPBKDF_getSalt(self)

    def getIterationCount(self):
        return _virgil_crypto_python.VirgilPBKDF_getIterationCount(self)

    def setAlgorithm(self, alg):
        return _virgil_crypto_python.VirgilPBKDF_setAlgorithm(self, alg)

    def getAlgorithm(self):
        return _virgil_crypto_python.VirgilPBKDF_getAlgorithm(self)

    def setHashAlgorithm(self, hash):
        return _virgil_crypto_python.VirgilPBKDF_setHashAlgorithm(self, hash)

    def getHashAlgorithm(self):
        return _virgil_crypto_python.VirgilPBKDF_getHashAlgorithm(self)

    def enableRecommendationsCheck(self):
        return _virgil_crypto_python.VirgilPBKDF_enableRecommendationsCheck(self)

    def disableRecommendationsCheck(self):
        return _virgil_crypto_python.VirgilPBKDF_disableRecommendationsCheck(self)

    def derive(self, pwd, outSize=0):
        return _virgil_crypto_python.VirgilPBKDF_derive(self, pwd, outSize)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilPBKDF
    __del__ = lambda self: None
VirgilPBKDF_swigregister = _virgil_crypto_python.VirgilPBKDF_swigregister
VirgilPBKDF_swigregister(VirgilPBKDF)

class VirgilRandom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilRandom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilRandom, name)
    __repr__ = _swig_repr

    def __init__(self, personalInfo):
        this = _virgil_crypto_python.new_VirgilRandom(personalInfo)
        try:
            self.this.append(this)
        except:
            self.this = this

    def randomize(self, *args):
        return _virgil_crypto_python.VirgilRandom_randomize(self, *args)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilRandom
    __del__ = lambda self: None
VirgilRandom_swigregister = _virgil_crypto_python.VirgilRandom_swigregister
VirgilRandom_swigregister(VirgilRandom)

class VirgilCustomParams(VirgilAsn1Compatible):
    __swig_setmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilCustomParams, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilAsn1Compatible]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilCustomParams, name)
    __repr__ = _swig_repr

    def isEmpty(self):
        return _virgil_crypto_python.VirgilCustomParams_isEmpty(self)

    def setInteger(self, key, value):
        return _virgil_crypto_python.VirgilCustomParams_setInteger(self, key, value)

    def getInteger(self, key):
        return _virgil_crypto_python.VirgilCustomParams_getInteger(self, key)

    def removeInteger(self, key):
        return _virgil_crypto_python.VirgilCustomParams_removeInteger(self, key)

    def setString(self, key, value):
        return _virgil_crypto_python.VirgilCustomParams_setString(self, key, value)

    def getString(self, key):
        return _virgil_crypto_python.VirgilCustomParams_getString(self, key)

    def removeString(self, key):
        return _virgil_crypto_python.VirgilCustomParams_removeString(self, key)

    def setData(self, key, value):
        return _virgil_crypto_python.VirgilCustomParams_setData(self, key, value)

    def getData(self, key):
        return _virgil_crypto_python.VirgilCustomParams_getData(self, key)

    def removeData(self, key):
        return _virgil_crypto_python.VirgilCustomParams_removeData(self, key)

    def clear(self):
        return _virgil_crypto_python.VirgilCustomParams_clear(self)

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilCustomParams(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilCustomParams
    __del__ = lambda self: None
VirgilCustomParams_swigregister = _virgil_crypto_python.VirgilCustomParams_swigregister
VirgilCustomParams_swigregister(VirgilCustomParams)

class VirgilKeyPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilKeyPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilKeyPair, name)
    __repr__ = _swig_repr
    Type_RSA_256 = _virgil_crypto_python.VirgilKeyPair_Type_RSA_256
    Type_RSA_512 = _virgil_crypto_python.VirgilKeyPair_Type_RSA_512
    Type_RSA_1024 = _virgil_crypto_python.VirgilKeyPair_Type_RSA_1024
    Type_RSA_2048 = _virgil_crypto_python.VirgilKeyPair_Type_RSA_2048
    Type_RSA_3072 = _virgil_crypto_python.VirgilKeyPair_Type_RSA_3072
    Type_RSA_4096 = _virgil_crypto_python.VirgilKeyPair_Type_RSA_4096
    Type_RSA_8192 = _virgil_crypto_python.VirgilKeyPair_Type_RSA_8192
    Type_EC_SECP192R1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_SECP192R1
    Type_EC_SECP224R1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_SECP224R1
    Type_EC_SECP256R1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_SECP256R1
    Type_EC_SECP384R1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_SECP384R1
    Type_EC_SECP521R1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_SECP521R1
    Type_EC_BP256R1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_BP256R1
    Type_EC_BP384R1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_BP384R1
    Type_EC_BP512R1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_BP512R1
    Type_EC_SECP192K1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_SECP192K1
    Type_EC_SECP224K1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_SECP224K1
    Type_EC_SECP256K1 = _virgil_crypto_python.VirgilKeyPair_Type_EC_SECP256K1
    Type_EC_CURVE25519 = _virgil_crypto_python.VirgilKeyPair_Type_EC_CURVE25519
    Type_FAST_EC_X25519 = _virgil_crypto_python.VirgilKeyPair_Type_FAST_EC_X25519
    Type_FAST_EC_ED25519 = _virgil_crypto_python.VirgilKeyPair_Type_FAST_EC_ED25519
    __swig_getmethods__["generate"] = lambda x: _virgil_crypto_python.VirgilKeyPair_generate
    if _newclass:
        generate = staticmethod(_virgil_crypto_python.VirgilKeyPair_generate)
    __swig_getmethods__["generateRecommended"] = lambda x: _virgil_crypto_python.VirgilKeyPair_generateRecommended
    if _newclass:
        generateRecommended = staticmethod(_virgil_crypto_python.VirgilKeyPair_generateRecommended)
    __swig_getmethods__["generateFrom"] = lambda x: _virgil_crypto_python.VirgilKeyPair_generateFrom
    if _newclass:
        generateFrom = staticmethod(_virgil_crypto_python.VirgilKeyPair_generateFrom)
    __swig_getmethods__["isKeyPairMatch"] = lambda x: _virgil_crypto_python.VirgilKeyPair_isKeyPairMatch
    if _newclass:
        isKeyPairMatch = staticmethod(_virgil_crypto_python.VirgilKeyPair_isKeyPairMatch)
    __swig_getmethods__["checkPrivateKeyPassword"] = lambda x: _virgil_crypto_python.VirgilKeyPair_checkPrivateKeyPassword
    if _newclass:
        checkPrivateKeyPassword = staticmethod(_virgil_crypto_python.VirgilKeyPair_checkPrivateKeyPassword)
    __swig_getmethods__["isPrivateKeyEncrypted"] = lambda x: _virgil_crypto_python.VirgilKeyPair_isPrivateKeyEncrypted
    if _newclass:
        isPrivateKeyEncrypted = staticmethod(_virgil_crypto_python.VirgilKeyPair_isPrivateKeyEncrypted)
    __swig_getmethods__["resetPrivateKeyPassword"] = lambda x: _virgil_crypto_python.VirgilKeyPair_resetPrivateKeyPassword
    if _newclass:
        resetPrivateKeyPassword = staticmethod(_virgil_crypto_python.VirgilKeyPair_resetPrivateKeyPassword)
    __swig_getmethods__["encryptPrivateKey"] = lambda x: _virgil_crypto_python.VirgilKeyPair_encryptPrivateKey
    if _newclass:
        encryptPrivateKey = staticmethod(_virgil_crypto_python.VirgilKeyPair_encryptPrivateKey)
    __swig_getmethods__["decryptPrivateKey"] = lambda x: _virgil_crypto_python.VirgilKeyPair_decryptPrivateKey
    if _newclass:
        decryptPrivateKey = staticmethod(_virgil_crypto_python.VirgilKeyPair_decryptPrivateKey)
    __swig_getmethods__["extractPublicKey"] = lambda x: _virgil_crypto_python.VirgilKeyPair_extractPublicKey
    if _newclass:
        extractPublicKey = staticmethod(_virgil_crypto_python.VirgilKeyPair_extractPublicKey)
    __swig_getmethods__["publicKeyToPEM"] = lambda x: _virgil_crypto_python.VirgilKeyPair_publicKeyToPEM
    if _newclass:
        publicKeyToPEM = staticmethod(_virgil_crypto_python.VirgilKeyPair_publicKeyToPEM)
    __swig_getmethods__["publicKeyToDER"] = lambda x: _virgil_crypto_python.VirgilKeyPair_publicKeyToDER
    if _newclass:
        publicKeyToDER = staticmethod(_virgil_crypto_python.VirgilKeyPair_publicKeyToDER)
    __swig_getmethods__["privateKeyToPEM"] = lambda x: _virgil_crypto_python.VirgilKeyPair_privateKeyToPEM
    if _newclass:
        privateKeyToPEM = staticmethod(_virgil_crypto_python.VirgilKeyPair_privateKeyToPEM)
    __swig_getmethods__["privateKeyToDER"] = lambda x: _virgil_crypto_python.VirgilKeyPair_privateKeyToDER
    if _newclass:
        privateKeyToDER = staticmethod(_virgil_crypto_python.VirgilKeyPair_privateKeyToDER)

    def publicKey(self):
        return _virgil_crypto_python.VirgilKeyPair_publicKey(self)

    def privateKey(self):
        return _virgil_crypto_python.VirgilKeyPair_privateKey(self)

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilKeyPair(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilKeyPair
    __del__ = lambda self: None
VirgilKeyPair_swigregister = _virgil_crypto_python.VirgilKeyPair_swigregister
VirgilKeyPair_swigregister(VirgilKeyPair)

def VirgilKeyPair_generate(*args):
    return _virgil_crypto_python.VirgilKeyPair_generate(*args)
VirgilKeyPair_generate = _virgil_crypto_python.VirgilKeyPair_generate

def VirgilKeyPair_generateRecommended(*args):
    return _virgil_crypto_python.VirgilKeyPair_generateRecommended(*args)
VirgilKeyPair_generateRecommended = _virgil_crypto_python.VirgilKeyPair_generateRecommended

def VirgilKeyPair_generateFrom(*args):
    return _virgil_crypto_python.VirgilKeyPair_generateFrom(*args)
VirgilKeyPair_generateFrom = _virgil_crypto_python.VirgilKeyPair_generateFrom

def VirgilKeyPair_isKeyPairMatch(*args):
    return _virgil_crypto_python.VirgilKeyPair_isKeyPairMatch(*args)
VirgilKeyPair_isKeyPairMatch = _virgil_crypto_python.VirgilKeyPair_isKeyPairMatch

def VirgilKeyPair_checkPrivateKeyPassword(key, pwd):
    return _virgil_crypto_python.VirgilKeyPair_checkPrivateKeyPassword(key, pwd)
VirgilKeyPair_checkPrivateKeyPassword = _virgil_crypto_python.VirgilKeyPair_checkPrivateKeyPassword

def VirgilKeyPair_isPrivateKeyEncrypted(privateKey):
    return _virgil_crypto_python.VirgilKeyPair_isPrivateKeyEncrypted(privateKey)
VirgilKeyPair_isPrivateKeyEncrypted = _virgil_crypto_python.VirgilKeyPair_isPrivateKeyEncrypted

def VirgilKeyPair_resetPrivateKeyPassword(privateKey, oldPassword, newPassword):
    return _virgil_crypto_python.VirgilKeyPair_resetPrivateKeyPassword(privateKey, oldPassword, newPassword)
VirgilKeyPair_resetPrivateKeyPassword = _virgil_crypto_python.VirgilKeyPair_resetPrivateKeyPassword

def VirgilKeyPair_encryptPrivateKey(privateKey, privateKeyPassword):
    return _virgil_crypto_python.VirgilKeyPair_encryptPrivateKey(privateKey, privateKeyPassword)
VirgilKeyPair_encryptPrivateKey = _virgil_crypto_python.VirgilKeyPair_encryptPrivateKey

def VirgilKeyPair_decryptPrivateKey(privateKey, privateKeyPassword):
    return _virgil_crypto_python.VirgilKeyPair_decryptPrivateKey(privateKey, privateKeyPassword)
VirgilKeyPair_decryptPrivateKey = _virgil_crypto_python.VirgilKeyPair_decryptPrivateKey

def VirgilKeyPair_extractPublicKey(privateKey, privateKeyPassword):
    return _virgil_crypto_python.VirgilKeyPair_extractPublicKey(privateKey, privateKeyPassword)
VirgilKeyPair_extractPublicKey = _virgil_crypto_python.VirgilKeyPair_extractPublicKey

def VirgilKeyPair_publicKeyToPEM(publicKey):
    return _virgil_crypto_python.VirgilKeyPair_publicKeyToPEM(publicKey)
VirgilKeyPair_publicKeyToPEM = _virgil_crypto_python.VirgilKeyPair_publicKeyToPEM

def VirgilKeyPair_publicKeyToDER(publicKey):
    return _virgil_crypto_python.VirgilKeyPair_publicKeyToDER(publicKey)
VirgilKeyPair_publicKeyToDER = _virgil_crypto_python.VirgilKeyPair_publicKeyToDER

def VirgilKeyPair_privateKeyToPEM(*args):
    return _virgil_crypto_python.VirgilKeyPair_privateKeyToPEM(*args)
VirgilKeyPair_privateKeyToPEM = _virgil_crypto_python.VirgilKeyPair_privateKeyToPEM

def VirgilKeyPair_privateKeyToDER(*args):
    return _virgil_crypto_python.VirgilKeyPair_privateKeyToDER(*args)
VirgilKeyPair_privateKeyToDER = _virgil_crypto_python.VirgilKeyPair_privateKeyToDER

class VirgilCipherBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilCipherBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilCipherBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _virgil_crypto_python.new_VirgilCipherBase()
        try:
            self.this.append(this)
        except:
            self.this = this

    def addKeyRecipient(self, recipientId, publicKey):
        return _virgil_crypto_python.VirgilCipherBase_addKeyRecipient(self, recipientId, publicKey)

    def removeKeyRecipient(self, recipientId):
        return _virgil_crypto_python.VirgilCipherBase_removeKeyRecipient(self, recipientId)

    def keyRecipientExists(self, recipientId):
        return _virgil_crypto_python.VirgilCipherBase_keyRecipientExists(self, recipientId)

    def addPasswordRecipient(self, pwd):
        return _virgil_crypto_python.VirgilCipherBase_addPasswordRecipient(self, pwd)

    def removePasswordRecipient(self, pwd):
        return _virgil_crypto_python.VirgilCipherBase_removePasswordRecipient(self, pwd)

    def passwordRecipientExists(self, password):
        return _virgil_crypto_python.VirgilCipherBase_passwordRecipientExists(self, password)

    def removeAllRecipients(self):
        return _virgil_crypto_python.VirgilCipherBase_removeAllRecipients(self)

    def getContentInfo(self):
        return _virgil_crypto_python.VirgilCipherBase_getContentInfo(self)

    def setContentInfo(self, contentInfo):
        return _virgil_crypto_python.VirgilCipherBase_setContentInfo(self, contentInfo)
    __swig_getmethods__["defineContentInfoSize"] = lambda x: _virgil_crypto_python.VirgilCipherBase_defineContentInfoSize
    if _newclass:
        defineContentInfoSize = staticmethod(_virgil_crypto_python.VirgilCipherBase_defineContentInfoSize)

    def customParams(self, *args):
        return _virgil_crypto_python.VirgilCipherBase_customParams(self, *args)
    __swig_getmethods__["computeShared"] = lambda x: _virgil_crypto_python.VirgilCipherBase_computeShared
    if _newclass:
        computeShared = staticmethod(_virgil_crypto_python.VirgilCipherBase_computeShared)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilCipherBase
    __del__ = lambda self: None
VirgilCipherBase_swigregister = _virgil_crypto_python.VirgilCipherBase_swigregister
VirgilCipherBase_swigregister(VirgilCipherBase)

def VirgilCipherBase_defineContentInfoSize(data):
    return _virgil_crypto_python.VirgilCipherBase_defineContentInfoSize(data)
VirgilCipherBase_defineContentInfoSize = _virgil_crypto_python.VirgilCipherBase_defineContentInfoSize

def VirgilCipherBase_computeShared(*args):
    return _virgil_crypto_python.VirgilCipherBase_computeShared(*args)
VirgilCipherBase_computeShared = _virgil_crypto_python.VirgilCipherBase_computeShared

class VirgilCipher(VirgilCipherBase):
    __swig_setmethods__ = {}
    for _s in [VirgilCipherBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilCipher, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilCipherBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilCipher, name)
    __repr__ = _swig_repr

    def encrypt(self, data, embedContentInfo=True):
        return _virgil_crypto_python.VirgilCipher_encrypt(self, data, embedContentInfo)

    def decryptWithKey(self, *args):
        return _virgil_crypto_python.VirgilCipher_decryptWithKey(self, *args)

    def decryptWithPassword(self, encryptedData, pwd):
        return _virgil_crypto_python.VirgilCipher_decryptWithPassword(self, encryptedData, pwd)

    def __init__(self):
        this = _virgil_crypto_python.new_VirgilCipher()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilCipher
    __del__ = lambda self: None
VirgilCipher_swigregister = _virgil_crypto_python.VirgilCipher_swigregister
VirgilCipher_swigregister(VirgilCipher)

class VirgilChunkCipher(VirgilCipherBase):
    __swig_setmethods__ = {}
    for _s in [VirgilCipherBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilChunkCipher, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilCipherBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilChunkCipher, name)
    __repr__ = _swig_repr
    kPreferredChunkSize = _virgil_crypto_python.VirgilChunkCipher_kPreferredChunkSize

    def encrypt(self, *args):
        return _virgil_crypto_python.VirgilChunkCipher_encrypt(self, *args)

    def decryptWithKey(self, *args):
        return _virgil_crypto_python.VirgilChunkCipher_decryptWithKey(self, *args)

    def decryptWithPassword(self, source, sink, pwd):
        return _virgil_crypto_python.VirgilChunkCipher_decryptWithPassword(self, source, sink, pwd)

    def __init__(self):
        this = _virgil_crypto_python.new_VirgilChunkCipher()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilChunkCipher
    __del__ = lambda self: None
VirgilChunkCipher_swigregister = _virgil_crypto_python.VirgilChunkCipher_swigregister
VirgilChunkCipher_swigregister(VirgilChunkCipher)

class VirgilSigner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilSigner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilSigner, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilSigner(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def sign(self, *args):
        return _virgil_crypto_python.VirgilSigner_sign(self, *args)

    def verify(self, data, sign, publicKey):
        return _virgil_crypto_python.VirgilSigner_verify(self, data, sign, publicKey)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilSigner
    __del__ = lambda self: None
VirgilSigner_swigregister = _virgil_crypto_python.VirgilSigner_swigregister
VirgilSigner_swigregister(VirgilSigner)

class VirgilStreamSigner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilStreamSigner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilStreamSigner, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilStreamSigner(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def sign(self, *args):
        return _virgil_crypto_python.VirgilStreamSigner_sign(self, *args)

    def verify(self, source, sign, publicKey):
        return _virgil_crypto_python.VirgilStreamSigner_verify(self, source, sign, publicKey)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilStreamSigner
    __del__ = lambda self: None
VirgilStreamSigner_swigregister = _virgil_crypto_python.VirgilStreamSigner_swigregister
VirgilStreamSigner_swigregister(VirgilStreamSigner)

class VirgilStreamCipher(VirgilCipherBase):
    __swig_setmethods__ = {}
    for _s in [VirgilCipherBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilStreamCipher, name, value)
    __swig_getmethods__ = {}
    for _s in [VirgilCipherBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilStreamCipher, name)
    __repr__ = _swig_repr

    def encrypt(self, source, sink, embedContentInfo=True):
        return _virgil_crypto_python.VirgilStreamCipher_encrypt(self, source, sink, embedContentInfo)

    def decryptWithKey(self, *args):
        return _virgil_crypto_python.VirgilStreamCipher_decryptWithKey(self, *args)

    def decryptWithPassword(self, source, sink, pwd):
        return _virgil_crypto_python.VirgilStreamCipher_decryptWithPassword(self, source, sink, pwd)

    def __init__(self):
        this = _virgil_crypto_python.new_VirgilStreamCipher()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilStreamCipher
    __del__ = lambda self: None
VirgilStreamCipher_swigregister = _virgil_crypto_python.VirgilStreamCipher_swigregister
VirgilStreamCipher_swigregister(VirgilStreamCipher)

class VirgilTinyCipher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilTinyCipher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilTinyCipher, name)
    __repr__ = _swig_repr
    PackageSize_Min = _virgil_crypto_python.VirgilTinyCipher_PackageSize_Min
    PackageSize_Short_SMS = _virgil_crypto_python.VirgilTinyCipher_PackageSize_Short_SMS
    PackageSize_Long_SMS = _virgil_crypto_python.VirgilTinyCipher_PackageSize_Long_SMS

    def __init__(self, *args):
        this = _virgil_crypto_python.new_VirgilTinyCipher(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self):
        return _virgil_crypto_python.VirgilTinyCipher_reset(self)

    def encrypt(self, data, recipientPublicKey):
        return _virgil_crypto_python.VirgilTinyCipher_encrypt(self, data, recipientPublicKey)

    def encryptAndSign(self, *args):
        return _virgil_crypto_python.VirgilTinyCipher_encryptAndSign(self, *args)

    def getPackageCount(self):
        return _virgil_crypto_python.VirgilTinyCipher_getPackageCount(self)

    def getPackage(self, index):
        return _virgil_crypto_python.VirgilTinyCipher_getPackage(self, index)

    def addPackage(self, package):
        return _virgil_crypto_python.VirgilTinyCipher_addPackage(self, package)

    def isPackagesAccumulated(self):
        return _virgil_crypto_python.VirgilTinyCipher_isPackagesAccumulated(self)

    def decrypt(self, *args):
        return _virgil_crypto_python.VirgilTinyCipher_decrypt(self, *args)

    def verifyAndDecrypt(self, *args):
        return _virgil_crypto_python.VirgilTinyCipher_verifyAndDecrypt(self, *args)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilTinyCipher
    __del__ = lambda self: None
VirgilTinyCipher_swigregister = _virgil_crypto_python.VirgilTinyCipher_swigregister
VirgilTinyCipher_swigregister(VirgilTinyCipher)

class VirgilByteArrayUtils(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirgilByteArrayUtils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirgilByteArrayUtils, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["jsonToBytes"] = lambda x: _virgil_crypto_python.VirgilByteArrayUtils_jsonToBytes
    if _newclass:
        jsonToBytes = staticmethod(_virgil_crypto_python.VirgilByteArrayUtils_jsonToBytes)
    __swig_getmethods__["stringToBytes"] = lambda x: _virgil_crypto_python.VirgilByteArrayUtils_stringToBytes
    if _newclass:
        stringToBytes = staticmethod(_virgil_crypto_python.VirgilByteArrayUtils_stringToBytes)
    __swig_getmethods__["bytesToString"] = lambda x: _virgil_crypto_python.VirgilByteArrayUtils_bytesToString
    if _newclass:
        bytesToString = staticmethod(_virgil_crypto_python.VirgilByteArrayUtils_bytesToString)
    __swig_getmethods__["hexToBytes"] = lambda x: _virgil_crypto_python.VirgilByteArrayUtils_hexToBytes
    if _newclass:
        hexToBytes = staticmethod(_virgil_crypto_python.VirgilByteArrayUtils_hexToBytes)
    __swig_getmethods__["bytesToHex"] = lambda x: _virgil_crypto_python.VirgilByteArrayUtils_bytesToHex
    if _newclass:
        bytesToHex = staticmethod(_virgil_crypto_python.VirgilByteArrayUtils_bytesToHex)
    __swig_destroy__ = _virgil_crypto_python.delete_VirgilByteArrayUtils
    __del__ = lambda self: None
VirgilByteArrayUtils_swigregister = _virgil_crypto_python.VirgilByteArrayUtils_swigregister
VirgilByteArrayUtils_swigregister(VirgilByteArrayUtils)

def VirgilByteArrayUtils_jsonToBytes(json):
    return _virgil_crypto_python.VirgilByteArrayUtils_jsonToBytes(json)
VirgilByteArrayUtils_jsonToBytes = _virgil_crypto_python.VirgilByteArrayUtils_jsonToBytes

def VirgilByteArrayUtils_stringToBytes(str):
    return _virgil_crypto_python.VirgilByteArrayUtils_stringToBytes(str)
VirgilByteArrayUtils_stringToBytes = _virgil_crypto_python.VirgilByteArrayUtils_stringToBytes

def VirgilByteArrayUtils_bytesToString(array):
    return _virgil_crypto_python.VirgilByteArrayUtils_bytesToString(array)
VirgilByteArrayUtils_bytesToString = _virgil_crypto_python.VirgilByteArrayUtils_bytesToString

def VirgilByteArrayUtils_hexToBytes(hexStr):
    return _virgil_crypto_python.VirgilByteArrayUtils_hexToBytes(hexStr)
VirgilByteArrayUtils_hexToBytes = _virgil_crypto_python.VirgilByteArrayUtils_hexToBytes

def VirgilByteArrayUtils_bytesToHex(array, formatted=False):
    return _virgil_crypto_python.VirgilByteArrayUtils_bytesToHex(array, formatted)
VirgilByteArrayUtils_bytesToHex = _virgil_crypto_python.VirgilByteArrayUtils_bytesToHex

# This file is compatible with both classic and new-style classes.


