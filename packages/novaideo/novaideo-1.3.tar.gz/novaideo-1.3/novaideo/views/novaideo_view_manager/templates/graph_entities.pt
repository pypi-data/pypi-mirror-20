    <div i18n:domain="novaideo" tal:omit-tag="" tal:condition="nodes" tal:define="canvas_id 'canvas_'+node_id">
      <div class="graph-legend">
        <div class="graph-legend-question"><span class="circle"></span> <span i18n:translate="">Question</span></div> 
        <div class="graph-legend-answer"><span class="circle"></span> <span i18n:translate="" i18n:context="question" >Answer</span></div> 
        <div class="graph-legend-idea"><span class="circle"></span> <span i18n:translate="">Idea</span></div> 
        <div class="graph-legend-wg"><span class="circle"></span> <span i18n:translate="">Working Group</span></div>
        <div class="graph-legend-current"><span class="circle"></span> <span i18n:translate="">Current entity</span></div>
        <div class="graph-legend-solid"><span class="line"></span> <span i18n:translate="">Solid relation</span></div>
        <div class="graph-legend-weak"><span class="line"></span> <span i18n:translate="">Weak relation</span></div>
      </div>
      <div class="graph-canvas" id="${canvas_id}"></div>
      <script tal:define="valid_nodes dict([n for n in nodes.items() if can_access(user, get_obj(n[1]['oid']))])">
          deform.addCallback(
             '${canvas_id}',
             function(oid) {
                  var colors = {
                      idea: "#54902a",
                      proposal: "#3f6da6",
                      question: "#e66a11",
                      answer: "#9e785c",
                      challenge: "#ddb722"
                  };
                  var G = new jsnx.Graph();
                  <div tal:omit-tag="" tal:repeat="node valid_nodes">
                    var node${node} = {toString: function() { return ${json.dumps(valid_nodes[node]['title'])}; }};
                  </div>
                  G.addNodesFrom([${','.join(['[node'+node+', {url:"'+request.resource_url(get_obj(valid_nodes[node]['oid']), '@@index')+'", entityid: "node'+node+'", descriminator:"'+valid_nodes[node]['descriminator']+'"}]' for node in valid_nodes])}]);
                  <div tal:omit-tag="" tal:repeat="node valid_nodes">
                    G.addEdgesFrom([${','.join(['[node'+node+', node'+target['id']+',{type:"'+target['type']+'"}]' for target in valid_nodes[node]['targets'] if can_access(user, get_obj(target['oid']))])}]);
                  </div>
                  var color = d3.scale.category20();
                  jsnx.draw(G, {
                      element: '#'+oid,
                      layoutAttr: {
                          charge: -120,
                          linkDistance: 320
                      },
                      withLabels: true,
                      nodeAttr: {
                          r:  25,
                          url: function(d) { return d.data.url;},
                          descriminator: function(d) { return d.data.descriminator;},
                          entityid: function(d) { return d.data.entityid;},
                          class: function(d) { return d.data.entityid == '${'node'+node_id}'? "current"+" node-shape": "node-shape";}, 
                      },
                      nodeStyle: {
                          fill: function(d) { return colors[d.data.descriminator]},
                          stroke: 'none',
                          'cursor': 'pointer'
                      },
                      edgeStyle: {
                          'fill': function(d) {
                                  return d.data.type=='solid'? "#999": '#df9b3e';
                          },
                          'stroke-width': 4
                        } 
                      
                  });
                }
              );
      </script>
    </div>