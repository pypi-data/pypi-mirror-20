# coding=utf-8
#####################################################
# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT #
#####################################################
# noqa: E128,E201
from .asyncclient import AsyncBaseClient
from .asyncclient import createApiClient
from .asyncclient import config
from .asyncclient import createTemporaryCredentials
from .asyncclient import createSession
_defaultConfig = config


class GithubEvents(AsyncBaseClient):
    """
    The github service, typically available at
    `github.taskcluster.net`, is responsible for publishing a pulse
    message for supported github events.

    This document describes the exchange offered by the taskcluster
    github service
    """

    classOptions = {
        "exchangePrefix": "exchange/taskcluster-github/v1/"
    }

    """
    GitHub Pull Request Event

    When a GitHub pull request event is posted it will be broadcast on this
    exchange with the designated `organization` and `repository`
    in the routing-key along with event specific metadata in the payload.

    This exchange outputs: ``http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#``This exchange takes the following keys:

     * routingKeyKind: Identifier for the routing-key kind. This is always `"primary"` for the formalized routing key. (required)

     * organization: The GitHub `organization` which had an event. All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped. (required)

     * repository: The GitHub `repository` which had an event.All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped. (required)

     * action: The GitHub `action` which triggered an event. See for possible values see the payload actions property. (required)
    """

    def pullRequest(self, *args, **kwargs):
        return self._makeTopicExchange({'name': 'pullRequest', 'schema': 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#', 'routingKey': [{'summary': 'Identifier for the routing-key kind. This is always `"primary"` for the formalized routing key.', 'name': 'routingKeyKind', 'multipleWords': False, 'constant': 'primary', 'required': True}, {'summary': 'The GitHub `organization` which had an event. All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped.', 'name': 'organization', 'multipleWords': False, 'required': True}, {'summary': 'The GitHub `repository` which had an event.All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped.', 'name': 'repository', 'multipleWords': False, 'required': True}, {'summary': 'The GitHub `action` which triggered an event. See for possible values see the payload actions property.', 'name': 'action', 'multipleWords': False, 'required': True}], 'exchange': 'pull-request'}, *args, **kwargs)

    """
    GitHub push Event

    When a GitHub push event is posted it will be broadcast on this
    exchange with the designated `organization` and `repository`
    in the routing-key along with event specific metadata in the payload.

    This exchange outputs: ``http://schemas.taskcluster.net/github/v1/github-push-message.json#``This exchange takes the following keys:

     * routingKeyKind: Identifier for the routing-key kind. This is always `"primary"` for the formalized routing key. (required)

     * organization: The GitHub `organization` which had an event. All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped. (required)

     * repository: The GitHub `repository` which had an event.All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped. (required)
    """

    def push(self, *args, **kwargs):
        return self._makeTopicExchange({'name': 'push', 'schema': 'http://schemas.taskcluster.net/github/v1/github-push-message.json#', 'routingKey': [{'summary': 'Identifier for the routing-key kind. This is always `"primary"` for the formalized routing key.', 'name': 'routingKeyKind', 'multipleWords': False, 'constant': 'primary', 'required': True}, {'summary': 'The GitHub `organization` which had an event. All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped.', 'name': 'organization', 'multipleWords': False, 'required': True}, {'summary': 'The GitHub `repository` which had an event.All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped.', 'name': 'repository', 'multipleWords': False, 'required': True}], 'exchange': 'push'}, *args, **kwargs)

    """
    GitHub release Event

    When a GitHub release event is posted it will be broadcast on this
    exchange with the designated `organization` and `repository`
    in the routing-key along with event specific metadata in the payload.

    This exchange outputs: ``http://schemas.taskcluster.net/github/v1/github-release-message.json#``This exchange takes the following keys:

     * routingKeyKind: Identifier for the routing-key kind. This is always `"primary"` for the formalized routing key. (required)

     * organization: The GitHub `organization` which had an event. All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped. (required)

     * repository: The GitHub `repository` which had an event.All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped. (required)
    """

    def release(self, *args, **kwargs):
        return self._makeTopicExchange({'name': 'release', 'schema': 'http://schemas.taskcluster.net/github/v1/github-release-message.json#', 'routingKey': [{'summary': 'Identifier for the routing-key kind. This is always `"primary"` for the formalized routing key.', 'name': 'routingKeyKind', 'multipleWords': False, 'constant': 'primary', 'required': True}, {'summary': 'The GitHub `organization` which had an event. All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped.', 'name': 'organization', 'multipleWords': False, 'required': True}, {'summary': 'The GitHub `repository` which had an event.All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped.', 'name': 'repository', 'multipleWords': False, 'required': True}], 'exchange': 'release'}, *args, **kwargs)

    funcinfo = {
    }


__all__ = ['createTemporaryCredentials', 'config', '_defaultConfig', 'createApiClient', 'createSession', 'GithubEvents']
