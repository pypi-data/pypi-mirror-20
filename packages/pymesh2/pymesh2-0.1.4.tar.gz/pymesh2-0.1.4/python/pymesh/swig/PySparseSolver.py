# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import numpy as np
import scipy.sparse





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PySparseSolver')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PySparseSolver')
    _PySparseSolver = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PySparseSolver', [dirname(__file__)])
        except ImportError:
            import _PySparseSolver
            return _PySparseSolver
        if fp is not None:
            try:
                _mod = imp.load_module('_PySparseSolver', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PySparseSolver = swig_import_helper()
    del swig_import_helper
else:
    import _PySparseSolver
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

SHARED_PTR_DISOWN = _PySparseSolver.SHARED_PTR_DISOWN
class ZSparseMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZSparseMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZSparseMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PySparseSolver.new_ZSparseMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PySparseSolver.delete_ZSparseMatrix
    __del__ = lambda self: None

    def num_rows(self):
        return _PySparseSolver.ZSparseMatrix_num_rows(self)

    def num_cols(self):
        return _PySparseSolver.ZSparseMatrix_num_cols(self)

    def get_inner_size(self):
        return _PySparseSolver.ZSparseMatrix_get_inner_size(self)

    def get_outer_size(self):
        return _PySparseSolver.ZSparseMatrix_get_outer_size(self)

    def get_value_size(self):
        return _PySparseSolver.ZSparseMatrix_get_value_size(self)

    def get_inner_indices(self, np_idx_array):
        return _PySparseSolver.ZSparseMatrix_get_inner_indices(self, np_idx_array)

    def get_outer_indices(self, np_idx_array):
        return _PySparseSolver.ZSparseMatrix_get_outer_indices(self, np_idx_array)

    def get_values(self, np_value_array):
        return _PySparseSolver.ZSparseMatrix_get_values(self, np_value_array)

    def import_raw_csc(self, num_rows, num_cols, inner_idx_array, outer_idx_array, value_array):
        return _PySparseSolver.ZSparseMatrix_import_raw_csc(self, num_rows, num_cols, inner_idx_array, outer_idx_array, value_array)

    def import_raw_coo(self, num_rows, num_cols, row_indices, col_indices, value_array):
        return _PySparseSolver.ZSparseMatrix_import_raw_coo(self, num_rows, num_cols, row_indices, col_indices, value_array)
ZSparseMatrix_swigregister = _PySparseSolver.ZSparseMatrix_swigregister
ZSparseMatrix_swigregister(ZSparseMatrix)


def csc2ZSparseMatrix(mat):
    mat = mat.tocsc();
    zmat = ZSparseMatrix();
    zmat.import_raw_csc(mat.shape[0], mat.shape[1],
            mat.indices, mat.indptr, mat.data);
    return zmat;

def coo2ZSparseMatrix(mat):
    mat = mat.tocoo();
    zmat = ZSparseMatrix();
    zmat.import_raw_coo(mat.shape[0], mat.shape[1], mat.row, mat.col, mat.data);
    return zmat;

class SparseSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SparseSolver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySparseSolver.delete_SparseSolver
    __del__ = lambda self: None

    def analyze_pattern(self, matrix):
        return _PySparseSolver.SparseSolver_analyze_pattern(self, matrix)

    def factorize(self, matrix):
        return _PySparseSolver.SparseSolver_factorize(self, matrix)

    def solve(self, rhs):
        return _PySparseSolver.SparseSolver_solve(self, rhs)
SparseSolver_swigregister = _PySparseSolver.SparseSolver_swigregister
SparseSolver_swigregister(SparseSolver)

class SparseSolverFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseSolverFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SparseSolverFactory, name)
    __repr__ = _swig_repr

    def __init__(self, solver_type):
        this = _PySparseSolver.new_SparseSolverFactory(solver_type)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def create(self):
        return _PySparseSolver.SparseSolverFactory_create(self)
    __swig_destroy__ = _PySparseSolver.delete_SparseSolverFactory
    __del__ = lambda self: None
SparseSolverFactory_swigregister = _PySparseSolver.SparseSolverFactory_swigregister
SparseSolverFactory_swigregister(SparseSolverFactory)

# This file is compatible with both classic and new-style classes.


