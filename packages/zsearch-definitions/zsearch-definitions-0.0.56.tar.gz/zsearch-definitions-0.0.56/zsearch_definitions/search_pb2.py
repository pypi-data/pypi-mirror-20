# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: zsearch_definitions/search.proto

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from zsearch_definitions import anonstore_pb2 as zsearch__definitions_dot_anonstore__pb2
from zsearch_definitions import hoststore_pb2 as zsearch__definitions_dot_hoststore__pb2
from zsearch_definitions import rpc_pb2 as zsearch__definitions_dot_rpc__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='zsearch_definitions/search.proto',
  package='zsearch',
  syntax='proto3',
  serialized_pb=b'\n zsearch_definitions/search.proto\x12\x07zsearch\x1a#zsearch_definitions/anonstore.proto\x1a#zsearch_definitions/hoststore.proto\x1a\x1dzsearch_definitions/rpc.proto2\x80\t\n\x0c\x41\x64minService\x12\x35\n\x08Shutdown\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x33\n\x06Status\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x37\n\nStatistics\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x36\n\tPruneIPv4\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x38\n\x0bPruneDomain\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x39\n\x0cUpdateASData\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12?\n\x12UpdateLocationData\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x41\n\x14ValidateCertificates\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x41\n\x14\x46ixCertificateSource\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12;\n\x0e\x44umpIPv4ToJSON\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12=\n\x10\x44umpDomainToJSON\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x43\n\x16\x44umpCertificatesToJSON\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12;\n\x0e\x44umpKeysToJSON\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x41\n\x14RegenerateIPv4Deltas\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x43\n\x16RegenerateDomainDeltas\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12H\n\x1bRegenerateCertificateDeltas\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12T\n RegenerateSingleCertificateDelta\x12\x17.zsearch.AnonymousQuery\x1a\x15.zsearch.CommandReply\"\x00\x12\x31\n\x04Ping\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x32\x8b\x0b\n\x0cQueryService\x12\x45\n\x11GetHostIPv4Record\x12\x12.zsearch.HostQuery\x1a\x1a.zsearch.HostQueryResponse\"\x00\x12\x36\n\x11PutHostIPv4Record\x12\x0f.zsearch.Record\x1a\x0e.zsearch.Delta\"\x00\x12\x39\n\x11\x44\x65lHostIPv4Record\x12\x12.zsearch.HostQuery\x1a\x0e.zsearch.Delta\"\x00\x12\x45\n\x11GetAllIPv4Records\x12\x12.zsearch.HostQuery\x1a\x1a.zsearch.HostQueryResponse\"\x00\x12\x38\n\x10GetHostIPv4Delta\x12\x12.zsearch.HostQuery\x1a\x0e.zsearch.Delta\"\x00\x12G\n\x13GetHostDomainRecord\x12\x12.zsearch.HostQuery\x1a\x1a.zsearch.HostQueryResponse\"\x00\x12\x38\n\x13PutHostDomainRecord\x12\x0f.zsearch.Record\x1a\x0e.zsearch.Delta\"\x00\x12;\n\x13\x44\x65lHostDomainRecord\x12\x12.zsearch.HostQuery\x1a\x0e.zsearch.Delta\"\x00\x12G\n\x13GetAllDomainRecords\x12\x12.zsearch.HostQuery\x1a\x1a.zsearch.HostQueryResponse\"\x00\x12:\n\x12GetHostDomainDelta\x12\x12.zsearch.HostQuery\x1a\x0e.zsearch.Delta\"\x00\x12L\n\x0eGetCertificate\x12\x17.zsearch.AnonymousQuery\x1a\x1f.zsearch.AnonymousQueryResponse\"\x00\x12H\n\x11UpsertCertificate\x12\x18.zsearch.AnonymousRecord\x1a\x17.zsearch.AnonymousDelta\"\x00\x12K\n\x14UpsertRawCertificate\x12\x18.zsearch.AnonymousRecord\x1a\x17.zsearch.AnonymousDelta\"\x00\x12Q\n\x13GetCryptographicKey\x12\x17.zsearch.AnonymousQuery\x1a\x1f.zsearch.AnonymousQueryResponse\"\x00\x12M\n\x16UpsertCryptographicKey\x12\x18.zsearch.AnonymousRecord\x1a\x17.zsearch.AnonymousDelta\"\x00\x12@\n\x11GetPublicLocation\x12\x12.zsearch.HostQuery\x1a\x15.zsearch.LocationAtom\"\x00\x12\x44\n\x15GetRestrictedLocation\x12\x12.zsearch.HostQuery\x1a\x15.zsearch.LocationAtom\"\x00\x12\x31\n\x08GetWHOIS\x12\x12.zsearch.HostQuery\x1a\x0f.zsearch.Record\"\x00\x12\x38\n\x0fGetUserMetadata\x12\x12.zsearch.HostQuery\x1a\x0f.zsearch.Record\"\x00\x12;\n\x0fPutUserMetadata\x12\x0f.zsearch.Record\x1a\x15.zsearch.CommandReply\"\x00\x12\x42\n\x0cGetRootStore\x12\x17.zsearch.RootStoreQuery\x1a\x17.zsearch.RootStoreReply\"\x00\x62\x06proto3'
  ,
  dependencies=[zsearch__definitions_dot_anonstore__pb2.DESCRIPTOR,zsearch__definitions_dot_hoststore__pb2.DESCRIPTOR,zsearch__definitions_dot_rpc__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)





import abc
from grpc.beta import implementations as beta_implementations
from grpc.early_adopter import implementations as early_adopter_implementations
from grpc.framework.alpha import utilities as alpha_utilities
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities
class EarlyAdopterAdminServiceServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Shutdown(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Status(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Statistics(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def PruneIPv4(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def PruneDomain(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def UpdateASData(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def UpdateLocationData(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def ValidateCertificates(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def FixCertificateSource(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DumpIPv4ToJSON(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DumpDomainToJSON(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DumpCertificatesToJSON(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DumpKeysToJSON(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def RegenerateIPv4Deltas(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def RegenerateDomainDeltas(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def RegenerateCertificateDeltas(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def RegenerateSingleCertificateDelta(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Ping(self, request, context):
    raise NotImplementedError()
class EarlyAdopterAdminServiceServer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def start(self):
    raise NotImplementedError()
  @abc.abstractmethod
  def stop(self):
    raise NotImplementedError()
class EarlyAdopterAdminServiceStub(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Shutdown(self, request):
    raise NotImplementedError()
  Shutdown.async = None
  @abc.abstractmethod
  def Status(self, request):
    raise NotImplementedError()
  Status.async = None
  @abc.abstractmethod
  def Statistics(self, request):
    raise NotImplementedError()
  Statistics.async = None
  @abc.abstractmethod
  def PruneIPv4(self, request):
    raise NotImplementedError()
  PruneIPv4.async = None
  @abc.abstractmethod
  def PruneDomain(self, request):
    raise NotImplementedError()
  PruneDomain.async = None
  @abc.abstractmethod
  def UpdateASData(self, request):
    raise NotImplementedError()
  UpdateASData.async = None
  @abc.abstractmethod
  def UpdateLocationData(self, request):
    raise NotImplementedError()
  UpdateLocationData.async = None
  @abc.abstractmethod
  def ValidateCertificates(self, request):
    raise NotImplementedError()
  ValidateCertificates.async = None
  @abc.abstractmethod
  def FixCertificateSource(self, request):
    raise NotImplementedError()
  FixCertificateSource.async = None
  @abc.abstractmethod
  def DumpIPv4ToJSON(self, request):
    raise NotImplementedError()
  DumpIPv4ToJSON.async = None
  @abc.abstractmethod
  def DumpDomainToJSON(self, request):
    raise NotImplementedError()
  DumpDomainToJSON.async = None
  @abc.abstractmethod
  def DumpCertificatesToJSON(self, request):
    raise NotImplementedError()
  DumpCertificatesToJSON.async = None
  @abc.abstractmethod
  def DumpKeysToJSON(self, request):
    raise NotImplementedError()
  DumpKeysToJSON.async = None
  @abc.abstractmethod
  def RegenerateIPv4Deltas(self, request):
    raise NotImplementedError()
  RegenerateIPv4Deltas.async = None
  @abc.abstractmethod
  def RegenerateDomainDeltas(self, request):
    raise NotImplementedError()
  RegenerateDomainDeltas.async = None
  @abc.abstractmethod
  def RegenerateCertificateDeltas(self, request):
    raise NotImplementedError()
  RegenerateCertificateDeltas.async = None
  @abc.abstractmethod
  def RegenerateSingleCertificateDelta(self, request):
    raise NotImplementedError()
  RegenerateSingleCertificateDelta.async = None
  @abc.abstractmethod
  def Ping(self, request):
    raise NotImplementedError()
  Ping.async = None
def early_adopter_create_AdminService_server(servicer, port, private_key=None, certificate_chain=None):
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  method_service_descriptions = {
    "DumpCertificatesToJSON": alpha_utilities.unary_unary_service_description(
      servicer.DumpCertificatesToJSON,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "DumpDomainToJSON": alpha_utilities.unary_unary_service_description(
      servicer.DumpDomainToJSON,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "DumpIPv4ToJSON": alpha_utilities.unary_unary_service_description(
      servicer.DumpIPv4ToJSON,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "DumpKeysToJSON": alpha_utilities.unary_unary_service_description(
      servicer.DumpKeysToJSON,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "FixCertificateSource": alpha_utilities.unary_unary_service_description(
      servicer.FixCertificateSource,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "Ping": alpha_utilities.unary_unary_service_description(
      servicer.Ping,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "PruneDomain": alpha_utilities.unary_unary_service_description(
      servicer.PruneDomain,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "PruneIPv4": alpha_utilities.unary_unary_service_description(
      servicer.PruneIPv4,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "RegenerateCertificateDeltas": alpha_utilities.unary_unary_service_description(
      servicer.RegenerateCertificateDeltas,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "RegenerateDomainDeltas": alpha_utilities.unary_unary_service_description(
      servicer.RegenerateDomainDeltas,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "RegenerateIPv4Deltas": alpha_utilities.unary_unary_service_description(
      servicer.RegenerateIPv4Deltas,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "RegenerateSingleCertificateDelta": alpha_utilities.unary_unary_service_description(
      servicer.RegenerateSingleCertificateDelta,
      zsearch_definitions.rpc_pb2.AnonymousQuery.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "Shutdown": alpha_utilities.unary_unary_service_description(
      servicer.Shutdown,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "Statistics": alpha_utilities.unary_unary_service_description(
      servicer.Statistics,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "Status": alpha_utilities.unary_unary_service_description(
      servicer.Status,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "UpdateASData": alpha_utilities.unary_unary_service_description(
      servicer.UpdateASData,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "UpdateLocationData": alpha_utilities.unary_unary_service_description(
      servicer.UpdateLocationData,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "ValidateCertificates": alpha_utilities.unary_unary_service_description(
      servicer.ValidateCertificates,
      zsearch_definitions.rpc_pb2.Command.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
  }
  return early_adopter_implementations.server("zsearch.AdminService", method_service_descriptions, port, private_key=private_key, certificate_chain=certificate_chain)
def early_adopter_create_AdminService_stub(host, port, metadata_transformer=None, secure=False, root_certificates=None, private_key=None, certificate_chain=None, server_host_override=None):
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  method_invocation_descriptions = {
    "DumpCertificatesToJSON": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "DumpDomainToJSON": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "DumpIPv4ToJSON": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "DumpKeysToJSON": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "FixCertificateSource": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "Ping": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "PruneDomain": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "PruneIPv4": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "RegenerateCertificateDeltas": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "RegenerateDomainDeltas": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "RegenerateIPv4Deltas": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "RegenerateSingleCertificateDelta": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.AnonymousQuery.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "Shutdown": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "Statistics": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "Status": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "UpdateASData": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "UpdateLocationData": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "ValidateCertificates": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.Command.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
  }
  return early_adopter_implementations.stub("zsearch.AdminService", method_invocation_descriptions, host, port, metadata_transformer=metadata_transformer, secure=secure, root_certificates=root_certificates, private_key=private_key, certificate_chain=certificate_chain, server_host_override=server_host_override)

class BetaAdminServiceServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Shutdown(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Status(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Statistics(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def PruneIPv4(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def PruneDomain(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def UpdateASData(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def UpdateLocationData(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def ValidateCertificates(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def FixCertificateSource(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DumpIPv4ToJSON(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DumpDomainToJSON(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DumpCertificatesToJSON(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DumpKeysToJSON(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def RegenerateIPv4Deltas(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def RegenerateDomainDeltas(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def RegenerateCertificateDeltas(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def RegenerateSingleCertificateDelta(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Ping(self, request, context):
    raise NotImplementedError()

class BetaAdminServiceStub(object):
  """The interface to which stubs will conform."""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Shutdown(self, request, timeout):
    raise NotImplementedError()
  Shutdown.future = None
  @abc.abstractmethod
  def Status(self, request, timeout):
    raise NotImplementedError()
  Status.future = None
  @abc.abstractmethod
  def Statistics(self, request, timeout):
    raise NotImplementedError()
  Statistics.future = None
  @abc.abstractmethod
  def PruneIPv4(self, request, timeout):
    raise NotImplementedError()
  PruneIPv4.future = None
  @abc.abstractmethod
  def PruneDomain(self, request, timeout):
    raise NotImplementedError()
  PruneDomain.future = None
  @abc.abstractmethod
  def UpdateASData(self, request, timeout):
    raise NotImplementedError()
  UpdateASData.future = None
  @abc.abstractmethod
  def UpdateLocationData(self, request, timeout):
    raise NotImplementedError()
  UpdateLocationData.future = None
  @abc.abstractmethod
  def ValidateCertificates(self, request, timeout):
    raise NotImplementedError()
  ValidateCertificates.future = None
  @abc.abstractmethod
  def FixCertificateSource(self, request, timeout):
    raise NotImplementedError()
  FixCertificateSource.future = None
  @abc.abstractmethod
  def DumpIPv4ToJSON(self, request, timeout):
    raise NotImplementedError()
  DumpIPv4ToJSON.future = None
  @abc.abstractmethod
  def DumpDomainToJSON(self, request, timeout):
    raise NotImplementedError()
  DumpDomainToJSON.future = None
  @abc.abstractmethod
  def DumpCertificatesToJSON(self, request, timeout):
    raise NotImplementedError()
  DumpCertificatesToJSON.future = None
  @abc.abstractmethod
  def DumpKeysToJSON(self, request, timeout):
    raise NotImplementedError()
  DumpKeysToJSON.future = None
  @abc.abstractmethod
  def RegenerateIPv4Deltas(self, request, timeout):
    raise NotImplementedError()
  RegenerateIPv4Deltas.future = None
  @abc.abstractmethod
  def RegenerateDomainDeltas(self, request, timeout):
    raise NotImplementedError()
  RegenerateDomainDeltas.future = None
  @abc.abstractmethod
  def RegenerateCertificateDeltas(self, request, timeout):
    raise NotImplementedError()
  RegenerateCertificateDeltas.future = None
  @abc.abstractmethod
  def RegenerateSingleCertificateDelta(self, request, timeout):
    raise NotImplementedError()
  RegenerateSingleCertificateDelta.future = None
  @abc.abstractmethod
  def Ping(self, request, timeout):
    raise NotImplementedError()
  Ping.future = None

def beta_create_AdminService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  request_deserializers = {
    ('zsearch.AdminService', 'DumpCertificatesToJSON'): zsearch_definitions.rpc_pb2.Command.FromString,
    ('zsearch.AdminService', 'DumpDomainToJSON'): zsearch_definitions.rpc_pb2.Command.FromString,
    ('zsearch.AdminService', 'DumpIPv4ToJSON'): zsearch_definitions.rpc_pb2.Command.FromString,
    ('zsearch.AdminService', 'DumpKeysToJSON'): zsearch_definitions.rpc_pb2.Command.FromString,
    ('zsearch.AdminService', 'FixCertificateSource'): zsearch_definitions.rpc_pb2.Command.FromString,
    ('zsearch.AdminService', 'Ping'): zsearch_definitions.rpc_pb2.Command.FromString,
    ('zsearch.AdminService', 'PruneDomain'): zsearch_definitions.rpc_pb2.Command.FromString,
    ('zsearch.AdminService', 'PruneIPv4'): zsearch_definitions.rpc_pb2.Command.FromString,
    ('zsearch.AdminService', 'RegenerateCertificateDeltas'): zsearch_definitions.rpc_pb2.Command.FromString,
    ('zsearch.AdminService', 'RegenerateDomainDeltas'): zsearch_definitions.rpc_pb2.Command.FromString,
    ('zsearch.AdminService', 'RegenerateIPv4Deltas'): zsearch_definitions.rpc_pb2.Command.FromString,
    ('zsearch.AdminService', 'RegenerateSingleCertificateDelta'): zsearch_definitions.rpc_pb2.AnonymousQuery.FromString,
    ('zsearch.AdminService', 'Shutdown'): zsearch_definitions.rpc_pb2.Command.FromString,
    ('zsearch.AdminService', 'Statistics'): zsearch_definitions.rpc_pb2.Command.FromString,
    ('zsearch.AdminService', 'Status'): zsearch_definitions.rpc_pb2.Command.FromString,
    ('zsearch.AdminService', 'UpdateASData'): zsearch_definitions.rpc_pb2.Command.FromString,
    ('zsearch.AdminService', 'UpdateLocationData'): zsearch_definitions.rpc_pb2.Command.FromString,
    ('zsearch.AdminService', 'ValidateCertificates'): zsearch_definitions.rpc_pb2.Command.FromString,
  }
  response_serializers = {
    ('zsearch.AdminService', 'DumpCertificatesToJSON'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.AdminService', 'DumpDomainToJSON'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.AdminService', 'DumpIPv4ToJSON'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.AdminService', 'DumpKeysToJSON'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.AdminService', 'FixCertificateSource'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.AdminService', 'Ping'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.AdminService', 'PruneDomain'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.AdminService', 'PruneIPv4'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.AdminService', 'RegenerateCertificateDeltas'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.AdminService', 'RegenerateDomainDeltas'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.AdminService', 'RegenerateIPv4Deltas'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.AdminService', 'RegenerateSingleCertificateDelta'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.AdminService', 'Shutdown'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.AdminService', 'Statistics'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.AdminService', 'Status'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.AdminService', 'UpdateASData'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.AdminService', 'UpdateLocationData'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.AdminService', 'ValidateCertificates'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
  }
  method_implementations = {
    ('zsearch.AdminService', 'DumpCertificatesToJSON'): face_utilities.unary_unary_inline(servicer.DumpCertificatesToJSON),
    ('zsearch.AdminService', 'DumpDomainToJSON'): face_utilities.unary_unary_inline(servicer.DumpDomainToJSON),
    ('zsearch.AdminService', 'DumpIPv4ToJSON'): face_utilities.unary_unary_inline(servicer.DumpIPv4ToJSON),
    ('zsearch.AdminService', 'DumpKeysToJSON'): face_utilities.unary_unary_inline(servicer.DumpKeysToJSON),
    ('zsearch.AdminService', 'FixCertificateSource'): face_utilities.unary_unary_inline(servicer.FixCertificateSource),
    ('zsearch.AdminService', 'Ping'): face_utilities.unary_unary_inline(servicer.Ping),
    ('zsearch.AdminService', 'PruneDomain'): face_utilities.unary_unary_inline(servicer.PruneDomain),
    ('zsearch.AdminService', 'PruneIPv4'): face_utilities.unary_unary_inline(servicer.PruneIPv4),
    ('zsearch.AdminService', 'RegenerateCertificateDeltas'): face_utilities.unary_unary_inline(servicer.RegenerateCertificateDeltas),
    ('zsearch.AdminService', 'RegenerateDomainDeltas'): face_utilities.unary_unary_inline(servicer.RegenerateDomainDeltas),
    ('zsearch.AdminService', 'RegenerateIPv4Deltas'): face_utilities.unary_unary_inline(servicer.RegenerateIPv4Deltas),
    ('zsearch.AdminService', 'RegenerateSingleCertificateDelta'): face_utilities.unary_unary_inline(servicer.RegenerateSingleCertificateDelta),
    ('zsearch.AdminService', 'Shutdown'): face_utilities.unary_unary_inline(servicer.Shutdown),
    ('zsearch.AdminService', 'Statistics'): face_utilities.unary_unary_inline(servicer.Statistics),
    ('zsearch.AdminService', 'Status'): face_utilities.unary_unary_inline(servicer.Status),
    ('zsearch.AdminService', 'UpdateASData'): face_utilities.unary_unary_inline(servicer.UpdateASData),
    ('zsearch.AdminService', 'UpdateLocationData'): face_utilities.unary_unary_inline(servicer.UpdateLocationData),
    ('zsearch.AdminService', 'ValidateCertificates'): face_utilities.unary_unary_inline(servicer.ValidateCertificates),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_AdminService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  request_serializers = {
    ('zsearch.AdminService', 'DumpCertificatesToJSON'): zsearch_definitions.rpc_pb2.Command.SerializeToString,
    ('zsearch.AdminService', 'DumpDomainToJSON'): zsearch_definitions.rpc_pb2.Command.SerializeToString,
    ('zsearch.AdminService', 'DumpIPv4ToJSON'): zsearch_definitions.rpc_pb2.Command.SerializeToString,
    ('zsearch.AdminService', 'DumpKeysToJSON'): zsearch_definitions.rpc_pb2.Command.SerializeToString,
    ('zsearch.AdminService', 'FixCertificateSource'): zsearch_definitions.rpc_pb2.Command.SerializeToString,
    ('zsearch.AdminService', 'Ping'): zsearch_definitions.rpc_pb2.Command.SerializeToString,
    ('zsearch.AdminService', 'PruneDomain'): zsearch_definitions.rpc_pb2.Command.SerializeToString,
    ('zsearch.AdminService', 'PruneIPv4'): zsearch_definitions.rpc_pb2.Command.SerializeToString,
    ('zsearch.AdminService', 'RegenerateCertificateDeltas'): zsearch_definitions.rpc_pb2.Command.SerializeToString,
    ('zsearch.AdminService', 'RegenerateDomainDeltas'): zsearch_definitions.rpc_pb2.Command.SerializeToString,
    ('zsearch.AdminService', 'RegenerateIPv4Deltas'): zsearch_definitions.rpc_pb2.Command.SerializeToString,
    ('zsearch.AdminService', 'RegenerateSingleCertificateDelta'): zsearch_definitions.rpc_pb2.AnonymousQuery.SerializeToString,
    ('zsearch.AdminService', 'Shutdown'): zsearch_definitions.rpc_pb2.Command.SerializeToString,
    ('zsearch.AdminService', 'Statistics'): zsearch_definitions.rpc_pb2.Command.SerializeToString,
    ('zsearch.AdminService', 'Status'): zsearch_definitions.rpc_pb2.Command.SerializeToString,
    ('zsearch.AdminService', 'UpdateASData'): zsearch_definitions.rpc_pb2.Command.SerializeToString,
    ('zsearch.AdminService', 'UpdateLocationData'): zsearch_definitions.rpc_pb2.Command.SerializeToString,
    ('zsearch.AdminService', 'ValidateCertificates'): zsearch_definitions.rpc_pb2.Command.SerializeToString,
  }
  response_deserializers = {
    ('zsearch.AdminService', 'DumpCertificatesToJSON'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.AdminService', 'DumpDomainToJSON'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.AdminService', 'DumpIPv4ToJSON'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.AdminService', 'DumpKeysToJSON'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.AdminService', 'FixCertificateSource'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.AdminService', 'Ping'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.AdminService', 'PruneDomain'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.AdminService', 'PruneIPv4'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.AdminService', 'RegenerateCertificateDeltas'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.AdminService', 'RegenerateDomainDeltas'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.AdminService', 'RegenerateIPv4Deltas'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.AdminService', 'RegenerateSingleCertificateDelta'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.AdminService', 'Shutdown'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.AdminService', 'Statistics'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.AdminService', 'Status'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.AdminService', 'UpdateASData'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.AdminService', 'UpdateLocationData'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.AdminService', 'ValidateCertificates'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
  }
  cardinalities = {
    'DumpCertificatesToJSON': cardinality.Cardinality.UNARY_UNARY,
    'DumpDomainToJSON': cardinality.Cardinality.UNARY_UNARY,
    'DumpIPv4ToJSON': cardinality.Cardinality.UNARY_UNARY,
    'DumpKeysToJSON': cardinality.Cardinality.UNARY_UNARY,
    'FixCertificateSource': cardinality.Cardinality.UNARY_UNARY,
    'Ping': cardinality.Cardinality.UNARY_UNARY,
    'PruneDomain': cardinality.Cardinality.UNARY_UNARY,
    'PruneIPv4': cardinality.Cardinality.UNARY_UNARY,
    'RegenerateCertificateDeltas': cardinality.Cardinality.UNARY_UNARY,
    'RegenerateDomainDeltas': cardinality.Cardinality.UNARY_UNARY,
    'RegenerateIPv4Deltas': cardinality.Cardinality.UNARY_UNARY,
    'RegenerateSingleCertificateDelta': cardinality.Cardinality.UNARY_UNARY,
    'Shutdown': cardinality.Cardinality.UNARY_UNARY,
    'Statistics': cardinality.Cardinality.UNARY_UNARY,
    'Status': cardinality.Cardinality.UNARY_UNARY,
    'UpdateASData': cardinality.Cardinality.UNARY_UNARY,
    'UpdateLocationData': cardinality.Cardinality.UNARY_UNARY,
    'ValidateCertificates': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'zsearch.AdminService', cardinalities, options=stub_options)
class EarlyAdopterQueryServiceServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def GetHostIPv4Record(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def PutHostIPv4Record(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DelHostIPv4Record(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetAllIPv4Records(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetHostIPv4Delta(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetHostDomainRecord(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def PutHostDomainRecord(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DelHostDomainRecord(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetAllDomainRecords(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetHostDomainDelta(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetCertificate(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def UpsertCertificate(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def UpsertRawCertificate(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetCryptographicKey(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def UpsertCryptographicKey(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetPublicLocation(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetRestrictedLocation(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetWHOIS(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetUserMetadata(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def PutUserMetadata(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetRootStore(self, request, context):
    raise NotImplementedError()
class EarlyAdopterQueryServiceServer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def start(self):
    raise NotImplementedError()
  @abc.abstractmethod
  def stop(self):
    raise NotImplementedError()
class EarlyAdopterQueryServiceStub(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def GetHostIPv4Record(self, request):
    raise NotImplementedError()
  GetHostIPv4Record.async = None
  @abc.abstractmethod
  def PutHostIPv4Record(self, request):
    raise NotImplementedError()
  PutHostIPv4Record.async = None
  @abc.abstractmethod
  def DelHostIPv4Record(self, request):
    raise NotImplementedError()
  DelHostIPv4Record.async = None
  @abc.abstractmethod
  def GetAllIPv4Records(self, request):
    raise NotImplementedError()
  GetAllIPv4Records.async = None
  @abc.abstractmethod
  def GetHostIPv4Delta(self, request):
    raise NotImplementedError()
  GetHostIPv4Delta.async = None
  @abc.abstractmethod
  def GetHostDomainRecord(self, request):
    raise NotImplementedError()
  GetHostDomainRecord.async = None
  @abc.abstractmethod
  def PutHostDomainRecord(self, request):
    raise NotImplementedError()
  PutHostDomainRecord.async = None
  @abc.abstractmethod
  def DelHostDomainRecord(self, request):
    raise NotImplementedError()
  DelHostDomainRecord.async = None
  @abc.abstractmethod
  def GetAllDomainRecords(self, request):
    raise NotImplementedError()
  GetAllDomainRecords.async = None
  @abc.abstractmethod
  def GetHostDomainDelta(self, request):
    raise NotImplementedError()
  GetHostDomainDelta.async = None
  @abc.abstractmethod
  def GetCertificate(self, request):
    raise NotImplementedError()
  GetCertificate.async = None
  @abc.abstractmethod
  def UpsertCertificate(self, request):
    raise NotImplementedError()
  UpsertCertificate.async = None
  @abc.abstractmethod
  def UpsertRawCertificate(self, request):
    raise NotImplementedError()
  UpsertRawCertificate.async = None
  @abc.abstractmethod
  def GetCryptographicKey(self, request):
    raise NotImplementedError()
  GetCryptographicKey.async = None
  @abc.abstractmethod
  def UpsertCryptographicKey(self, request):
    raise NotImplementedError()
  UpsertCryptographicKey.async = None
  @abc.abstractmethod
  def GetPublicLocation(self, request):
    raise NotImplementedError()
  GetPublicLocation.async = None
  @abc.abstractmethod
  def GetRestrictedLocation(self, request):
    raise NotImplementedError()
  GetRestrictedLocation.async = None
  @abc.abstractmethod
  def GetWHOIS(self, request):
    raise NotImplementedError()
  GetWHOIS.async = None
  @abc.abstractmethod
  def GetUserMetadata(self, request):
    raise NotImplementedError()
  GetUserMetadata.async = None
  @abc.abstractmethod
  def PutUserMetadata(self, request):
    raise NotImplementedError()
  PutUserMetadata.async = None
  @abc.abstractmethod
  def GetRootStore(self, request):
    raise NotImplementedError()
  GetRootStore.async = None
def early_adopter_create_QueryService_server(servicer, port, private_key=None, certificate_chain=None):
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  method_service_descriptions = {
    "DelHostDomainRecord": alpha_utilities.unary_unary_service_description(
      servicer.DelHostDomainRecord,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.hoststore_pb2.Delta.SerializeToString,
    ),
    "DelHostIPv4Record": alpha_utilities.unary_unary_service_description(
      servicer.DelHostIPv4Record,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.hoststore_pb2.Delta.SerializeToString,
    ),
    "GetAllDomainRecords": alpha_utilities.unary_unary_service_description(
      servicer.GetAllDomainRecords,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.rpc_pb2.HostQueryResponse.SerializeToString,
    ),
    "GetAllIPv4Records": alpha_utilities.unary_unary_service_description(
      servicer.GetAllIPv4Records,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.rpc_pb2.HostQueryResponse.SerializeToString,
    ),
    "GetCertificate": alpha_utilities.unary_unary_service_description(
      servicer.GetCertificate,
      zsearch_definitions.rpc_pb2.AnonymousQuery.FromString,
      zsearch_definitions.rpc_pb2.AnonymousQueryResponse.SerializeToString,
    ),
    "GetCryptographicKey": alpha_utilities.unary_unary_service_description(
      servicer.GetCryptographicKey,
      zsearch_definitions.rpc_pb2.AnonymousQuery.FromString,
      zsearch_definitions.rpc_pb2.AnonymousQueryResponse.SerializeToString,
    ),
    "GetHostDomainDelta": alpha_utilities.unary_unary_service_description(
      servicer.GetHostDomainDelta,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.hoststore_pb2.Delta.SerializeToString,
    ),
    "GetHostDomainRecord": alpha_utilities.unary_unary_service_description(
      servicer.GetHostDomainRecord,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.rpc_pb2.HostQueryResponse.SerializeToString,
    ),
    "GetHostIPv4Delta": alpha_utilities.unary_unary_service_description(
      servicer.GetHostIPv4Delta,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.hoststore_pb2.Delta.SerializeToString,
    ),
    "GetHostIPv4Record": alpha_utilities.unary_unary_service_description(
      servicer.GetHostIPv4Record,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.rpc_pb2.HostQueryResponse.SerializeToString,
    ),
    "GetPublicLocation": alpha_utilities.unary_unary_service_description(
      servicer.GetPublicLocation,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.hoststore_pb2.LocationAtom.SerializeToString,
    ),
    "GetRestrictedLocation": alpha_utilities.unary_unary_service_description(
      servicer.GetRestrictedLocation,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.hoststore_pb2.LocationAtom.SerializeToString,
    ),
    "GetRootStore": alpha_utilities.unary_unary_service_description(
      servicer.GetRootStore,
      zsearch_definitions.rpc_pb2.RootStoreQuery.FromString,
      zsearch_definitions.rpc_pb2.RootStoreReply.SerializeToString,
    ),
    "GetUserMetadata": alpha_utilities.unary_unary_service_description(
      servicer.GetUserMetadata,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.hoststore_pb2.Record.SerializeToString,
    ),
    "GetWHOIS": alpha_utilities.unary_unary_service_description(
      servicer.GetWHOIS,
      zsearch_definitions.rpc_pb2.HostQuery.FromString,
      zsearch_definitions.hoststore_pb2.Record.SerializeToString,
    ),
    "PutHostDomainRecord": alpha_utilities.unary_unary_service_description(
      servicer.PutHostDomainRecord,
      zsearch_definitions.hoststore_pb2.Record.FromString,
      zsearch_definitions.hoststore_pb2.Delta.SerializeToString,
    ),
    "PutHostIPv4Record": alpha_utilities.unary_unary_service_description(
      servicer.PutHostIPv4Record,
      zsearch_definitions.hoststore_pb2.Record.FromString,
      zsearch_definitions.hoststore_pb2.Delta.SerializeToString,
    ),
    "PutUserMetadata": alpha_utilities.unary_unary_service_description(
      servicer.PutUserMetadata,
      zsearch_definitions.hoststore_pb2.Record.FromString,
      zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ),
    "UpsertCertificate": alpha_utilities.unary_unary_service_description(
      servicer.UpsertCertificate,
      zsearch_definitions.anonstore_pb2.AnonymousRecord.FromString,
      zsearch_definitions.anonstore_pb2.AnonymousDelta.SerializeToString,
    ),
    "UpsertCryptographicKey": alpha_utilities.unary_unary_service_description(
      servicer.UpsertCryptographicKey,
      zsearch_definitions.anonstore_pb2.AnonymousRecord.FromString,
      zsearch_definitions.anonstore_pb2.AnonymousDelta.SerializeToString,
    ),
    "UpsertRawCertificate": alpha_utilities.unary_unary_service_description(
      servicer.UpsertRawCertificate,
      zsearch_definitions.anonstore_pb2.AnonymousRecord.FromString,
      zsearch_definitions.anonstore_pb2.AnonymousDelta.SerializeToString,
    ),
  }
  return early_adopter_implementations.server("zsearch.QueryService", method_service_descriptions, port, private_key=private_key, certificate_chain=certificate_chain)
def early_adopter_create_QueryService_stub(host, port, metadata_transformer=None, secure=False, root_certificates=None, private_key=None, certificate_chain=None, server_host_override=None):
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  method_invocation_descriptions = {
    "DelHostDomainRecord": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.hoststore_pb2.Delta.FromString,
    ),
    "DelHostIPv4Record": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.hoststore_pb2.Delta.FromString,
    ),
    "GetAllDomainRecords": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.rpc_pb2.HostQueryResponse.FromString,
    ),
    "GetAllIPv4Records": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.rpc_pb2.HostQueryResponse.FromString,
    ),
    "GetCertificate": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.AnonymousQuery.SerializeToString,
      zsearch_definitions.rpc_pb2.AnonymousQueryResponse.FromString,
    ),
    "GetCryptographicKey": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.AnonymousQuery.SerializeToString,
      zsearch_definitions.rpc_pb2.AnonymousQueryResponse.FromString,
    ),
    "GetHostDomainDelta": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.hoststore_pb2.Delta.FromString,
    ),
    "GetHostDomainRecord": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.rpc_pb2.HostQueryResponse.FromString,
    ),
    "GetHostIPv4Delta": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.hoststore_pb2.Delta.FromString,
    ),
    "GetHostIPv4Record": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.rpc_pb2.HostQueryResponse.FromString,
    ),
    "GetPublicLocation": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.hoststore_pb2.LocationAtom.FromString,
    ),
    "GetRestrictedLocation": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.hoststore_pb2.LocationAtom.FromString,
    ),
    "GetRootStore": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.RootStoreQuery.SerializeToString,
      zsearch_definitions.rpc_pb2.RootStoreReply.FromString,
    ),
    "GetUserMetadata": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.hoststore_pb2.Record.FromString,
    ),
    "GetWHOIS": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
      zsearch_definitions.hoststore_pb2.Record.FromString,
    ),
    "PutHostDomainRecord": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.hoststore_pb2.Record.SerializeToString,
      zsearch_definitions.hoststore_pb2.Delta.FromString,
    ),
    "PutHostIPv4Record": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.hoststore_pb2.Record.SerializeToString,
      zsearch_definitions.hoststore_pb2.Delta.FromString,
    ),
    "PutUserMetadata": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.hoststore_pb2.Record.SerializeToString,
      zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ),
    "UpsertCertificate": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.anonstore_pb2.AnonymousRecord.SerializeToString,
      zsearch_definitions.anonstore_pb2.AnonymousDelta.FromString,
    ),
    "UpsertCryptographicKey": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.anonstore_pb2.AnonymousRecord.SerializeToString,
      zsearch_definitions.anonstore_pb2.AnonymousDelta.FromString,
    ),
    "UpsertRawCertificate": alpha_utilities.unary_unary_invocation_description(
      zsearch_definitions.anonstore_pb2.AnonymousRecord.SerializeToString,
      zsearch_definitions.anonstore_pb2.AnonymousDelta.FromString,
    ),
  }
  return early_adopter_implementations.stub("zsearch.QueryService", method_invocation_descriptions, host, port, metadata_transformer=metadata_transformer, secure=secure, root_certificates=root_certificates, private_key=private_key, certificate_chain=certificate_chain, server_host_override=server_host_override)

class BetaQueryServiceServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def GetHostIPv4Record(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def PutHostIPv4Record(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DelHostIPv4Record(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetAllIPv4Records(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetHostIPv4Delta(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetHostDomainRecord(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def PutHostDomainRecord(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def DelHostDomainRecord(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetAllDomainRecords(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetHostDomainDelta(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetCertificate(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def UpsertCertificate(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def UpsertRawCertificate(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetCryptographicKey(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def UpsertCryptographicKey(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetPublicLocation(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetRestrictedLocation(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetWHOIS(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetUserMetadata(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def PutUserMetadata(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetRootStore(self, request, context):
    raise NotImplementedError()

class BetaQueryServiceStub(object):
  """The interface to which stubs will conform."""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def GetHostIPv4Record(self, request, timeout):
    raise NotImplementedError()
  GetHostIPv4Record.future = None
  @abc.abstractmethod
  def PutHostIPv4Record(self, request, timeout):
    raise NotImplementedError()
  PutHostIPv4Record.future = None
  @abc.abstractmethod
  def DelHostIPv4Record(self, request, timeout):
    raise NotImplementedError()
  DelHostIPv4Record.future = None
  @abc.abstractmethod
  def GetAllIPv4Records(self, request, timeout):
    raise NotImplementedError()
  GetAllIPv4Records.future = None
  @abc.abstractmethod
  def GetHostIPv4Delta(self, request, timeout):
    raise NotImplementedError()
  GetHostIPv4Delta.future = None
  @abc.abstractmethod
  def GetHostDomainRecord(self, request, timeout):
    raise NotImplementedError()
  GetHostDomainRecord.future = None
  @abc.abstractmethod
  def PutHostDomainRecord(self, request, timeout):
    raise NotImplementedError()
  PutHostDomainRecord.future = None
  @abc.abstractmethod
  def DelHostDomainRecord(self, request, timeout):
    raise NotImplementedError()
  DelHostDomainRecord.future = None
  @abc.abstractmethod
  def GetAllDomainRecords(self, request, timeout):
    raise NotImplementedError()
  GetAllDomainRecords.future = None
  @abc.abstractmethod
  def GetHostDomainDelta(self, request, timeout):
    raise NotImplementedError()
  GetHostDomainDelta.future = None
  @abc.abstractmethod
  def GetCertificate(self, request, timeout):
    raise NotImplementedError()
  GetCertificate.future = None
  @abc.abstractmethod
  def UpsertCertificate(self, request, timeout):
    raise NotImplementedError()
  UpsertCertificate.future = None
  @abc.abstractmethod
  def UpsertRawCertificate(self, request, timeout):
    raise NotImplementedError()
  UpsertRawCertificate.future = None
  @abc.abstractmethod
  def GetCryptographicKey(self, request, timeout):
    raise NotImplementedError()
  GetCryptographicKey.future = None
  @abc.abstractmethod
  def UpsertCryptographicKey(self, request, timeout):
    raise NotImplementedError()
  UpsertCryptographicKey.future = None
  @abc.abstractmethod
  def GetPublicLocation(self, request, timeout):
    raise NotImplementedError()
  GetPublicLocation.future = None
  @abc.abstractmethod
  def GetRestrictedLocation(self, request, timeout):
    raise NotImplementedError()
  GetRestrictedLocation.future = None
  @abc.abstractmethod
  def GetWHOIS(self, request, timeout):
    raise NotImplementedError()
  GetWHOIS.future = None
  @abc.abstractmethod
  def GetUserMetadata(self, request, timeout):
    raise NotImplementedError()
  GetUserMetadata.future = None
  @abc.abstractmethod
  def PutUserMetadata(self, request, timeout):
    raise NotImplementedError()
  PutUserMetadata.future = None
  @abc.abstractmethod
  def GetRootStore(self, request, timeout):
    raise NotImplementedError()
  GetRootStore.future = None

def beta_create_QueryService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  request_deserializers = {
    ('zsearch.QueryService', 'DelHostDomainRecord'): zsearch_definitions.rpc_pb2.HostQuery.FromString,
    ('zsearch.QueryService', 'DelHostIPv4Record'): zsearch_definitions.rpc_pb2.HostQuery.FromString,
    ('zsearch.QueryService', 'GetAllDomainRecords'): zsearch_definitions.rpc_pb2.HostQuery.FromString,
    ('zsearch.QueryService', 'GetAllIPv4Records'): zsearch_definitions.rpc_pb2.HostQuery.FromString,
    ('zsearch.QueryService', 'GetCertificate'): zsearch_definitions.rpc_pb2.AnonymousQuery.FromString,
    ('zsearch.QueryService', 'GetCryptographicKey'): zsearch_definitions.rpc_pb2.AnonymousQuery.FromString,
    ('zsearch.QueryService', 'GetHostDomainDelta'): zsearch_definitions.rpc_pb2.HostQuery.FromString,
    ('zsearch.QueryService', 'GetHostDomainRecord'): zsearch_definitions.rpc_pb2.HostQuery.FromString,
    ('zsearch.QueryService', 'GetHostIPv4Delta'): zsearch_definitions.rpc_pb2.HostQuery.FromString,
    ('zsearch.QueryService', 'GetHostIPv4Record'): zsearch_definitions.rpc_pb2.HostQuery.FromString,
    ('zsearch.QueryService', 'GetPublicLocation'): zsearch_definitions.rpc_pb2.HostQuery.FromString,
    ('zsearch.QueryService', 'GetRestrictedLocation'): zsearch_definitions.rpc_pb2.HostQuery.FromString,
    ('zsearch.QueryService', 'GetRootStore'): zsearch_definitions.rpc_pb2.RootStoreQuery.FromString,
    ('zsearch.QueryService', 'GetUserMetadata'): zsearch_definitions.rpc_pb2.HostQuery.FromString,
    ('zsearch.QueryService', 'GetWHOIS'): zsearch_definitions.rpc_pb2.HostQuery.FromString,
    ('zsearch.QueryService', 'PutHostDomainRecord'): zsearch_definitions.hoststore_pb2.Record.FromString,
    ('zsearch.QueryService', 'PutHostIPv4Record'): zsearch_definitions.hoststore_pb2.Record.FromString,
    ('zsearch.QueryService', 'PutUserMetadata'): zsearch_definitions.hoststore_pb2.Record.FromString,
    ('zsearch.QueryService', 'UpsertCertificate'): zsearch_definitions.anonstore_pb2.AnonymousRecord.FromString,
    ('zsearch.QueryService', 'UpsertCryptographicKey'): zsearch_definitions.anonstore_pb2.AnonymousRecord.FromString,
    ('zsearch.QueryService', 'UpsertRawCertificate'): zsearch_definitions.anonstore_pb2.AnonymousRecord.FromString,
  }
  response_serializers = {
    ('zsearch.QueryService', 'DelHostDomainRecord'): zsearch_definitions.hoststore_pb2.Delta.SerializeToString,
    ('zsearch.QueryService', 'DelHostIPv4Record'): zsearch_definitions.hoststore_pb2.Delta.SerializeToString,
    ('zsearch.QueryService', 'GetAllDomainRecords'): zsearch_definitions.rpc_pb2.HostQueryResponse.SerializeToString,
    ('zsearch.QueryService', 'GetAllIPv4Records'): zsearch_definitions.rpc_pb2.HostQueryResponse.SerializeToString,
    ('zsearch.QueryService', 'GetCertificate'): zsearch_definitions.rpc_pb2.AnonymousQueryResponse.SerializeToString,
    ('zsearch.QueryService', 'GetCryptographicKey'): zsearch_definitions.rpc_pb2.AnonymousQueryResponse.SerializeToString,
    ('zsearch.QueryService', 'GetHostDomainDelta'): zsearch_definitions.hoststore_pb2.Delta.SerializeToString,
    ('zsearch.QueryService', 'GetHostDomainRecord'): zsearch_definitions.rpc_pb2.HostQueryResponse.SerializeToString,
    ('zsearch.QueryService', 'GetHostIPv4Delta'): zsearch_definitions.hoststore_pb2.Delta.SerializeToString,
    ('zsearch.QueryService', 'GetHostIPv4Record'): zsearch_definitions.rpc_pb2.HostQueryResponse.SerializeToString,
    ('zsearch.QueryService', 'GetPublicLocation'): zsearch_definitions.hoststore_pb2.LocationAtom.SerializeToString,
    ('zsearch.QueryService', 'GetRestrictedLocation'): zsearch_definitions.hoststore_pb2.LocationAtom.SerializeToString,
    ('zsearch.QueryService', 'GetRootStore'): zsearch_definitions.rpc_pb2.RootStoreReply.SerializeToString,
    ('zsearch.QueryService', 'GetUserMetadata'): zsearch_definitions.hoststore_pb2.Record.SerializeToString,
    ('zsearch.QueryService', 'GetWHOIS'): zsearch_definitions.hoststore_pb2.Record.SerializeToString,
    ('zsearch.QueryService', 'PutHostDomainRecord'): zsearch_definitions.hoststore_pb2.Delta.SerializeToString,
    ('zsearch.QueryService', 'PutHostIPv4Record'): zsearch_definitions.hoststore_pb2.Delta.SerializeToString,
    ('zsearch.QueryService', 'PutUserMetadata'): zsearch_definitions.rpc_pb2.CommandReply.SerializeToString,
    ('zsearch.QueryService', 'UpsertCertificate'): zsearch_definitions.anonstore_pb2.AnonymousDelta.SerializeToString,
    ('zsearch.QueryService', 'UpsertCryptographicKey'): zsearch_definitions.anonstore_pb2.AnonymousDelta.SerializeToString,
    ('zsearch.QueryService', 'UpsertRawCertificate'): zsearch_definitions.anonstore_pb2.AnonymousDelta.SerializeToString,
  }
  method_implementations = {
    ('zsearch.QueryService', 'DelHostDomainRecord'): face_utilities.unary_unary_inline(servicer.DelHostDomainRecord),
    ('zsearch.QueryService', 'DelHostIPv4Record'): face_utilities.unary_unary_inline(servicer.DelHostIPv4Record),
    ('zsearch.QueryService', 'GetAllDomainRecords'): face_utilities.unary_unary_inline(servicer.GetAllDomainRecords),
    ('zsearch.QueryService', 'GetAllIPv4Records'): face_utilities.unary_unary_inline(servicer.GetAllIPv4Records),
    ('zsearch.QueryService', 'GetCertificate'): face_utilities.unary_unary_inline(servicer.GetCertificate),
    ('zsearch.QueryService', 'GetCryptographicKey'): face_utilities.unary_unary_inline(servicer.GetCryptographicKey),
    ('zsearch.QueryService', 'GetHostDomainDelta'): face_utilities.unary_unary_inline(servicer.GetHostDomainDelta),
    ('zsearch.QueryService', 'GetHostDomainRecord'): face_utilities.unary_unary_inline(servicer.GetHostDomainRecord),
    ('zsearch.QueryService', 'GetHostIPv4Delta'): face_utilities.unary_unary_inline(servicer.GetHostIPv4Delta),
    ('zsearch.QueryService', 'GetHostIPv4Record'): face_utilities.unary_unary_inline(servicer.GetHostIPv4Record),
    ('zsearch.QueryService', 'GetPublicLocation'): face_utilities.unary_unary_inline(servicer.GetPublicLocation),
    ('zsearch.QueryService', 'GetRestrictedLocation'): face_utilities.unary_unary_inline(servicer.GetRestrictedLocation),
    ('zsearch.QueryService', 'GetRootStore'): face_utilities.unary_unary_inline(servicer.GetRootStore),
    ('zsearch.QueryService', 'GetUserMetadata'): face_utilities.unary_unary_inline(servicer.GetUserMetadata),
    ('zsearch.QueryService', 'GetWHOIS'): face_utilities.unary_unary_inline(servicer.GetWHOIS),
    ('zsearch.QueryService', 'PutHostDomainRecord'): face_utilities.unary_unary_inline(servicer.PutHostDomainRecord),
    ('zsearch.QueryService', 'PutHostIPv4Record'): face_utilities.unary_unary_inline(servicer.PutHostIPv4Record),
    ('zsearch.QueryService', 'PutUserMetadata'): face_utilities.unary_unary_inline(servicer.PutUserMetadata),
    ('zsearch.QueryService', 'UpsertCertificate'): face_utilities.unary_unary_inline(servicer.UpsertCertificate),
    ('zsearch.QueryService', 'UpsertCryptographicKey'): face_utilities.unary_unary_inline(servicer.UpsertCryptographicKey),
    ('zsearch.QueryService', 'UpsertRawCertificate'): face_utilities.unary_unary_inline(servicer.UpsertRawCertificate),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_QueryService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.anonstore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.hoststore_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  import zsearch_definitions.rpc_pb2
  request_serializers = {
    ('zsearch.QueryService', 'DelHostDomainRecord'): zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
    ('zsearch.QueryService', 'DelHostIPv4Record'): zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
    ('zsearch.QueryService', 'GetAllDomainRecords'): zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
    ('zsearch.QueryService', 'GetAllIPv4Records'): zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
    ('zsearch.QueryService', 'GetCertificate'): zsearch_definitions.rpc_pb2.AnonymousQuery.SerializeToString,
    ('zsearch.QueryService', 'GetCryptographicKey'): zsearch_definitions.rpc_pb2.AnonymousQuery.SerializeToString,
    ('zsearch.QueryService', 'GetHostDomainDelta'): zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
    ('zsearch.QueryService', 'GetHostDomainRecord'): zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
    ('zsearch.QueryService', 'GetHostIPv4Delta'): zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
    ('zsearch.QueryService', 'GetHostIPv4Record'): zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
    ('zsearch.QueryService', 'GetPublicLocation'): zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
    ('zsearch.QueryService', 'GetRestrictedLocation'): zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
    ('zsearch.QueryService', 'GetRootStore'): zsearch_definitions.rpc_pb2.RootStoreQuery.SerializeToString,
    ('zsearch.QueryService', 'GetUserMetadata'): zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
    ('zsearch.QueryService', 'GetWHOIS'): zsearch_definitions.rpc_pb2.HostQuery.SerializeToString,
    ('zsearch.QueryService', 'PutHostDomainRecord'): zsearch_definitions.hoststore_pb2.Record.SerializeToString,
    ('zsearch.QueryService', 'PutHostIPv4Record'): zsearch_definitions.hoststore_pb2.Record.SerializeToString,
    ('zsearch.QueryService', 'PutUserMetadata'): zsearch_definitions.hoststore_pb2.Record.SerializeToString,
    ('zsearch.QueryService', 'UpsertCertificate'): zsearch_definitions.anonstore_pb2.AnonymousRecord.SerializeToString,
    ('zsearch.QueryService', 'UpsertCryptographicKey'): zsearch_definitions.anonstore_pb2.AnonymousRecord.SerializeToString,
    ('zsearch.QueryService', 'UpsertRawCertificate'): zsearch_definitions.anonstore_pb2.AnonymousRecord.SerializeToString,
  }
  response_deserializers = {
    ('zsearch.QueryService', 'DelHostDomainRecord'): zsearch_definitions.hoststore_pb2.Delta.FromString,
    ('zsearch.QueryService', 'DelHostIPv4Record'): zsearch_definitions.hoststore_pb2.Delta.FromString,
    ('zsearch.QueryService', 'GetAllDomainRecords'): zsearch_definitions.rpc_pb2.HostQueryResponse.FromString,
    ('zsearch.QueryService', 'GetAllIPv4Records'): zsearch_definitions.rpc_pb2.HostQueryResponse.FromString,
    ('zsearch.QueryService', 'GetCertificate'): zsearch_definitions.rpc_pb2.AnonymousQueryResponse.FromString,
    ('zsearch.QueryService', 'GetCryptographicKey'): zsearch_definitions.rpc_pb2.AnonymousQueryResponse.FromString,
    ('zsearch.QueryService', 'GetHostDomainDelta'): zsearch_definitions.hoststore_pb2.Delta.FromString,
    ('zsearch.QueryService', 'GetHostDomainRecord'): zsearch_definitions.rpc_pb2.HostQueryResponse.FromString,
    ('zsearch.QueryService', 'GetHostIPv4Delta'): zsearch_definitions.hoststore_pb2.Delta.FromString,
    ('zsearch.QueryService', 'GetHostIPv4Record'): zsearch_definitions.rpc_pb2.HostQueryResponse.FromString,
    ('zsearch.QueryService', 'GetPublicLocation'): zsearch_definitions.hoststore_pb2.LocationAtom.FromString,
    ('zsearch.QueryService', 'GetRestrictedLocation'): zsearch_definitions.hoststore_pb2.LocationAtom.FromString,
    ('zsearch.QueryService', 'GetRootStore'): zsearch_definitions.rpc_pb2.RootStoreReply.FromString,
    ('zsearch.QueryService', 'GetUserMetadata'): zsearch_definitions.hoststore_pb2.Record.FromString,
    ('zsearch.QueryService', 'GetWHOIS'): zsearch_definitions.hoststore_pb2.Record.FromString,
    ('zsearch.QueryService', 'PutHostDomainRecord'): zsearch_definitions.hoststore_pb2.Delta.FromString,
    ('zsearch.QueryService', 'PutHostIPv4Record'): zsearch_definitions.hoststore_pb2.Delta.FromString,
    ('zsearch.QueryService', 'PutUserMetadata'): zsearch_definitions.rpc_pb2.CommandReply.FromString,
    ('zsearch.QueryService', 'UpsertCertificate'): zsearch_definitions.anonstore_pb2.AnonymousDelta.FromString,
    ('zsearch.QueryService', 'UpsertCryptographicKey'): zsearch_definitions.anonstore_pb2.AnonymousDelta.FromString,
    ('zsearch.QueryService', 'UpsertRawCertificate'): zsearch_definitions.anonstore_pb2.AnonymousDelta.FromString,
  }
  cardinalities = {
    'DelHostDomainRecord': cardinality.Cardinality.UNARY_UNARY,
    'DelHostIPv4Record': cardinality.Cardinality.UNARY_UNARY,
    'GetAllDomainRecords': cardinality.Cardinality.UNARY_UNARY,
    'GetAllIPv4Records': cardinality.Cardinality.UNARY_UNARY,
    'GetCertificate': cardinality.Cardinality.UNARY_UNARY,
    'GetCryptographicKey': cardinality.Cardinality.UNARY_UNARY,
    'GetHostDomainDelta': cardinality.Cardinality.UNARY_UNARY,
    'GetHostDomainRecord': cardinality.Cardinality.UNARY_UNARY,
    'GetHostIPv4Delta': cardinality.Cardinality.UNARY_UNARY,
    'GetHostIPv4Record': cardinality.Cardinality.UNARY_UNARY,
    'GetPublicLocation': cardinality.Cardinality.UNARY_UNARY,
    'GetRestrictedLocation': cardinality.Cardinality.UNARY_UNARY,
    'GetRootStore': cardinality.Cardinality.UNARY_UNARY,
    'GetUserMetadata': cardinality.Cardinality.UNARY_UNARY,
    'GetWHOIS': cardinality.Cardinality.UNARY_UNARY,
    'PutHostDomainRecord': cardinality.Cardinality.UNARY_UNARY,
    'PutHostIPv4Record': cardinality.Cardinality.UNARY_UNARY,
    'PutUserMetadata': cardinality.Cardinality.UNARY_UNARY,
    'UpsertCertificate': cardinality.Cardinality.UNARY_UNARY,
    'UpsertCryptographicKey': cardinality.Cardinality.UNARY_UNARY,
    'UpsertRawCertificate': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'zsearch.QueryService', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
