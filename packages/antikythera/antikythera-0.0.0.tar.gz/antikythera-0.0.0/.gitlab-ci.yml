stages:
    - test
    - pages
    - staging
    - deploy


variables:
    CONTAINER_TEST_IMAGE: registry.gitlab.com/finding-ray/antikythera:$CI_BUILD_REF_NAME
    CONTAINER_RELEASE_IMAGE: registry.gitlab.com/finding-ray/antikythera:latest


########
# Test #
########

test_x86:
    image: python
    stage: test
    script:
        - apt-get --yes update && apt-get --yes install lsb-release
        - bash setup.sh
        - pip install -r test-requirements.txt
        - python setup.py test
    tags:
        - docker
        - x86


test_armv7l:
    stage: test
    script:
        - bash setup.sh
        - pip3 install -r test-requirements.txt
        - python3 setup.py test
    tags:
        - arm
    only:
        - runners
    allow_failure: true


# Raspberry Pi Test
#
# registry.gitlab.com/finding-ray/rpi2-gnuradio:latest
# is an image base on the resin/raspberrypi2-python
# image with all project dependencies baked into it,
# this image is build in staging and deployed in the
# deploy stage.
#
# This is required to have Raspberry Pi tests complete
# in less than two hours, and creates a feedback loop
# where new dependencies must only be installed once
# before being baked in.
#
test_rpi:
    image: registry.gitlab.com/finding-ray/antikythera:latest
    stage: test
    script:
        - apt-get --yes update && apt-get --yes install lsb-release
        - bash setup.sh
        - pip3 install -r test-requirements.txt
        - python3 setup.py test
    tags:
        - rpi
        - docker


# Test Ubuntu
test_ubuntu:
    image: ubuntu
    stage: test
    script:
        - apt-get --yes update && apt-get --yes install python3 python3-venv lsb-release
        - mkdir -p ~/.virtualenv
        - python3 -m venv ~/.virtualenv/antikythera
        - source ~/.virtualenv/antikythera/bin/activate
        - bash setup.sh
        - pip install -r test-requirements.txt
        - python setup.py test
        - python setup.py docs
        - python setup.py install
    tags:
        - docker
        - x86


#####################
# Build Sphinx Docs #
#####################

pages:
    image: python
    stage: pages
    script:
        - apt-get --yes update && apt-get --yes install lsb-release
        - bash setup.sh
        - pip install -r test-requirements.txt
        - python setup.py test
        - python setup.py docs
        - mv htmlcov public/
        - mv docs/_build/html/* public/
    tags:
        - docker
        - x86
    artifacts:
        paths:
        - public
    only:
        - master


###########
# Staging #
###########

package:
    image: python
    stage: staging
    script:
        - apt-get --yes update && apt-get --yes install lsb-release
        - bash setup.sh
        - python setup.py sdist bdist_wheel
    artifacts:
        name: "${CI_PROJECT_NAME}_${CI_PIPELINE_ID}"
        paths:
            - dist/
    tags:
        - docker
        - x86
    only:
        - master


build_env:
    stage: staging
    image: janeczku/docker-armhf:latest
    script:
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN -e email@domain.net registry.gitlab.com
        - docker build -t $CONTAINER_TEST_IMAGE .
        - docker push $CONTAINER_TEST_IMAGE
    tags:
        - docker
        - rpi
        - dind
    only:
        - master    


##########
# Deploy #
##########

release_env:
    stage: deploy
    image: janeczku/docker-armhf:latest
    script:
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN -e email@domain.net registry.gitlab.com
        - docker pull $CONTAINER_TEST_IMAGE
        - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
        - docker push $CONTAINER_RELEASE_IMAGE
    tags:
        - docker
        - rpi
        - dind
    only:
        - master    
