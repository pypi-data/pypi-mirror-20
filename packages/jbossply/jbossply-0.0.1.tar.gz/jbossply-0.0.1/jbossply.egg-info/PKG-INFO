Metadata-Version: 1.1
Name: jbossply
Version: 0.0.1
Summary: JBoss CLI output parser
Home-page: https://github.com/EnigmaBridge/jbossply
Author: Dusan Klinec (ph4r05)
Author-email: ph4r05@gmail.com
License: MIT License

Copyright (c) 2016 Enigma bridge

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Description: JBoss CLI output parser
        =======================
        
        This simple python library is a JBoss output lexer & parser based on `PLY <http://www.dabeaz.com/ply/>`__
        (yet another implementation of lex and yacc for Python).
        
        JBoss CLI server has output that closely resembles JSON, but it is not 100% JSON so it is difficult
        to parse it with ordinary tools. With this library you can process JBoss output and parse it as JSON.
        
        Example
        
        .. code:: python
        
            import jbossparser
            test3 = """{
                "outcome" => "success",
                "result" => {
                    "rule-1" => {
                        "flags" => "L,QSA,R",
                        "pattern" => "^/$",
                        "substitution" => "/ejbca",
                        "condition" => undefined
                    },
                    "rule-3" => {
                        "flags" => "L,QSA,R",
                        "pattern" => "^/pki/?$",
                        "substitution" => "/ejbca/adminweb",
                        "condition" => undefined
                    }
                }
            }
            """
        
            parser = jbossparser.JbossParser()
            print(parser.parse(test3))
        
        Which gives output
        
        ::
        
            {u'outcome': u'success', u'result': {u'rule-3': {u'pattern': u'^/pki/?$', u'flags': u'L,QSA,R', u'condition': None, u'substitution': u'/ejbca/adminweb'}, u'rule-1': {u'pattern': u'^/$', u'flags': u'L,QSA,R', u'condition': None, u'substitution': u'/ejbca'}}}
        
        
        You may want to cache parser tables, then create `JbossParser` like this:
        
        .. code:: python
        
            parser = jbossparser.JbossParser(write_tables=True, outputdir='/tmp/table-dir')
        
        
        Command line usage
        ------------------
        
        After installed with pip you may use also the command line helper `jboss2json`.
        
        ::
        
            $ cat jboss-output.txt | jboss2json
            {"outcome": "success", "result": {"rule-3": {"pattern": "^/pki/?$", "flags": "L,QSA,R", "condition": null, "substitution": "/ejbca/adminweb"}, "rule-1": {"pattern": "^/$", "flags": "L,QSA,R", "condition": null, "substitution": "/ejbca"}}}
        
        
        Installation
        ------------
        
        You can install this package using pip:
        
        ::
        
            pip install jbossply
        
        
        
        Credits
        -------
        
        The code is based on @vsajip repository `json-ply <https://github.com/vsajip/json-ply>`__
        
        
        
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
