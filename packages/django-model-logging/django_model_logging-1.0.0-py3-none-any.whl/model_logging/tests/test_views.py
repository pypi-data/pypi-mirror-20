import simplejson
from incuna_test_utils.testcases.api_request import BaseAPIRequestTestCase

from model_logging import models, views
from .factories import UserFactory

FAKE_DATA = {'item': 42}


class FakeSerializer:
    """A stub class for mocking data generated by serializers for logging."""
    data = FAKE_DATA
    validated_data = FAKE_DATA
    instance = FAKE_DATA  # Can be anything - the contents will not be used.

    def __init__(self, **kwargs):
        """Ignore any kwargs passed in - we're always presenting dummy data."""


class FakeViewSet(views.LoggingMethodMixin):
    """A basic subclass of LoggingMethodMixin with minimal required attributes."""
    model = FakeSerializer  # Any class will do here.
    serializer_class = FakeSerializer

    def __init__(self, request, patient):
        self.request = request
        self.patient = patient

    def _get_logging_user(self):
        return self.patient


class TestLoggingMethodMixin(BaseAPIRequestTestCase):
    user_factory = UserFactory

    @classmethod
    def setUpTestData(cls):
        cls.user = cls.user_factory.create()

    def setUp(self):
        self.request = self.create_request(user=self.user)
        self.viewset_object = FakeViewSet(self.request, self.user)

    def get_expected_entry_data(self):
        return {
            'data': FAKE_DATA,
            'user': self.user,
            'creator': self.user,
            'model_path': 'model_logging.tests.test_views.FakeSerializer',
        }

    def test_log_on_create(self):
        serializer = FakeSerializer()
        self.viewset_object._log_on_create(serializer)

        entry = models.LogEntry.objects.get()
        expected_entry = self.get_expected_entry_data()
        self.assertEqual(entry.operation, models.LogEntry.OPERATION_ADDED)
        self.assertEqual(simplejson.loads(entry.data), expected_entry['data'])
        self.assertEqual(entry.user, expected_entry['user'])
        self.assertEqual(entry.creator, expected_entry['creator'])
        self.assertEqual(entry.model_path, expected_entry['model_path'])

    def test_log_on_update(self):
        serializer = FakeSerializer()
        self.viewset_object._log_on_update(serializer)

        entry = models.LogEntry.objects.get()
        expected_entry = self.get_expected_entry_data()
        self.assertEqual(entry.operation, models.LogEntry.OPERATION_MODIFIED)
        self.assertEqual(simplejson.loads(entry.data), expected_entry['data'])
        self.assertEqual(entry.user, expected_entry['user'])
        self.assertEqual(entry.creator, expected_entry['creator'])
        self.assertEqual(entry.model_path, expected_entry['model_path'])

    def test_log_on_destroy(self):
        instance = FAKE_DATA
        self.viewset_object._log_on_destroy(instance)

        entry = models.LogEntry.objects.get()
        expected_entry = self.get_expected_entry_data()
        self.assertEqual(entry.operation, models.LogEntry.OPERATION_REMOVED)
        self.assertEqual(simplejson.loads(entry.data), expected_entry['data'])
        self.assertEqual(entry.user, expected_entry['user'])
        self.assertEqual(entry.creator, expected_entry['creator'])
        self.assertEqual(entry.model_path, expected_entry['model_path'])


class TestLoggingViewSetMixin(BaseAPIRequestTestCase):
    user_factory = UserFactory

    @classmethod
    def setUpTestData(cls):
        cls.user = cls.user_factory.create()

    def setUp(self):
        self.request = self.create_request(user=self.user)
        self.viewset_object = FakeViewSet(self.request, self.user)

    def get_expected_entry_data(self):
        return {
            'data': FAKE_DATA,
            'user': self.user,
            'creator': self.user,
            'model_path': 'model_logging.tests.test_views.FakeSerializer',
        }

    def test_log_on_create(self):
        serializer = FakeSerializer()
        self.viewset_object._log_on_create(serializer)

        entry = models.LogEntry.objects.get()
        expected_entry = self.get_expected_entry_data()
        self.assertEqual(entry.operation, models.LogEntry.OPERATION_ADDED)
        self.assertEqual(simplejson.loads(entry.data), expected_entry['data'])
        self.assertEqual(entry.user, expected_entry['user'])
        self.assertEqual(entry.creator, expected_entry['creator'])
        self.assertEqual(entry.model_path, expected_entry['model_path'])

    def test_log_on_update(self):
        serializer = FakeSerializer()
        self.viewset_object._log_on_update(serializer)

        entry = models.LogEntry.objects.get()
        expected_entry = self.get_expected_entry_data()
        self.assertEqual(entry.operation, models.LogEntry.OPERATION_MODIFIED)
        self.assertEqual(simplejson.loads(entry.data), expected_entry['data'])
        self.assertEqual(entry.user, expected_entry['user'])
        self.assertEqual(entry.creator, expected_entry['creator'])
        self.assertEqual(entry.model_path, expected_entry['model_path'])

    def test_log_on_destroy(self):
        instance = FAKE_DATA
        self.viewset_object._log_on_destroy(instance)

        entry = models.LogEntry.objects.get()
        expected_entry = self.get_expected_entry_data()
        self.assertEqual(entry.operation, models.LogEntry.OPERATION_REMOVED)
        self.assertEqual(simplejson.loads(entry.data), expected_entry['data'])
        self.assertEqual(entry.user, expected_entry['user'])
        self.assertEqual(entry.creator, expected_entry['creator'])
        self.assertEqual(entry.model_path, expected_entry['model_path'])
