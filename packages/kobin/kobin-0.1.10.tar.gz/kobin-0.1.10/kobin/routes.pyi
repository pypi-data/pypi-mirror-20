from typing import Callable, Dict, List, Tuple, Union, Any

from .responses import BaseResponse

ViewFunction = Callable[..., BaseResponse]
DEFAULT_ARG_TYPE = ... # type: type

def redirect(url: str) -> BaseResponse: ...
def split_by_slash(path: str) -> List[str]: ...

class Route:
    rule: str
    method: str
    name: str
    callback: ViewFunction
    def __init__(self, rule: str, method: str, name: str, callback: ViewFunction) -> None: ...
    @property
    def callback_types(self) -> Dict[str, Any]: ...
    def get_typed_url_vars(self, url_vars: Dict[str, str]) -> Dict[str, Any]: ...
    def _match_method(self, method: str) -> bool: ...
    def _match_path(self, path: str) -> Union[None, Dict[str, Any]]: ...
    def match(self, method: str, path: str) -> Dict[str, Any]: ...

class Router:
    routes: List[Route]
    def __init__(self) -> None: ...
    def match(self, environ: Dict[str, str]) -> Tuple[ViewFunction, Dict[str, Any]]: ...
    def add(self, method: str, rule: str, name: str, callback: ViewFunction) -> None: ...
    def reverse(self, name: str, **kwargs: Any) -> str: ...
