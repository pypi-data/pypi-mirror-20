from jinja2 import Environment  # type: ignore
from logging import Logger, Handler
from typing import Callable, Dict, List, Tuple, Iterable, TypeVar, Any, Union
from types import ModuleType

from .routes import Router
from .responses import BaseResponse, Response


WSGIEnvironValue = TypeVar('WSGIEnvironValue')
WSGIEnviron = Dict[str, WSGIEnvironValue]
StartResponse = Callable[[bytes, List[Tuple[str, str]]], None]

ViewFunction = Callable[..., BaseResponse]
WSGIResponse = Iterable[bytes]


class Kobin:
    router: Router
    config: Dict[str, Any]
    logger: Logger
    before_request_callbacks: List[Callable[[], None]]
    after_request_callbacks: List[Callable[[BaseResponse], Union[None, BaseResponse]]]
    _frozen: bool

    def __init__(self, config: Dict[str, Any] = ...) -> None: ...
    def route(self, rule: str = ..., method: str = ..., name: str = ...,
              callback: ViewFunction = ...) -> ViewFunction: ...
    def before_request(self, callback: Callable[[], None]) -> Callable[[], None]: ...
    def after_request(self, callback: Callable[[BaseResponse], BaseResponse]) -> \
            Callable[[BaseResponse], BaseResponse]: ...
    def _handle(self, environ: WSGIEnviron) -> BaseResponse: ...
    def wsgi(self, environ: WSGIEnviron, start_response: StartResponse) -> WSGIResponse: ...
    def __call__(self, environ: WSGIEnviron, start_response: StartResponse) -> WSGIResponse: ...

def _get_exception_message(e: BaseException, debug: bool) -> str: ...

def _current_app() -> Kobin: ...
def load_jinja2_env(template_dirs: List[str],
                    global_variables: Dict[str, Any] = ...,
                    global_filters: Dict[str, Any] = ...,
                    **envoptions: Any) -> Environment: ...
def _get_logger(debug: bool) -> Logger: ...
def load_config(config: Dict[str, Any] = ...) -> Dict[str, Any]: ...
def load_config_from_pyfile(filepath: str) -> Dict[str, Any]: ...
def load_config_from_module(module: ModuleType) -> Dict[str, Any]: ...
def current_app() -> Kobin: ...
def current_config(key: str) -> Any: ...
