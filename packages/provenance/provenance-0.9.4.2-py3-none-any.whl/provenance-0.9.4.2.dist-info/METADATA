Metadata-Version: 2.0
Name: provenance
Version: 0.9.4.2
Summary: Provenance and caching library for functions
Home-page: http://github.com/Savvysherpa/provenance
Author: Ben Mabey
Author-email: ben@benmabey.com
License: MIT
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Requires-Dist: alembic (>=0.9.1)
Requires-Dist: boltons (>=16.5.1)
Requires-Dist: cloudpickle (>=0.2.1)
Requires-Dist: joblib (>=0.10.2)
Requires-Dist: memoized-property (>=1.0.2)
Requires-Dist: numpy
Requires-Dist: ordered-set (>=2.0.1)
Requires-Dist: psutil (>=5.0.0)
Requires-Dist: psycopg2
Requires-Dist: s3fs (>=0.0.8)
Requires-Dist: sqlalchemy (>=1.1.3)
Requires-Dist: sqlalchemy-utils (>=0.32.12)
Requires-Dist: toolz (>=0.8.2)
Requires-Dist: wrapt (>=1.10.8)
Provides-Extra: sftp
Requires-Dist: paramiko; extra == 'sftp'

==========
provenance
==========

.. image:: https://travis-ci.org/bmabey/provenance.svg?branch=master
    :target: https://travis-ci.org/bmabey/provenance

provenance is a Python library for function-level provenance. By decorating
functions you are able to cache the results, i.e. artifacts, to memory, disk, or S3.
The artifact stores can be layered, e.g. you can write to a local disk store and
and a global team S3 one. Every artifact also keeps metadata associated with it
on how it was created (i.e. the function and arguments used) so you can always
answer the question "Where did this come from?".  The most featureful metadata store
is backed by Postgres and is recommended for any serious use. The library is general
purpose but was built for machine learning pipelines and plays nicely with numpy and
other pydata libraries. You can basically think of this as joblib's memoize but on
steroids.



Status
=======

The library was extracted from a production system and has been used help
collaboration on a number of other projects (e.g. sharing models and features
easily over s3). The API should be pretty stable but as of now the only documentation
are the tests. We will be adding proper documentation and logging soon.


Example
=======

TODO

.. code:: python

    >>> import provenance as p

Installation
============


.. code:: bash

    conda install -c conda-forge provenance

    or

    pip install provenance

Development
===========

Assuming you have conda installed, the following commands can be used to create a development environment.

Initial environment creation

.. code:: bash

    conda env create
    source activate provenance-dev
    pip install -r requirements.txt
    pip install -r test_requirements.txt

Reactivating the environment after it has been created

.. code:: bash

    source activate provenance-dev


