#-*-coding: utf-8 -*-
"""
Django settings for SMIT project.

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import sys, datetime
import shutil
import djcelery
from distutils import dir_util
from configobj import ConfigObj
djcelery.setup_loader()
from kombu import Queue, Exchange


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

#set config that will be used by applications
SMIT_CONFIG = ConfigObj("smit.ini")
if SMIT_CONFIG =={}:
    print "ATTENTION: smit.ini file is not valid"

#applications folder contains all new applications
APPLICATIONS = os.path.join(BASE_DIR, "applications")
sys.path.insert(0, APPLICATIONS)
#this variable contains a list of directories in applications folder
NEW_APPLICATIONS = tuple([folderName for folderName in os.listdir(APPLICATIONS) if folderName != ".svn"])
#this variable contains tuple of the new applications template targets
NEW_APPLICATIONS_TEMPLATES = tuple([os.path.join(BASE_DIR, folderName, 'templates') for folderName in NEW_APPLICATIONS])

#add workers to media/workers/ ==> this is important in order to make tasks downoadable by workers
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = ''
workers_dir = os.path.join(MEDIA_ROOT, "workers")
linux_tasks_list = []
windows_tasks_list = []

#callback for walk to copy worker tasks for each application to the folder shown via the web ...(for an eventual download by workers)
def processDirectory (args, dirname, filenames):
    if (("LinuxWorker" in dirname) or ("WindowsWorker" in dirname)) and (".svn" not in dirname):
        for filename in filenames:
            if ".svn" not in filename:
                shutil.copy(os.path.join(dirname, filename), os.path.join(workers_dir, dirname.split('/')[-1], filename))
                if ("LinuxWorker" in dirname):
                    linux_tasks_list.append(filename)
                else:
                    windows_tasks_list.append(filename)

for application in NEW_APPLICATIONS:
    app_target = os.path.join(BASE_DIR, "applications", application)
    os.path.walk(app_target, processDirectory, None)

tasks_list_file_windows = open (os.path.join(workers_dir, "WindowsWorker", "tasks_list.py"), 'wb+')
tasks_list_file_linux = open (os.path.join(workers_dir, "LinuxWorker", "tasks_list.py"), 'wb+')
tasks_list_file_linux.write("tasks_list="+str(linux_tasks_list))
tasks_list_file_linux.close()
tasks_list_file_windows.write("tasks_list="+str(windows_tasks_list))
tasks_list_file_windows.close()



## Celery config ##


##CELERY STUFF
BROKER_URL = "amqp://guest:guest@localhost:5672//"
#CELERY_ACCEPT_CONTENT = ['application/json']
#CELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'
#CELERY_IGNORE_RESULT = False
#CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIME_ZONE ='Europe/Paris'
CELERYD_LOG_FILE = "/var/log/smit.log"
##CELERY_ROUTES = ('SMIT.router.MyRouter',)
#CELERY_QUEUES = (
 # Queue('celery', Exchange('celery'), routing_key='tasks.add'),
  #Queue('celery1', Exchange('celery'), routing_key='tasks.multiply'),
#)
##CELERY_DEFAULT_QUEUE = 'celery'
#CELERY_DEFAULT_EXCHANGE = 'celery'
#CELERY_DEFAULT_ROUTING_KEY = 'celery'
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '^*_dlq#%cz5li#+!+kf+h(36+^tlw&2c=$*$=2crn3$!exx^+8'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True 

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'djcelery',
    'app',
    'main',
    'bootstrap3',
    'bootstrapform', 
    'django_forms_bootstrap'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'SMIT.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['main','templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'SMIT.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'SMIT',
	'USER':'root',
	'PASSWORD':'null',
	'HOST':'',
	'PORT':'',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/media/'
