---
resources:
    ################################################################## S3KEYRING
    {% if has_s3keyring %}
    S3KeyringBucket:
      Type: AWS::S3::Bucket
      Properties: {}

    S3KeyringKey: 
      Type: "AWS::KMS::Key"
      Properties: 
        Description: "Gives access to this VPC S3keyring"
        KeyPolicy: 
          Version: "2012-10-17"
          Id: "key-default-1"
          Statement: 
            {% for user in s3keyring.admins %}
            - 
              Sid: "Allow administration of the key"
              Effect: "Allow"
              Principal: 
                AWS: 
                    "Fn::Join":
                        - ""
                        - ["arn:aws:iam::", {"Ref": "AWS::AccountId"}, ":user/{{user}}"]
              Action: 
                - "kms:Create*"
                - "kms:Describe*"
                - "kms:Enable*"
                - "kms:List*"
                - "kms:Put*"
                - "kms:Update*"
                - "kms:Revoke*"
                - "kms:Disable*"
                - "kms:Get*"
                - "kms:Delete*"
                - "kms:ScheduleKeyDeletion"
                - "kms:CancelKeyDeletion"
              Resource: "*"
            {% endfor %}
            {% for user in s3keyring.users %}
            - 
              Sid: "Allow IAM users to access the S3Keyring KMS key"
              Effect: "Allow"
              Principal: 
                AWS: 
                    "Fn::Join":
                        - ""
                        - ["arn:aws:iam::", {"Ref": "AWS::AccountId"}, ":user/{{user}}"]
              Action: 
                - "kms:Encrypt"
                - "kms:Decrypt"
                - "kms:ReEncrypt*"
                - "kms:GenerateDataKey*"
                - "kms:DescribeKey"
              Resource: "*"
            {% endfor %}
            - 
              Sid: "Allow S3KeyringRole to access the S3Keyring KMS key"
              Effect: "Allow"
              Principal: 
                AWS: 
                    "Fn::Join":
                        - ""
                        - ["arn:aws:iam::", {"Ref": "AWS::AccountId"}, ":role/", {"Ref": S3KeyringRole}]
              Action: 
                - "kms:Encrypt"
                - "kms:Decrypt"
                - "kms:ReEncrypt*"
                - "kms:GenerateDataKey*"
                - "kms:DescribeKey"
              Resource: "*"

    S3KeyringRole:
        Type: "AWS::IAM::Role"
        Properties: 
            AssumeRolePolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Effect: "Allow"
                    Principal: 
                      Service: 
                        - "ec2.amazonaws.com"
                    Action: 
                      - "sts:AssumeRole"
            Policies:
                - PolicyName: S3Keyring 
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action:
                            - "s3:ListBucket"
                          Resource: 
                            "Fn::Join":
                                - ""
                                - ["arn:aws:s3:::", {Ref: S3KeyringBucket}]
                          Condition: {}
                        - Effect: Allow
                          Action:
                            - "s3:DeleteObject"
                            - "s3:GetObject"
                            - "s3:PutObject"
                          Resource:
                            "Fn::Join":
                                - ""
                                - ["arn:aws:s3:::", {Ref: S3KeyringBucket}, "/*"]
            Path: "/"
            RoleName: "{{_env.name}}-{{_layer.name}}-{{_env.stage}}-s3keyring"

    {% endif %}

    ############################################################## VPC & SUBNETS
    Vpc:
      Type: "AWS::EC2::VPC"
      Properties:
        CidrBlock: "{{vpc.cidr}}"
        EnableDnsHostnames: {{enable_dns_hostnames}}
        Tags:
            - Key: Name
              Value: {{vpc.name}}
    {% for subnet in public_subnets %}
    PublicSubnet{{loop.index}}:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: Vpc
        CidrBlock: "{{subnet.cidr}}"
        Tags:
            - Key: Name
              Value: {{subnet.name or (_env.name + '-' + _env.stage + '-public')}}
    PublicSubnet{{loop.index}}RouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: PublicSubnet{{loop.index}}
        RouteTableId:
          Ref: VpcRouteTable
    {% endfor %}
    {% for subnet in private_subnets %}
    PrivateSubnet{{loop.index}}:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: Vpc
        CidrBlock: "{{subnet.cidr}}"
        Tags:
            - Key: Name
              Value: {{subnet.name or (_env.name + '-' + _env.stage + '-private')}}
    {% endfor %}
    {# The Internet gateway #}
    InternetGateway:
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
            - Key: Name
              Value: {{vpc.name}}
    AttachGateway:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        VpcId:
          Ref: Vpc
        InternetGatewayId:
          Ref: InternetGateway
    ######################################################################## DNS
    {% if domain %}
    DnsHostedZone:
      Type: "AWS::Route53::HostedZone"
      Properties:
        HostedZoneConfig:
          Comment: "Private hosted zone for {{domain}}"
        Name: "{{domain}}"
        VPCs:
          - VPCId: {Ref: Vpc}
            VPCRegion: {Ref: "AWS::Region"}
    {% endif %}
    #################################################################### ROUTING
    VpcRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: Vpc
        Tags:
            - Key: Name
              Value: {{vpc.name}}-public
      DependsOn: AttachGateway
    Route:
      Type: "AWS::EC2::Route"
      Properties:
        RouteTableId:
          Ref: VpcRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway
    {% for _ in private_subnets %}
    PrivateSubnet{{loop.index}}RouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: Vpc
        Tags:
            - Key: Name
              Value: {{vpc.name}}-private
    PrivateSubnet{{loop.index}}RouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: PrivateSubnet{{loop.index}}
        RouteTableId:
          Ref: PrivateSubnet{{loop.index}}RouteTable
    RouteToNatFromPrivateSubnet{{loop.index}}:
      Type: "AWS::EC2::Route"
      Properties:
        RouteTableId:
          Ref: PrivateSubnet{{loop.index}}RouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGateway
    {% endfor %}
    {# Security: Network ACLs #}
    NetworkAcl:
      Type: "AWS::EC2::NetworkAcl"
      Properties:
        VpcId:
          Ref: Vpc
    InboundSshAcl:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: NetworkAcl
        RuleNumber: 100
        Protocol: 6
        RuleAction: allow
        Egress: "false"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: 22
          To: 22
    OutboundSshAcl:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: NetworkAcl
        RuleNumber: 100
        Protocol: 6
        RuleAction: allow
        Egress: "true"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: 22
          To: 22
    OutBoundHttpAcl:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: NetworkAcl
        RuleNumber: 101
        Protocol: 6
        RuleAction: allow
        Egress: "true"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: 80
          To: 80
    {% if private_subnets %}
    {# An Elastic IP reservation to associate to the NAT gateway #}
    NatEip:
      Type: 'AWS::EC2::EIP'
      Properties: {}
    {# A NAT gateway in the first public subnet #}
    NatGateway:
        Type: "AWS::EC2::NatGateway"
        Properties:
          SubnetId:
            Ref: PublicSubnet1
          AllocationId:
            "Fn::GetAtt":
              - NatEip
              - AllocationId
    {% endif %}
