#!/usr/bin/python
# -*- coding: utf-8 -*-
# license removed for brevity
import rospy
from bridge import Xillybus
from {{comp.name}}.msg import {{comp.name[0].upper()+comp.name[1:]}}Msg

class {{comp.name[0].upper()+comp.name[1:]}}(object):
	def __init__(self):
		{%- for com in comp.module['communication'] %}
		self.if_{{com.fifo_width}} = Xillybus({{com.fifo_width}})
		{% if com.rcv_cycle -%}
		self.if_{{com.fifo_width}}.open_dev_write()
		{%- endif %}
		{% if com.snd_cycle -%}
		self.if_{{com.fifo_width}}.open_dev_read()
		{%- endif %}
		{% endfor %}
		{%- for input_var in input_var_list %}
		{%- set (signame, bitwidth, sigwidth, depth) = input_var -%}
		self.{{signame}} = 0
		{% endfor %}
		{%- for output_var in output_var_list %}
		{%- set (signame, bitwidth, sigwidth, depth) = output_var -%}
		self.{{signame}} = 0
		{% endfor %}
		self.msg = {{comp.name[0].upper()+comp.name[1:]}}Msg()
		self.pub = rospy.Publisher('{{comp.name}}_output', {{comp.name[0].upper()+comp.name[1:]}}Msg, queue_size=100)

	{%- for com in comp.module['communication'] %}
	def pack_{{com.fifo_width}}(self):
		data = 0
		{%- set  total_bit = 0 -%}
		{%- set  once = False -%}
		{% for input_var in input_var_list %}
		{%- set (signame, bitwidth, sigwidth, depth) = input_var -%}{% if bitwidth == com.fifo_width %}
		data = data + (self.{{signame}} << {% if once != True %}0){% else %}{{total_bit}}){% endif %}{%- set  total_bit = total_bit + sigwidth -%}{% endif %}
		{%- set  once = True -%}
		{% endfor %}
		data = self.if_{{com.fifo_width}}.adjust(data, mode = {% if com.fifo_width == 32 %}32{% else%}8{% endif %})
		return data
	{% endfor %}
	def callback(self, data):
		{% for input_var in input_var_list %}
		{%- set (signame, bitwidth, sigwidth, depth) = input_var -%}
		self.{{signame}} = data.{{signame}}
		{% endfor %}
		{%- for output_var in output_var_list %}
		{%- set (signame, bitwidth, sigwidth, depth) = output_var -%}
		self.{{signame}} = 0
		{% endfor %}
		{%- for com in comp.module['communication'] %}
		self.if_{{com.fifo_width}}.write(self.pack_{{com.fifo_width}}())
		# please describe message data to publish
		# self.msg.your_msg_elem = self.if_{{com.fifo_width}}.read()
		{% endfor %}
		# self.pub.publish(self.msg)

	def {{comp.name}}(self):
		rospy.init_node('{{comp.name}}', anonymous=True)
		rospy.Subscriber('{{comp.name}}_input', {{comp.name[0].upper()+comp.name[1:]}}Msg, self.callback)
		rospy.spin()

if __name__ == '__main__':
	{{comp.name}} = {{comp.name[0].upper() + comp.name[1:]}}()
	{{comp.name}}.{{comp.name}}()
