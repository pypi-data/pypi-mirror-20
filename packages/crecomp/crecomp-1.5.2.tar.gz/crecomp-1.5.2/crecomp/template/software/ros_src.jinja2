#include "ros/ros.h"
#include "{{comp.name}}/{{comp.name}}.h"
#include "../include/{{comp.name}}/lib_cpp.h"
#include <iostream>
using namespace std;

{% for input_var in input_var_list %}
{%- set (signame, bitwidth, sigwidth, depth) = input_var -%}
{%- if bitwidth == 8 %}char {{signame}};
{%- elif bitwidth == 16 %}short int {{signame}};
{%- elif bitwidth == 32 %}int {{signame}};
{%- endif %}
{% endfor %}

{%- for output_var in output_var_list %}
{%- set (signame, bitwidth, sigwidth, depth) = output_var -%}
{%- if bitwidth == 8 %}char {{signame}};
{%- elif bitwidth == 16 %}short int {{signame}};
{%- elif bitwidth == 32 %}int {{signame}};
{%- endif %}
{% endfor -%}

int msg_id;
int index_id = 0;

{% for com in xillybus%}
{%- if com.rcv_cycle != 0 %}
int data_input_{{com.fifo_width}}[{{com.rcv_cycle}}];
{%- endif -%}
{%- if com.snd_cycle != 0 %}
int data_output_{{com.fifo_width}}[{{com.snd_cycle}}];
{%- endif %}
class {{comp.name}}_{{com.fifo_width}} :public If_module{
public:
{%- if com.fifo_width == 32 %}
{%- if com.rcv_cycle != 0 %}
	void get_{{comp.name}}_{{com.fifo_width}} (int *buff, int size);
{% endif %}
{%- if com.snd_cycle != 0 %}
	void set_{{comp.name}}_{{com.fifo_width}} (int *buff, int size);
{%- endif -%}
{% elif com.fifo_width == 8 %}
{%- if com.rcv_cycle != 0 %}
	void get_{{comp.name}}_{{com.fifo_width}} (char *buff, int size);
{% endif %}
{%- if com.snd_cycle != 0 %}
	void set_{{comp.name}}_{{com.fifo_width}} (char *buff, int size);
{%- endif -%}
{% endif %}
};
{% if com.snd_cycle != 0 %}
{%- if com.fifo_width == 32 %}
void {{comp.name}}_{{com.fifo_width}}::get_{{comp.name}}_{{com.fifo_width}}(int *buff, int size){
{% elif com.fifo_width == 8 -%}
void {{comp.name}}_{{com.fifo_width}}::get_{{comp.name}}_{{com.fifo_width}}(char *buff, int size){
{% endif %}
	int rc = 0;
	int len = sizeof(int) * size;
	while(1){
		rc += read(fr, &buff[rc], len);
		if(rc < 0){
			cerr << "fail to read" << endl;
			continue;
		}
		else
		{
			len -= rc;
			if(len == 0) break;
		}
	}
}
{%- endif %}

{%- if com.rcv_cycle != 0 %}
{% if com.fifo_width == 32 %}
void {{comp.name}}_{{com.fifo_width}}::set_{{comp.name}}_{{com.fifo_width}}(int *buff, int size){
{% elif com.fifo_width == 8 -%}
void {{comp.name}}_{{com.fifo_width}}::set_{{comp.name}}_{{com.fifo_width}}(char *buff, int size){
{% endif %}
	int rc = 0;
	int len;
	len = sizeof(int) * size;
	rc = 0;
	while(1){
		rc += write(fw, &buff[rc], len);
		if(rc < 0){
			cerr << "fail to write" << endl;
			continue;
		}
		else{
			len -= rc;
			if (len == 0) break;
		}
	}
}
{%- endif -%}
{% endfor %}

//************ for output ************
void callbackFunction(const {{comp.name}}::{{comp.name}} msg){
	{% for input_var in input_var_list %}
	{%- set (signame, bitwidth, sigwidth, depth) = input_var -%}
	{{signame}} = msg.{{signame}};
	{% endfor -%}
	msg_id = msg.id;
	{% set  total_bit = 0 -%}
	{% set  once = False -%}
	{% for input_var in input_var_list %}
	{%- set (signame, bitwidth, sigwidth, depth) = input_var -%}
	data_input_32[index_id] = data_input_32[index_id] + ({{signame}} << {% if not once %}0);{% else %}{{total_bit}});{% endif %}
	{% set  total_bit = total_bit + sigwidth -%}
	{% set  once = True -%}
	{% endfor -%}
	index_id++;
	if (index_id == 9) index_id = 0;
}
//***********************************

int main(int argc, char *argv[]){
{% for com in xillybus %}
	{{comp.name}}_{{com.fifo_width}} fifo_{{com.fifo_width}};
{%- if com.rcv_cycle != 0 %}
	fifo_{{com.fifo_width}}.set_devfile_read("/dev/xillybus_read_{{com.fifo_width}}");
	fifo_{{com.fifo_width}}.open_devfile_read();
{%- endif %}
{%- if com.snd_cycle != 0 %}
	fifo_{{com.fifo_width}}.set_devfile_write("/dev/xillybus_write_{{com.fifo_width}}");
	fifo_{{com.fifo_width}}.open_devfile_write();
{%- endif -%}
{% endfor %}


	ros::init(argc, argv, "{{comp.name}}");
	ros::NodeHandle n_pub;
	ros::NodeHandle n_sub;
	ros::Publisher {{comp.name}}_pub = n_pub.advertise<{{comp.name}}::{{comp.name}}>("{{comp.name}}_output",1000);
	ros::Subscriber {{comp.name}}_sub = n_sub.subscribe("{{comp.name}}_input", 1000, callbackFunction);

	// {{comp.name}}::{{comp.name}} input_msg;
	{{comp.name}}::{{comp.name}} output_msg;
	int prev_id;

	//************ for input ************
	// ros::spin()
	//***********************************
	//************ for output ************
	while(ros::ok()){
		ros::spinOnce();
		if (msg_id != prev_id){
			if (index == 9){
				fifo_32.set_{{comp.name}}_32(data_input_32, 10);
			}
			output_msg.output_snd_32 = cp_32.get_{{comp.name}}_32(data_output_32,10);
			{{comp.name}}_pub.publish(output_msg)
		}
	}
	//***********************************

{% for com in xillybus %}
{%- if com.rcv_cycle != 0 %}
	fifo_{{com.fifo_width}}.close_devfile_read();
{%- endif -%}
{%- if com.snd_cycle != 0 %}
	fifo_{{com.fifo_width}}.close_devfile_write();
{%- endif -%}
{% endfor %}
	return 0;
}