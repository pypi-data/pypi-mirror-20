#! /usr/bin/python3
# coding: utf-8

# Asynchronous Music Player Daemon client library for Python

# Copyright (C) 2015 Ita√Ø BEN YAACOV

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import pprint
import sys
import ampd
import asyncio
import logging
import signal


logging.getLogger().setLevel(logging.DEBUG)


class AMPC(object):
    PROMPT = 'ampd: '

    def __init__(self):
        self.loop = asyncio.get_event_loop()
        self.client = ampd.Client()
        self.ampd = self.client.executor
        self.reader = asyncio.StreamReader()

        self.loop.add_signal_handler(signal.SIGINT, lambda: asyncio.ensure_future(self.shutdown()))
        self.loop.add_reader(sys.stdin, self.read)
        self.task = self.prompt()
        self.loop.run_forever()

    async def shutdown(self):
        self.task.cancel()
        await self.client.close()
        self.loop.stop()

    def read(self):
        self.reader.feed_data(sys.stdin.readline().encode())

    @ampd.task
    async def prompt(self):
        await self.client.connect_to_server()
        await self.ampd.idle(self.ampd.CONNECT)
        while True:
            try:
                command = (await self.reader.readline())[:-1]
            except:
                return
            if not command:
                asyncio.ensure_future(self.shutdown())
                return
            try:
                command = eval(command, {name: getattr(self.ampd, name) for name in ampd._request.COMMANDS})
            except:
                sys.excepthook(*sys.exc_info())
                continue
            try:
                reply = await command
                MyPrettyPrinter().pprint(reply)
            except Exception as e:
                print('ERROR:', e)


class MyPrettyPrinter(pprint.PrettyPrinter):
    def format(self, obj, context, maxlevels, level):
        if isinstance(obj, str):
            return (obj, True, False)
        return pprint.PrettyPrinter.format(self, obj, context, maxlevels, level)


app = AMPC()
