#!/usr/bin/env python


#-------------
# Load modules
#-------------
import numpy as np                         # Numpy import
import sys
import array

# fileobj = open(fileName, mode = 'rb')



def read_2d_float(fileobj, ilon, ilat):
    """
      Read a 2D float variable from a binary file and returns a 2D Numpy array.

      Required arguments:
         - fileobj: file object created after opening the binary file
         - ilon:    longitude dimension
         - ilat:    latitude dimension

      Returned value:
         - 2D Numpy array
      
    """
    count = ilon*ilat
    fourBytes =  np.fromfile(fileobj, count=1, dtype=np.float32)
    data = np.fromfile(fileobj, count=count, dtype=np.float32).reshape((ilon, ilat), order='F')
    fourBytes =  np.fromfile(fileobj, count=1, dtype=np.float32)
 
    return data

   
def read_2d_int(fileobj, ilon, ilat):
    """
      Read a 2D integer variable from a binary file and returns a 2D Numpy array.

      Required arguments:
         - fileobj: file object created after opening the binary file
         - ilon:    longitude dimension
         - ilat:    latitude dimension

      Returned value:
         - 2D Numpy array
      
    """
    count = ilon*ilat
    fourBytes =  np.fromfile(fileobj, count=1, dtype=np.int)
    data = np.fromfile(fileobj, count=count, dtype=np.int).reshape((ilon, ilat), order='F')
    fourBytes =  np.fromfile(fileobj, count=1, dtype=np.int)
 
    return data


def read_3d_float(fileobj, ilon, ilat, ivert):
    """
      Read a 3D float variable from a binary file and returns a 3D Numpy array.
      The binary file was generated by Fortran so we each variable is
      stored as: (int, ARRAY, int)

      Required arguments:
         - fileobj: file object created after opening the binary file
         - ilon:    longitude dimension
         - ilat:    latitude dimension

      Returned value:
         - 3D Numpy array
      
    """
    count = ilon*ilat*ivert
    fourBytes =  np.fromfile(fileobj, count=1, dtype=np.float32)
    data = np.fromfile(fileobj, count=count, dtype=np.float32).reshape((ilon, ilat, ivert), order='F')
    fourBytes =  np.fromfile(fileobj, count=1, dtype=np.float32)
    return data

def read_3d_int(fileobj, ilon, ilat, ivert):
    """
      Read a 3D integer variable from a binary file and returns a 3D Numpy array.

      Required arguments:
         - fileobj: file object created after opening the binary file
         - ilon:    longitude dimension
         - ilat:    latitude dimension

      Returned value:
         - 3D Numpy array
      
    """
    count = ilon*ilat*ivert
    fourBytes =  np.fromfile(fileobj, count=1, dtype=np.int)
    data = np.fromfile(fileobj, count=count, dtype=np.int).reshape((ilon, ilat, ivert), order='F')
    fourBytes =  np.fromfile(fileobj, count=1, dtype=np.int)
 
    return data




