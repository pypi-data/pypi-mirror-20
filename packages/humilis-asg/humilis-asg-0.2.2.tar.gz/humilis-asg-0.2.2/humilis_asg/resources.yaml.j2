---
# A nice name to identify the instance
{% if domain %}
{% if subdomain %}
{% set instance_name = subdomain + "." + domain %}
{% else %}
{% set instance_name = _env.name + "-" + _env.stage.lower() + "-" + _layer.name + "." + domain %}
{% endif %}
{% else %}
{% set instance_name = _env.name + "-" + _env.stage.lower() + "-" + _layer.name %}
{% endif %}
resources:
    # An S3 bucket is needed to store the access logs
    Bucket:
        Type: "AWS::S3::Bucket"
        Properties: {}

    # For ASG notifications
    NotificationTopic:
        Type: "AWS::SNS::Topic"


    ElbSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: Security group for the ELBs of environment {{_env.name}}
            VpcId: {{vpc_id or vpc}}
            Tags:
                - Key: Name
                  Value: {{_env.name}}-{{_env.stage.lower()}}-elb-sg
            SecurityGroupIngress:
                {% for ip in ip_whitelist %}
                {% for listener in listeners %}
                {% if listener.elb_port %}
                - IpProtocol: tcp
                  FromPort: {{listener.elb_port}}
                  ToPort: {{listener.elb_port}}
                  CidrIp: {{ip}}
                {% else %}
                - IpProtocol: tcp
                  FromPort: {{listener.port}}
                  ToPort: {{listener.port}}
                  CidrIp: {{ip}}
                {% endif %}
                {% endfor %}
                - IpProtocol: icmp
                  FromPort: -1
                  ToPort: -1
                  CidrIp: {{ip}}
                {% endfor %}
                {% for sg in sg_whitelist %}
                {% for listener in listeners %}
                {% if listener.elb_port %}
                - IpProtocol: tcp
                  FromPort: {{listener.elb_port}}
                  ToPort: {{listener.elb_port}}
                  SourceSecurityGroupId: {{sg}}
                {% else %}
                - IpProtocol: tcp
                  FromPort: {{listener.port}}
                  ToPort: {{listener.port}}
                  SourceSecurityGroupId: {{sg}}
                {% endif %}
                {% endfor %}
                - IpProtocol: icmp
                  FromPort: -1
                  ToPort: -1
                  SourceSecurityGroupId: {{sg}}
                {% endfor %}

    S3LoggingBucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket:
                Ref: Bucket
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Sid: ELBAccessLogs
                      Effect: Allow
                      Resource:
                        "Fn::Join":
                            - ""
                            -
                                - "arn:aws:s3:::"
                                - Ref: Bucket
                                - "/*"
                      Principal:
                        "AWS":
                            - { "Fn::FindInMap" : [ "ElbAccountIdMap", { "Ref" : "AWS::Region" }, "AccountId"]}
                      Action:
                        "s3:*"

    {% if domain and not ssl_certificate_id %}
    # Create a SSL certificate for HTTPS
    ElbCert:
        Type: "AWS::CertificateManager::Certificate"
        Properties:
            DomainName:
                "*.{{domain}}"
    {% endif %}

    InstanceSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: Security group for the EC2 instances in environment {{_env.name}}
            VpcId: {{vpc_id or vpc}}
            Tags:
                - Key: Name
                  Value: {{_env.name}}-{{_env.stage.lower()}}-ec2-sg
            SecurityGroupIngress:
                {% for listener in listeners %}
                - IpProtocol: tcp
                  FromPort: {{listener.port}}
                  ToPort: {{listener.port}}
                  SourceSecurityGroupId: {"Ref": "ElbSecurityGroup"}
                - IpProtocol: icmp
                  FromPort: -1
                  ToPort: -1
                  SourceSecurityGroupId: {"Ref": "ElbSecurityGroup"}
                {% endfor %}

    # Allow all traffic between the instances in the ASG
    InstanceSecurityGroupIngress:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            GroupId: {Ref: InstanceSecurityGroup}
            IpProtocol: -1
            FromPort: -1
            ToPort: -1
            SourceSecurityGroupId: {Ref: InstanceSecurityGroup}

    AsgLaunchConfiguration:
        Type: "AWS::AutoScaling::LaunchConfiguration"
        DependsOn: InstanceSecurityGroup
        Properties:
            # We need to associate a public IP address or the instance 
            # will not be able to access the internet. A better alternative
            # would be to set up a NAT, but for now this will do.
            AssociatePublicIpAddress: Yes
            # BlockDeviceMappings: TBD
            EbsOptimized: {{ebs_optimized}}
            ImageId: {{ami_id or image_id}}
            InstanceType: {{instance_type}}
            KeyName: {{key_name}}
            SecurityGroups:
                - Ref: InstanceSecurityGroup
            {% if spot_price %}
            SpotPrice: {{spot_price}}
            {% endif %}
            {% if efs_mount_point %}
            UserData:
                "Fn::Base64":
                    "Fn::Join":
                        - ""
                        -
                            - "#!/bin/bash -ex\n"
                            - "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n"
                            - "sleep 10\n"
                            - "sudo mkdir {{efs_mount_point}}\n"
                            - "sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2"
                            - {"Fn::Join": ["", [" ", {Ref: FileSystem}]]}
                            - ".efs."
                            - {Ref: "AWS::Region"}
                            - ".amazonaws.com:/   {{efs_mount_point}}\n"
                            - "sudo chown $(whoami):$(whoami) {{efs_mount_point}}"
            {% endif %}

    {% if domain %}
    ElbDnsRecord:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        {% if hosted_zone_id %}
        HostedZoneId: {{hosted_zone_id}}
        {% else %}
        HostedZoneName: {{domain}}.
        {% endif %}
        Comment: DNS name for ELB in subnet {{subnet_id or subnet}}
        RecordSets:
            - Name: "{{instance_name}}"
              Type: A
              AliasTarget:
                HostedZoneId:
                    "Fn::GetAtt":
                        - Elb
                        - CanonicalHostedZoneNameID
                DNSName:
                    "Fn::GetAtt":
                        - Elb
                        - DNSName
    {% endif %}
    Elb:
        Type: "AWS::ElasticLoadBalancing::LoadBalancer"
        DependsOn: S3LoggingBucketPolicy
        Properties:
            AccessLoggingPolicy:
                EmitInterval: 60
                Enabled: {{logging_enabled}}
                S3BucketName:
                    Ref: Bucket
                S3BucketPrefix:
                    "elb-logs/elb"
            Listeners:
                {% for listener in listeners %}
                {% if not (listener.protocol in ('ssl', 'https', 'HTTPS', 'SSL') and not domain) %}
                - InstancePort: {{listener.port}}
                  InstanceProtocol: {{listener.protocol}}
                  {% if listener.elb_port %}
                  LoadBalancerPort: {{listener.elb_port}}
                  {% else %}
                  LoadBalancerPort: {{listener.port}}
                  {% endif %}
                  Protocol: {{listener.protocol}}
                  {% if listener.protocol in ('ssl', 'https', 'HTTPS', 'SSL') %}
                  SSLCertificateId:
                      {% if ssl_certificate_id %}
                      {{ssl_certificate_id}}
                      {% else %}
                      Ref: ElbCert
                      {% endif %}
                  {% endif %}
                {% endif %}
                {% endfor %}

            Scheme:
                {% if public %}
                internet-facing
                {% else %}
                internal
                {% endif %}
            SecurityGroups:
                - Ref: ElbSecurityGroup
            Subnets:
                - {{subnet_id or subnet}}
            HealthCheck:
                Target: {{health_check_target}} 
                HealthyThreshold: 3
                UnhealthyThreshold: 5
                Interval: 30
                Timeout: 5
            ConnectionSettings:
                IdleTimeout: {{idle_timeout}}

    Asg:
        Type: "AWS::AutoScaling::AutoScalingGroup"
        {% if efs_mount_point %}
        DependsOn: MountTarget 
        {% endif %}
        Properties:
            DesiredCapacity: {{desired_capacity}}
            Tags:
                - Key: Name
                  Value: {{instance_name}}
                  PropagateAtLaunch: yes
            LaunchConfigurationName:
                Ref: AsgLaunchConfiguration
            LoadBalancerNames:
                - Ref: Elb
            MaxSize: {{maximum_capacity}}
            MinSize: {{minimum_capacity}}
            VPCZoneIdentifier:
                - {{subnet_id or subnet}}
            NotificationConfiguration:
                TopicARN:
                    Ref: NotificationTopic
                NotificationTypes:
                    - "autoscaling:EC2_INSTANCE_LAUNCH"
                    - "autoscaling:EC2_INSTANCE_LAUNCH_ERROR"
                    - "autoscaling:EC2_INSTANCE_TERMINATE"
                    - "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"

    {% if efs_mount_point %}
    FileSystem:
        Type: "AWS::EFS::FileSystem"
        Properties:
            PerformanceMode: generalPurpose
            FileSystemTags:
                - Key: Name
                  Value: "{{instance_name}}"

    MountTargetSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            VpcId: {{vpc_id or vpc}}
            GroupDescription: "{{instance_name}} EFS secgroup"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 2049
                  ToPort: 2049
                  SourceSecurityGroupId: {Ref: InstanceSecurityGroup}

    MountTarget:
      Type: "AWS::EFS::MountTarget"
      Properties:
        FileSystemId: {Ref: FileSystem}
        # The subnet parameter was deprecated for the subnet_id parameter
        SubnetId: {{subnet_id or subnet}}
        SecurityGroups: [{Ref: MountTargetSecurityGroup}]
    {% endif %}
