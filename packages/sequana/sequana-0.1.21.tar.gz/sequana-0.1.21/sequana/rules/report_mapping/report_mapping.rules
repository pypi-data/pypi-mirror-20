rule report_mapping:
    """
    Create a HTML report of sequencing coverage after bam processing. This
    report is dedicated for variant calling and de novo assembly pipeline.

    Required input:
        __report_mapping__input: bed file from bedtools genomecov
        __report_mapping__bam_input: bam file
        __report_mapping__quast_input: html file from quast (optional*)
        __report_mapping__ann_input: genbank annotation file (optional*)

    Required output:
        __report_mapping__output: html file

    Required parameter:
        __report_mapping__directory: report directory
        config["report_mapping"]["k"]: number of gaussians predicted in the
                gaussian pool.
        config["report_mapping"]["window_size"]: windows size for running
                median. This integer must be an odd number.
        config["report_mapping"]["high_threshold"]: high zscore threshold
        config["report_mapping"]["low_threshold"]: low zscore threshold
        config["report_mapping"]["circular"]: boolean if the genome is circular

    Contributors:
        Sequana consortium

    *: If you don't need the optional input. You must set the variable as an
       empty list. (i.e.:  __report_mapping__quast_input = [])
    """
    input:
        bed = __report_mapping__input,
        bam = __report_mapping__bam_input,
        quast = __report_mapping__quast_input,
        ann = __report_mapping__ann_input
    output:
        __report_mapping__output
    params:
        sample_dict = __report_mapping__sample_dict,
        outdir = __report_mapping__directory,
        sample = __report_mapping__sample,
        k = config["report_mapping"]["k"],
        size = config["report_mapping"]["window_size"],
        high = config["report_mapping"]["high_threshold"],
        low = config["report_mapping"]["low_threshold"],
        circular = config["report_mapping"]["circular"]
    run:
        import os

        from sequana import bedtools
        from sequana import BAM
        from sequana.reporting import report_mapping
        from sequana.reporting import report_chromosome
        from sequana.reporting import report_main
        from sequana.tools import genbank_features_parser


        s = report_main.SequanaReport(sample_dict=params.sample_dict,
                                      sample=params.sample,
                                      snakefile=__snakefile__,
                                      directory=params.outdir)
        s.jinja['description'] = """

        This is the output of variant calling pipeline. This pipeline search
        variants and provide as an output a vcf file. If a Genbank file is
        available, the variants will be annotated using snpeff.

        """
        s.create_report()

        mydata = bedtools.GenomeCov(input.bed, low_threshold=params.low,
                                    high_threshold=params.high)
        bam = BAM(input.bam)
        features = genbank_features_parser(input.ann) if input.ann else None

        # Report mapping
        r = report_mapping.MappingReport(directory=params.outdir,
                                         sample=params.sample)
        r.set_data(mydata, bam, input.quast)
        r.create_report()

        # Report chromosomes
        for chrom in mydata:
            chrom.running_median(n=params.size, circular=params.circular)
            chrom.compute_zscore(k=params.k)

            r = report_chromosome.ChromosomeMappingReport(
                    chrom, directory=params.outdir, sample=params.sample,
                    features=features)
            r.create_report()
