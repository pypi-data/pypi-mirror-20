# coding: utf-8
"""Read mapping for either single end and paired end data using BWA and
samtools.

input:
    fastq -> list with your fastq.gz (R1, R2)
    ref -> reference's fastq file
"""


def bwa_mem_dynamic(name, project):
    metadata = {'name':name}

    from easydev import cmd_exists
    ret = cmd_exists("pbwa") # for IP cluster
    if ret:
        metadata['executable'] = "pbwa"
    else:
        metadata['executable'] = "bwa"

    bwa_mem_code = '''
rule bwa_mem_%(name)s:
    """BWA MEM

    By default uses *bwa* as the executable. If *pbwa* is available, 
    (like on Institut Pasteur Cluster), then it is used in place of *bwa*.
    It has the same behaviour but is a parallel version of *bwa*.

    """
    input:
        fastq = __bwa_mem_%(name)s__input,
        reference = __bwa_mem_%(name)s__ref_input
    output:
        mem = __bwa_mem_%(name)s__mem_output,
        sort = __bwa_mem_%(name)s__sort_output,
        reference = __bwa_mem_%(name)s__reference,
        fai = __bwa_mem_%(name)s__fai
    log:
        __bwa_mem_%(name)s__log
    params:
        index = config["bwa_mem_%(name)s"]["index_algorithm"],
        mem = config["bwa_mem_%(name)s"]["options"],
        bwa_exe = "%(executable)s"
    threads:
        int(config["bwa_mem_%(name)s"]["threads"])
    shell:
        """
        # Symbolic link of the reference
        if [[ {input.reference} == /* ]];
        then
            ln -sf {input.reference} {output.reference}
        else
            ln -sf $(pwd)/{input.reference} {output.reference}
        fi

        # this ensures that the symlink is updated (see
        # https://bitbucket.org/snakemake/snakemake/wiki/FAQ)
        touch -h {output.reference}

        # Indexing
        bwa index -a {params.index} {output.reference} 2> {log}
        samtools faidx {output.reference}

        # Mapping
        ({params.bwa_exe} mem -t {threads} {params.mem} \
        {output.reference} {input.fastq} | \
        samtools view -Sbh -> {output.mem}) 2>> {log}
 
        # Sorting
        samtools sort -o {output.sort} {output.mem} 2>> {log}
        """
    '''
    from sequana.snaketools import build_dynamic_rule
    return build_dynamic_rule(bwa_mem_code % metadata, project.pipeline_dir)

