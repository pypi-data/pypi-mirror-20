"""
Author: Dimitri Desvillechabrol
Affiliation: Institut Pasteur
Aim: Denovo assembly
Data: paired end
Run: snakemake -s denovo_assembly.rules
"""

import os

import sequana
from sequana import snaketools as sm
from sequana.snaketools import SequanaConfig
sm.init("denovo_assembly.rules", globals())


# This must be defined before the include
configfile: "config.yaml"
manager = sm.PipelineManager("denovo_assembly", config)
__snakefile__ = srcdir(__snakefile__)
report_dir = manager.getreportdir("da")

__rawdata__input = manager.getrawdata()

exec(open(sequana.modules["bwa_mem_dynamic"], "r").read())

if config["digital_normalisation"]["do"]:
    __digital_normalisation__input = __rawdata__input
    __digital_normalisation__prefix = manager.getwkdir("digital_normalisation")
    __digital_normalisation__output = [
        manager.getname("digital_normalisation", "_R%i_.dn.fastq") % i
        for i in (1, 2)]
    __digital_normalisation__log = manager.getlogdir("digital_normalisation")
    include: sm.modules["digital_normalisation"]
    __spades__input = __digital_normalisation__output
else:
    __spades__input = __rawdata__input

__spades__outdir = manager.getwkdir("spades")
__spades__contigs = manager.getname("spades", ".contigs.fasta")
__spades__scaffolds = manager.getname("spades", ".scaffolds.fasta")
__spades__log = manager.getlogdir("spades")
include: sm.modules["spades"]

__quast__input = [__spades__contigs, __spades__scaffolds]
__quast__outdir = manager.getwkdir("quast")
__quast__output = manager.getname("quast", ".quast.html")
__quast__log = manager.getlogdir("quast")
include: sm.modules["quast"]

__format_contigs__input = __spades__contigs
__format_contigs__output = manager.getname("format_contigs", ".fasta")
include: sm.modules["format_contigs"]

__copy_multiple_files__input = [__quast__output, __spades__contigs,
                                __spades__scaffolds]

if config["do_mapping_evaluation"]:
    # remove snpeff analysis
    config = dict(config, **{"snpeff": {"do": False}})
    __bwa_mem_ref__ref_input = __format_contigs__output
    __report_mapping__quast_input = __quast__output
    include: sm.modules["variant_calling"]


final_output += [expand(__quast__output, sample=manager.samples),
                 expand(__format_contigs__output, sample=manager.samples)]


rule pipeline_denovo:
    input:
        final_output
