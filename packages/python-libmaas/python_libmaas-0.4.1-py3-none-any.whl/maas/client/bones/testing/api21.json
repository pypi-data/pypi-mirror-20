{
  "doc": "MAAS API",
  "hash": "503f93ea00f40fb77070f447466a1a557bdfd409",
  "resources": [
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create an authorisation OAuth token and OAuth consumer.\n\n:param name: Optional name of the token that will be generated.\n:type name: unicode\n:return: a json dict with four keys: 'token_key',\n    'token_secret', 'consumer_key'  and 'name'(e.g.\n    {token_key: 's65244576fgqs', token_secret: 'qsdfdhv34',\n    consumer_key: '68543fhj854fg', name: 'MAAS consumer'}).\n:rtype: string (json)",
            "method": "POST",
            "name": "create_authorisation_token",
            "op": "create_authorisation_token",
            "restful": false
          },
          {
            "doc": "Delete an authorisation OAuth token and the related OAuth consumer.\n\n:param token_key: The key of the token to be deleted.\n:type token_key: unicode",
            "method": "POST",
            "name": "delete_authorisation_token",
            "op": "delete_authorisation_token",
            "restful": false
          },
          {
            "doc": "List authorisation tokens available to the currently logged-in user.\n\n:return: list of dictionaries representing each key's name and token.",
            "method": "GET",
            "name": "list_authorisation_tokens",
            "op": "list_authorisation_tokens",
            "restful": false
          },
          {
            "doc": "Modify the consumer name of an authorisation OAuth token.\n\n:param token: Can be the whole token or only the token key.\n:type token: unicode\n:param name: New name of the token.\n:type name: unicode",
            "method": "POST",
            "name": "update_token_name",
            "op": "update_token_name",
            "restful": false
          }
        ],
        "doc": "Manage the current logged-in user.",
        "name": "AccountHandler",
        "params": [],
        "path": "/MAAS/api/2.0/account/",
        "uri": "http://localhost:5240/MAAS/api/2.0/account/"
      },
      "name": "AccountHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete cache set on a machine.\n\nReturns 400 if the cache set is in use.\nReturns 404 if the machine or cache set is not found.\nReturns 409 if the machine is not Ready.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read bcache cache set on a machine.\n\nReturns 404 if the machine or cache set is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Delete bcache on a machine.\n\n:param cache_device: Cache block device to replace current one.\n:param cache_partition: Cache partition to replace current one.\n\nSpecifying both a cache_device and a cache_partition is not allowed.\n\nReturns 404 if the machine or the cache set is not found.\nReturns 409 if the machine is not Ready.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage bcache cache set on a machine.",
        "name": "BcacheCacheSetHandler",
        "params": [
          "system_id",
          "id"
        ],
        "path": "/MAAS/api/2.0/nodes/{system_id}/bcache-cache-set/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/{system_id}/bcache-cache-set/{id}/"
      },
      "name": "BcacheCacheSetHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Creates a Bcache Cache Set.\n\n:param cache_device: Cache block device.\n:param cache_partition: Cache partition.\n\nSpecifying both a cache_device and a cache_partition is not allowed.\n\nReturns 404 if the machine is not found.\nReturns 409 if the machine is not Ready.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all bcache cache sets belonging to a machine.\n\nReturns 404 if the machine is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage bcache cache sets on a machine.",
        "name": "BcacheCacheSetsHandler",
        "params": [
          "system_id"
        ],
        "path": "/MAAS/api/2.0/nodes/{system_id}/bcache-cache-sets/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/{system_id}/bcache-cache-sets/"
      },
      "name": "BcacheCacheSetsHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete bcache on a machine.\n\nReturns 404 if the machine or bcache is not found.\nReturns 409 if the machine is not Ready.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read bcache device on a machine.\n\nReturns 404 if the machine or bcache is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Delete bcache on a machine.\n\n:param name: Name of the Bcache.\n:param uuid: UUID of the Bcache.\n:param cache_set: Cache set to replace current one.\n:param backing_device: Backing block device to replace current one.\n:param backing_partition: Backing partition to replace current one.\n:param cache_mode: Cache mode (writeback, writethrough, writearound).\n\nSpecifying both a device and a partition for a given role (cache or\nbacking) is not allowed.\n\nReturns 404 if the machine or the bcache is not found.\nReturns 409 if the machine is not Ready.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage bcache device on a machine.",
        "name": "BcacheHandler",
        "params": [
          "system_id",
          "id"
        ],
        "path": "/MAAS/api/2.0/nodes/{system_id}/bcache/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/{system_id}/bcache/{id}/"
      },
      "name": "BcacheHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Creates a Bcache.\n\n:param name: Name of the Bcache.\n:param uuid: UUID of the Bcache.\n:param cache_set: Cache set.\n:param backing_device: Backing block device.\n:param backing_partition: Backing partition.\n:param cache_mode: Cache mode (WRITEBACK, WRITETHROUGH, WRITEAROUND).\n\nSpecifying both a device and a partition for a given role (cache or\nbacking) is not allowed.\n\nReturns 404 if the machine is not found.\nReturns 409 if the machine is not Ready.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all bcache devices belonging to a machine.\n\nReturns 404 if the machine is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage bcache devices on a machine.",
        "name": "BcachesHandler",
        "params": [
          "system_id"
        ],
        "path": "/MAAS/api/2.0/nodes/{system_id}/bcaches/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/{system_id}/bcaches/"
      },
      "name": "BcachesHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Add a tag to block device on a machine.\n\n:param tag: The tag being added.\n\nReturns 404 if the machine or block device is not found.\nReturns 403 if the user is not allowed to update the block device.\nReturns 409 if the machine is not Ready.",
            "method": "POST",
            "name": "add_tag",
            "op": "add_tag",
            "restful": false
          },
          {
            "doc": "Delete block device on a machine.\n\nReturns 404 if the machine or block device is not found.\nReturns 403 if the user is not allowed to delete the block device.\nReturns 409 if the machine is not Ready.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Format block device with filesystem.\n\n:param fstype: Type of filesystem.\n:param uuid: UUID of the filesystem.\n\nReturns 403 when the user doesn't have the ability to format the             block device.\nReturns 404 if the machine or block device is not found.\nReturns 409 if the machine is not Ready or Allocated.",
            "method": "POST",
            "name": "format",
            "op": "format",
            "restful": false
          },
          {
            "doc": "Mount the filesystem on block device.\n\n:param mount_point: Path on the filesystem to mount.\n:param mount_options: Options to pass to mount(8).\n\nReturns 403 when the user doesn't have the ability to mount the             block device.\nReturns 404 if the machine or block device is not found.\nReturns 409 if the machine is not Ready or Allocated.",
            "method": "POST",
            "name": "mount",
            "op": "mount",
            "restful": false
          },
          {
            "doc": "Read block device on node.\n\nReturns 404 if the machine or block device is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Remove a tag from block device on a machine.\n\n:param tag: The tag being removed.\n\nReturns 404 if the machine or block device is not found.\nReturns 403 if the user is not allowed to update the block device.\nReturns 409 if the machine is not Ready.",
            "method": "POST",
            "name": "remove_tag",
            "op": "remove_tag",
            "restful": false
          },
          {
            "doc": "Set this block device as the boot disk for the machine.\n\nReturns 400 if the block device is a virtual block device.\nReturns 404 if the machine or block device is not found.\nReturns 403 if the user is not allowed to update the block device.\nReturns 409 if the machine is not Ready or Allocated.",
            "method": "POST",
            "name": "set_boot_disk",
            "op": "set_boot_disk",
            "restful": false
          },
          {
            "doc": "Unformat block device with filesystem.\n\nReturns 400 if the block device is not formatted, currently mounted,             or part of a filesystem group.\nReturns 403 when the user doesn't have the ability to unformat the             block device.\nReturns 404 if the machine or block device is not found.\nReturns 409 if the machine is not Ready or Allocated.",
            "method": "POST",
            "name": "unformat",
            "op": "unformat",
            "restful": false
          },
          {
            "doc": "Unmount the filesystem on block device.\n\nReturns 400 if the block device is not formatted or not currently             mounted.\nReturns 403 when the user doesn't have the ability to unmount the             block device.\nReturns 404 if the machine or block device is not found.\nReturns 409 if the machine is not Ready or Allocated.",
            "method": "POST",
            "name": "unmount",
            "op": "unmount",
            "restful": false
          },
          {
            "doc": "Update block device on a machine.\n\nMachines must have a status of Ready to have access to all options.\nMachines with Deployed status can only have the name, model, serial,\nand/or id_path updated for a block device. This is intented to allow a\nbad block device to be replaced while the machine remains deployed.\n\nFields for physical block device:\n\n:param name: Name of the block device.\n:param model: Model of the block device.\n:param serial: Serial number of the block device.\n:param id_path: (optional) Only used if model and serial cannot be             provided. This should be a path that is fixed and doesn't change             depending on the boot order or kernel version.\n:param size: Size of the block device.\n:param block_size: Block size of the block device.\n\nFields for virtual block device:\n\n:param name: Name of the block device.\n:param uuid: UUID of the block device.\n:param size: Size of the block device. (Only allowed for logical             volumes.)\n\nReturns 404 if the machine or block device is not found.\nReturns 403 if the user is not allowed to update the block device.\nReturns 409 if the machine is not Ready.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage a block device on a machine.",
        "name": "BlockDeviceHandler",
        "params": [
          "system_id",
          "id"
        ],
        "path": "/MAAS/api/2.0/nodes/{system_id}/blockdevices/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/{system_id}/blockdevices/{id}/"
      },
      "name": "BlockDeviceHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a physical block device.\n\n:param name: Name of the block device.\n:param model: Model of the block device.\n:param serial: Serial number of the block device.\n:param id_path: (optional) Only used if model and serial cannot be\n    provided. This should be a path that is fixed and doesn't change\n    depending on the boot order or kernel version.\n:param size: Size of the block device.\n:param block_size: Block size of the block device.\n\nReturns 404 if the node is not found.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all block devices belonging to a machine.\n\nReturns 404 if the machine is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage block devices on a machine.",
        "name": "BlockDevicesHandler",
        "params": [
          "system_id"
        ],
        "path": "/MAAS/api/2.0/nodes/{system_id}/blockdevices/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/{system_id}/blockdevices/"
      },
      "name": "BlockDevicesHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete boot resource.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read a boot resource.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage a boot resource.",
        "name": "BootResourceHandler",
        "params": [
          "id"
        ],
        "path": "/MAAS/api/2.0/boot-resources/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/boot-resources/{id}/"
      },
      "name": "BootResourceHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Uploads a new boot resource.\n\n:param name: Name of the boot resource.\n:param title: Title for the boot resource.\n:param architecture: Architecture the boot resource supports.\n:param filetype: Filetype for uploaded content. (Default: tgz)\n:param content: Image content. Note: this is not a normal parameter,\n    but a file upload.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "Import the boot resources.",
            "method": "POST",
            "name": "import",
            "op": "import",
            "restful": false
          },
          {
            "doc": "Return import status.",
            "method": "GET",
            "name": "is_importing",
            "op": "is_importing",
            "restful": false
          },
          {
            "doc": "List all boot resources.\n\n:param type: Type of boot resources to list. Default: all",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Stop import of boot resources.",
            "method": "POST",
            "name": "stop_import",
            "op": "stop_import",
            "restful": false
          }
        ],
        "doc": "Manage the boot resources.",
        "name": "BootResourcesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/boot-resources/",
        "uri": "http://localhost:5240/MAAS/api/2.0/boot-resources/"
      },
      "name": "BootResourcesHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete a specific boot source.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read a boot source.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update a specific boot source.\n\n:param url: The URL of the BootSource.\n:param keyring_filename: The path to the keyring file for this\n    BootSource.\n:param keyring_data: The GPG keyring for this BootSource,\n    base64-encoded data.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage a boot source.",
        "name": "BootSourceHandler",
        "params": [
          "id"
        ],
        "path": "/MAAS/api/2.0/boot-sources/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/boot-sources/{id}/"
      },
      "name": "BootSourceHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete a specific boot source.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read a boot source selection.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update a specific boot source selection.\n\n:param release: The release for which to import resources.\n:param arches: The list of architectures for which to import resources.\n:param subarches: The list of subarchitectures for which to import\n    resources.\n:param labels: The list of labels for which to import resources.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage a boot source selection.",
        "name": "BootSourceSelectionHandler",
        "params": [
          "boot_source_id",
          "id"
        ],
        "path": "/MAAS/api/2.0/boot-sources/{boot_source_id}/selections/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/boot-sources/{boot_source_id}/selections/{id}/"
      },
      "name": "BootSourceSelectionHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a new boot source selection.\n\n:param release: The release for which to import resources.\n:param arches: The architecture list for which to import resources.\n:param subarches: The subarchitecture list for which to import\n    resources.\n:param labels: The label lists for which to import resources.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List boot source selections.\n\nGet a listing of a boot source's selections.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage the collection of boot source selections.",
        "name": "BootSourceSelectionsHandler",
        "params": [
          "boot_source_id"
        ],
        "path": "/MAAS/api/2.0/boot-sources/{boot_source_id}/selections/",
        "uri": "http://localhost:5240/MAAS/api/2.0/boot-sources/{boot_source_id}/selections/"
      },
      "name": "BootSourceSelectionsHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a new boot source.\n\n:param url: The URL of the BootSource.\n:param keyring_filename: The path to the keyring file for\n    this BootSource.\n:param keyring_data: The GPG keyring for this BootSource,\n    base64-encoded.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List boot sources.\n\nGet a listing of boot sources.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage the collection of boot sources.",
        "name": "BootSourcesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/boot-sources/",
        "uri": "http://localhost:5240/MAAS/api/2.0/boot-sources/"
      },
      "name": "BootSourcesHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete a commissioning script.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read a commissioning script.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update a commissioning script.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage a custom commissioning script.\n\nThis functionality is only available to administrators.",
        "name": "CommissioningScriptHandler",
        "params": [
          "name"
        ],
        "path": "/MAAS/api/2.0/commissioning-scripts/{name}",
        "uri": "http://localhost:5240/MAAS/api/2.0/commissioning-scripts/{name}"
      },
      "name": "CommissioningScriptHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a new commissioning script.\n\nEach commissioning script is identified by a unique name.\n\nBy convention the name should consist of a two-digit number, a dash,\nand a brief descriptive identifier consisting only of ASCII\ncharacters.  You don't need to follow this convention, but not doing\nso opens you up to risks w.r.t. encoding and ordering.  The name must\nnot contain any whitespace, quotes, or apostrophes.\n\nA commissioning machine will run each of the scripts in lexicographical\norder.  There are no promises about how non-ASCII characters are\nsorted, or even how upper-case letters are sorted relative to\nlower-case letters.  So where ordering matters, use unique numbers.\n\nScripts built into MAAS will have names starting with \"00-maas\" or\n\"99-maas\" to ensure that they run first or last, respectively.\n\nUsually a commissioning script will be just that, a script.  Ideally a\nscript should be ASCII text to avoid any confusion over encoding.  But\nin some cases a commissioning script might consist of a binary tool\nprovided by a hardware vendor.  Either way, the script gets passed to\nthe commissioning machine in the exact form in which it was uploaded.\n\n:param name: Unique identifying name for the script.  Names should\n    follow the pattern of \"25-burn-in-hard-disk\" (all ASCII, and with\n    numbers greater than zero, and generally no \"weird\" characters).\n:param content: A script file, to be uploaded in binary form.  Note:\n    this is not a normal parameter, but a file upload.  Its filename\n    is ignored; MAAS will know it by the name you pass to the request.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List commissioning scripts.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage custom commissioning scripts.\n\nThis functionality is only available to administrators.",
        "name": "CommissioningScriptsHandler",
        "params": [],
        "path": "/MAAS/api/2.0/commissioning-scripts/",
        "uri": "http://localhost:5240/MAAS/api/2.0/commissioning-scripts/"
      },
      "name": "CommissioningScriptsHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete a DHCP snippet.\n\nReturns 404 if the DHCP snippet is not found.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read DHCP snippet.\n\nReturns 404 if the snippet is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Revert the value of a DHCP snippet to an earlier revision.\n\n:param to: What revision in the DHCP snippet's history to revert to.\n    This can either be an ID or a negative number representing how far\n    back to go.\n:type to: integer\n\nReturns 404 if the DHCP snippet is not found.",
            "method": "POST",
            "name": "revert",
            "op": "revert",
            "restful": false
          },
          {
            "doc": "Update a DHCP snippet.\n\n:param name: The name of the DHCP snippet.\n:type name: unicode\n\n:param value: The new value of the DHCP snippet to be used in\n    dhcpd.conf. Previous values are stored and can be reverted.\n:type value: unicode\n\n:param description: A description of what the DHCP snippet does.\n:type description: unicode\n\n:param enabled: Whether or not the DHCP snippet is currently enabled.\n:type enabled: boolean\n\n:param node: The node the DHCP snippet is to be used for. Can not be\n    set if subnet is set.\n:type node: unicode\n\n:param subnet: The subnet the DHCP snippet is to be used for. Can not\n    be set if node is set.\n:type subnet: unicode\n\n:param global_snippet: Set the DHCP snippet to be a global option. This\n    removes any node or subnet links.\n:type global_snippet: boolean\n\nReturns 404 if the DHCP snippet is not found.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage an individual DHCP snippet.\n\nThe DHCP snippet is identified by its id.",
        "name": "DHCPSnippetHandler",
        "params": [
          "id"
        ],
        "path": "/MAAS/api/2.0/dhcp-snippets/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/dhcp-snippets/{id}/"
      },
      "name": "DHCPSnippetHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a DHCP snippet.\n\n:param name: The name of the DHCP snippet. This is required to create\n    a new DHCP snippet.\n:type name: unicode\n\n:param value: The snippet of config inserted into dhcpd.conf. This is\n    required to create a new DHCP snippet.\n:type value: unicode\n\n:param description: A description of what the snippet does.\n:type description: unicode\n\n:param enabled: Whether or not the snippet is currently enabled.\n:type enabled: boolean\n\n:param node: The node this snippet applies to. Cannot be used with\n    subnet or global_snippet.\n:type node: unicode\n\n:param subnet: The subnet this snippet applies to. Cannot be used with\n    node or global_snippet.\n:type subnet: unicode\n\n:param global_snippet: Whether or not this snippet is to be applied\n    globally. Cannot be used with node or subnet.\n:type global_snippet: boolean\n\nReturns 404 if the DHCP snippet is not found.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all DHCP snippets.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage the collection of all DHCP snippets in MAAS.",
        "name": "DHCPSnippetsHandler",
        "params": [],
        "path": "/MAAS/api/2.0/dhcp-snippets/",
        "uri": "http://localhost:5240/MAAS/api/2.0/dhcp-snippets/"
      },
      "name": "DHCPSnippetsHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete dnsresource.\n\nReturns 403 if the user does not have permission to delete the\ndnsresource.\nReturns 404 if the dnsresource is not found.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read dnsresource.\n\nReturns 404 if the dnsresource is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update dnsresource.\n\n:param fqdn: Hostname (with domain) for the dnsresource.\n:param ip_address: Address to assign to the dnsresource.\n\nReturns 403 if the user does not have permission to update the\ndnsresource.\nReturns 404 if the dnsresource is not found.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage dnsresource.",
        "name": "DNSResourceHandler",
        "params": [
          "id"
        ],
        "path": "/MAAS/api/2.0/dnsresources/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/dnsresources/{id}/"
      },
      "name": "DNSResourceHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete dnsresourcerecord.\n\nReturns 403 if the user does not have permission to delete the\ndnsresourcerecord.\nReturns 404 if the dnsresourcerecord is not found.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read dnsresourcerecord.\n\nReturns 404 if the dnsresourcerecord is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update dnsresourcerecord.\n\n:param rrtype: Resource Type\n:param rrdata: Resource Data (everything to the right of Type.)\n\nReturns 403 if the user does not have permission to update the\ndnsresourcerecord.\nReturns 404 if the dnsresourcerecord is not found.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage dnsresourcerecord.",
        "name": "DNSResourceRecordHandler",
        "params": [
          "id"
        ],
        "path": "/MAAS/api/2.0/dnsresourcerecords/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/dnsresourcerecords/{id}/"
      },
      "name": "DNSResourceRecordHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a dnsresourcerecord.\n\n:param fqdn: Hostname (with domain) for the dnsresource.  Either fqdn\n    or (name, domain) must be specified.  Fqdn is ignored if either\n    name or domain is given.\n:param name: Hostname (without domain)\n:param domain: Domain (name or id)\n:param rrtype: resource type to create\n:param rrdata: resource data (everything to the right of\n    resource type.)",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all dnsresourcerecords.\n\n:param domain: restrict the listing to entries for the domain.\n:param name: restrict the listing to entries of the given name.\n:param rrtype: restrict the listing to entries which have\n    records of the given rrtype.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage dnsresourcerecords.",
        "name": "DNSResourceRecordsHandler",
        "params": [],
        "path": "/MAAS/api/2.0/dnsresourcerecords/",
        "uri": "http://localhost:5240/MAAS/api/2.0/dnsresourcerecords/"
      },
      "name": "DNSResourceRecordsHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a dnsresource.\n\n:param fqdn: Hostname (with domain) for the dnsresource.  Either fqdn\n    or (name, domain) must be specified.  Fqdn is ignored if either\n    name or domain is given.\n:param name: Hostname (without domain)\n:param domain: Domain (name or id)\n:param address_ttl: Default ttl for entries in this zone.\n:param ip_addresses: (optional) Address (ip or id) to assign to the\n    dnsresource.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all resources for the specified criteria.\n\n:param domain: restrict the listing to entries for the domain.\n:param name: restrict the listing to entries of the given name.\n:param rrtype: restrict the listing to entries which have\n    records of the given rrtype.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage dnsresources.",
        "name": "DNSResourcesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/dnsresources/",
        "uri": "http://localhost:5240/MAAS/api/2.0/dnsresources/"
      },
      "name": "DNSResourcesHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete a specific Device.\n\nReturns 404 if the device is not found.\nReturns 403 if the user does not have permission to delete the device.\nReturns 204 if the device is successfully deleted.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Obtain various system details.\n\nFor example, LLDP and ``lshw`` XML dumps.\n\nReturns a ``{detail_type: xml, ...}`` map, where\n``detail_type`` is something like \"lldp\" or \"lshw\".\n\nNote that this is returned as BSON and not JSON. This is for\nefficiency, but mainly because JSON can't do binary content\nwithout applying additional encoding like base-64.\n\nReturns 404 if the node is not found.",
            "method": "GET",
            "name": "details",
            "op": "details",
            "restful": false
          },
          {
            "doc": "Obtain power parameters.\n\nThis method is reserved for admin users and returns a 403 if the\nuser is not one.\n\nThis returns the power parameters, if any, configured for a\nnode. For some types of power control this will include private\ninformation such as passwords and secret keys.\n\nReturns 404 if the node is not found.",
            "method": "GET",
            "name": "power_parameters",
            "op": "power_parameters",
            "restful": false
          },
          {
            "doc": "Read a specific Node.\n\nReturns 404 if the node is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Reset a device's configuration to its initial state.\n\nReturns 404 if the device is not found.\nReturns 403 if the user does not have permission to reset the device.",
            "method": "POST",
            "name": "restore_default_configuration",
            "op": "restore_default_configuration",
            "restful": false
          },
          {
            "doc": "Reset a device's network options.\n\nReturns 404 if the device is not found\nReturns 403 if the user does not have permission to reset the device.",
            "method": "POST",
            "name": "restore_networking_configuration",
            "op": "restore_networking_configuration",
            "restful": false
          },
          {
            "doc": "Set key/value data for the current owner.\n\nPass any key/value data to this method to add, modify, or remove. A key\nis removed when the value for that key is set to an empty string.\n\nThis operation will not remove any previous keys unless explicitly\npassed with an empty string. All owner data is removed when the machine\nis no longer allocated to a user.\n\nReturns 404 if the machine is not found.\nReturns 403 if the user does not have permission.",
            "method": "POST",
            "name": "set_owner_data",
            "op": "set_owner_data",
            "restful": false
          },
          {
            "doc": "Update a specific device.\n\n:param hostname: The new hostname for this device.\n:type hostname: unicode\n\n:param domain: The domain for this device.\n:type domain: unicode\n\n:param parent: Optional system_id to indicate this device's parent.\n    If the parent is already set and this parameter is omitted,\n    the parent will be unchanged.\n:type parent: unicode\n\n:param zone: Name of a valid physical zone in which to place this\n    node.\n:type zone: unicode\n\nReturns 404 if the device is not found.\nReturns 403 if the user does not have permission to update the device.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage an individual device.\n\nThe device is identified by its system_id.",
        "name": "DeviceHandler",
        "params": [
          "system_id"
        ],
        "path": "/MAAS/api/2.0/devices/{system_id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/devices/{system_id}/"
      },
      "name": "DeviceHandler"
    },
    {
      "anon": {
        "actions": [
          {
            "doc": "Returns whether or not the given MAC address is registered within\nthis MAAS (and attached to a non-retired node).\n\n:param mac_address: The mac address to be checked.\n:type mac_address: unicode\n:return: 'true' or 'false'.\n:rtype: unicode\n\nReturns 400 if any mandatory parameters are missing.",
            "method": "GET",
            "name": "is_registered",
            "op": "is_registered",
            "restful": false
          }
        ],
        "doc": "Anonymous access to Nodes.",
        "name": "AnonNodesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/nodes/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/"
      },
      "auth": {
        "actions": [
          {
            "doc": "Create a new device.\n\n:param hostname: A hostname. If not given, one will be generated.\n:type hostname: unicode\n\n:param domain: The domain of the device. If not given the default\n    domain is used.\n:type domain: unicode\n\n:param mac_addresses: One or more MAC addresses for the device.\n:type mac_addresses: unicode\n\n:param parent: The system id of the parent.  Optional.\n:type parent: unicode",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List Nodes visible to the user, optionally filtered by criteria.\n\nNodes are sorted by id (i.e. most recent last) and grouped by type.\n\n:param hostname: An optional hostname. Only nodes relating to the node\n    with the matching hostname will be returned. This can be specified\n    multiple times to see multiple nodes.\n:type hostname: unicode\n\n:param mac_address: An optional MAC address. Only nodes relating to the\n    node owning the specified MAC address will be returned. This can be\n    specified multiple times to see multiple nodes.\n:type mac_address: unicode\n\n:param id: An optional list of system ids.  Only nodes relating to the\n    nodes with matching system ids will be returned.\n:type id: unicode\n\n:param domain: An optional name for a dns domain. Only nodes relating\n    to the nodes in the domain will be returned.\n:type domain: unicode\n\n:param zone: An optional name for a physical zone. Only nodes relating\n    to the nodes in the zone will be returned.\n:type zone: unicode\n\n:param agent_name: An optional agent name.  Only nodes relating to the\n    nodes with matching agent names will be returned.\n:type agent_name: unicode",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Assign multiple nodes to a physical zone at once.\n\n:param zone: Zone name.  If omitted, the zone is \"none\" and the nodes\n    will be taken out of their physical zones.\n:param nodes: system_ids of the nodes whose zones are to be set.\n   (An empty list is acceptable).\n\nRaises 403 if the user is not an admin.",
            "method": "POST",
            "name": "set_zone",
            "op": "set_zone",
            "restful": false
          }
        ],
        "doc": "Manage the collection of all the devices in the MAAS.",
        "name": "DevicesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/devices/",
        "uri": "http://localhost:5240/MAAS/api/2.0/devices/"
      },
      "name": "DevicesHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Lists all discovered devices which have an unknown IP address.\n\nFilters the list of discovered devices by excluding any discoveries\nwhere a known MAAS node is configured with the IP address of the\ndiscovery, or has been observed using it after it was assigned by\na MAAS-managed DHCP server.\n\nDiscoveries are listed in the order they were last observed on the\nnetwork (most recent first).",
            "method": "GET",
            "name": "by_unknown_ip",
            "op": "by_unknown_ip",
            "restful": false
          },
          {
            "doc": "Lists all discovered devices which are completely unknown to MAAS.\n\nFilters the list of discovered devices by excluding any discoveries\nwhere a known MAAS node is configured with either the MAC address or\nthe IP address of the discovery.\n\nDiscoveries are listed in the order they were last observed on the\nnetwork (most recent first).",
            "method": "GET",
            "name": "by_unknown_ip_and_mac",
            "op": "by_unknown_ip_and_mac",
            "restful": false
          },
          {
            "doc": "Lists all discovered devices which have an unknown IP address.\n\nFilters the list of discovered devices by excluding any discoveries\nwhere an interface known to MAAS is configured with MAC address of the\ndiscovery.\n\nDiscoveries are listed in the order they were last observed on the\nnetwork (most recent first).",
            "method": "GET",
            "name": "by_unknown_mac",
            "op": "by_unknown_mac",
            "restful": false
          },
          {
            "doc": "Deletes all discovered neighbours and/or mDNS entries.\n\n:param mdns: if True, deletes all mDNS entries.\n:param neighbours: if True, deletes all neighbour entries.\n:param all: if True, deletes all discovery data.",
            "method": "POST",
            "name": "clear",
            "op": "clear",
            "restful": false
          },
          {
            "doc": "Lists all the devices MAAS has discovered.\n\nDiscoveries are listed in the order they were last observed on the\nnetwork (most recent first).",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Immediately run a neighbour discovery scan on all rack networks.\n\nThis command causes each connected rack controller to execute the\n'maas-rack scan-network' command, which will scan all CIDRs configured\non the rack controller using 'nmap' (if it is installed) or 'ping'.\n\nNetwork discovery must not be set to 'disabled' for this command to be\nuseful.\n\nScanning will be started in the background, and could take a long time\non rack controllers that do not have 'nmap' installed and are connected\nto large networks.\n\nIf the call is a success, this method will return a dictionary of\nresults as follows:\n\nresult: A human-readable string summarizing the results.\nscan_attempted_on: A list of rack 'system_id' values where a scan\nwas attempted. (That is, an RPC connection was successful and a\nsubsequent call was intended.)\n\nfailed_to_connect_to: A list of rack 'system_id' values where the RPC\nconnection failed.\n\nscan_started_on: A list of rack 'system_id' values where a scan was\nsuccessfully started.\n\nscan_failed_on: A list of rack 'system_id' values where\na scan was attempted, but failed because a scan was already in\nprogress.\n\nrpc_call_timed_out_on: A list of rack 'system_id' values where the\nRPC connection was made, but the call timed out before a ten second\ntimeout elapsed.\n\n:param cidr: The subnet CIDR(s) to scan (can be specified multiple\n    times). If not specified, defaults to all networks.\n:param force: If True, will force the scan, even if all networks are\n    specified. (This may not be the best idea, depending on acceptable\n    use agreements, and the politics of the organization that owns the\n    network.) Default: False.\n:param always_use_ping: If True, will force the scan to use 'ping' even\n    if 'nmap' is installed. Default: False.\n:param slow: If True, and 'nmap' is being used, will limit the scan\n    to nine packets per second. If the scanner is 'ping', this option\n    has no effect. Default: False.\n:param threads: The number of threads to use during scanning. If 'nmap'\n    is the scanner, the default is one thread per 'nmap' process. If\n    'ping' is the scanner, the default is four threads per CPU.",
            "method": "POST",
            "name": "scan",
            "op": "scan",
            "restful": false
          }
        ],
        "doc": "Query observed discoveries.",
        "name": "DiscoveriesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/discovery/",
        "uri": "http://localhost:5240/MAAS/api/2.0/discovery/"
      },
      "name": "DiscoveriesHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": null,
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Read or delete an observed discovery.",
        "name": "DiscoveryHandler",
        "params": [
          "discovery_id"
        ],
        "path": "/MAAS/api/2.0/discovery/{discovery_id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/discovery/{discovery_id}/"
      },
      "name": "DiscoveryHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete domain.\n\nReturns 403 if the user does not have permission to update the\ndnsresource.\nReturns 404 if the domain is not found.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read domain.\n\nReturns 404 if the domain is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update domain.\n\n:param name: Name of the domain.\n:param authoritative: True if we are authoritative for this domain.\n:param ttl: The default TTL for this domain.\n\nReturns 403 if the user does not have permission to update the\ndnsresource.\nReturns 404 if the domain is not found.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage domain.",
        "name": "DomainHandler",
        "params": [
          "id"
        ],
        "path": "/MAAS/api/2.0/domains/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/domains/{id}/"
      },
      "name": "DomainHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a domain.\n\n:param name: Name of the domain.\n:param authoritative: Class type of the domain.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all domains.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Set the SOA serial number (for all DNS zones.)\n\n:param serial: serial number to use next.",
            "method": "POST",
            "name": "set_serial",
            "op": "set_serial",
            "restful": false
          }
        ],
        "doc": "Manage domains.",
        "name": "DomainsHandler",
        "params": [],
        "path": "/MAAS/api/2.0/domains/",
        "uri": "http://localhost:5240/MAAS/api/2.0/domains/"
      },
      "name": "DomainsHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "List Node events, optionally filtered by various criteria via\nURL query parameters.\n\n:param hostname: An optional hostname. Only events relating to the node\n    with the matching hostname will be returned. This can be specified\n    multiple times to get events relating to more than one node.\n:param mac_address: An optional list of MAC addresses.  Only\n    nodes with matching MAC addresses will be returned.\n:param id: An optional list of system ids.  Only nodes with\n    matching system ids will be returned.\n:param zone: An optional name for a physical zone. Only nodes in the\n    zone will be returned.\n:param agent_name: An optional agent name.  Only nodes with\n    matching agent names will be returned.\n:param level: Desired minimum log level of returned events. Returns\n    this level of events and greater. Choose from: CRITICAL, DEBUG, ERROR, INFO, WARNING.\n    The default is INFO.\n:param limit: Optional number of events to return. Default 100.\n    Maximum: 1000.\n:param before: Optional event id.  Defines where to start returning\n    older events.\n:param after: Optional event id.  Defines where to start returning\n    newer events.",
            "method": "GET",
            "name": "query",
            "op": "query",
            "restful": false
          }
        ],
        "doc": "Retrieve filtered node events.\n\nA specific Node's events is identified by specifying one or more\nids, hostnames, or mac addresses as a list.",
        "name": "EventsHandler",
        "params": [],
        "path": "/MAAS/api/2.0/events/",
        "uri": "http://localhost:5240/MAAS/api/2.0/events/"
      },
      "name": "EventsHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete fabric.\n\nReturns 404 if the fabric is not found.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read fabric.\n\nReturns 404 if the fabric is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update fabric.\n\n:param name: Name of the fabric.\n:param description: Description of the fabric.\n:param class_type: Class type of the fabric.\n\nReturns 404 if the fabric is not found.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage fabric.",
        "name": "FabricHandler",
        "params": [
          "id"
        ],
        "path": "/MAAS/api/2.0/fabrics/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/fabrics/{id}/"
      },
      "name": "FabricHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a fabric.\n\n:param name: Name of the fabric.\n:param description: Description of the fabric.\n:param class_type: Class type of the fabric.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all fabrics.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage fabrics.",
        "name": "FabricsHandler",
        "params": [],
        "path": "/MAAS/api/2.0/fabrics/",
        "uri": "http://localhost:5240/MAAS/api/2.0/fabrics/"
      },
      "name": "FabricsHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete fannetwork.\n\nReturns 404 if the fannetwork is not found.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read fannetwork.\n\nReturns 404 if the fannetwork is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update fannetwork.\n\n:param name: Name of the fannetwork.\n:param overlay: Overlay network\n:param underlay: Underlay network\n:param dhcp: confiugre dhcp server for overlay net\n:param host_reserve: number of IP addresses to reserve for host\n:param bridge: override bridge name\n:param off: put this int he config, but disable it.\n\nReturns 404 if the fannetwork is not found.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage Fan Network.",
        "name": "FanNetworkHandler",
        "params": [
          "id"
        ],
        "path": "/MAAS/api/2.0/fannetworks/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/fannetworks/{id}/"
      },
      "name": "FanNetworkHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a fannetwork.\n\n:param name: Name of the fannetwork.\n:param overlay: Overlay network\n:param underlay: Underlay network\n:param dhcp: confiugre dhcp server for overlay net\n:param host_reserve: number of IP addresses to reserve for host\n:param bridge: override bridge name\n:param off: put this int he config, but disable it.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all fannetworks.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage Fan Networks.",
        "name": "FanNetworksHandler",
        "params": [],
        "path": "/MAAS/api/2.0/fannetworks/",
        "uri": "http://localhost:5240/MAAS/api/2.0/fannetworks/"
      },
      "name": "FanNetworksHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete a FileStorage object.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "GET a FileStorage object as a json object.\n\nThe 'content' of the file is base64-encoded.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage a FileStorage object.\n\nThe file is identified by its filename and owner.",
        "name": "FileHandler",
        "params": [
          "filename"
        ],
        "path": "/MAAS/api/2.0/files/{filename}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/files/{filename}/"
      },
      "name": "FileHandler"
    },
    {
      "anon": {
        "actions": [
          {
            "doc": "Get a file from the file storage using its key.\n\n:param key: The exact key of the file you want to get.\n:type key: string\n:return: The file is returned in the response content.",
            "method": "GET",
            "name": "get_by_key",
            "op": "get_by_key",
            "restful": false
          }
        ],
        "doc": "Anonymous file operations.\n\nThis is needed for Juju. The story goes something like this:\n\n- The Juju provider will upload a file using an \"unguessable\" name.\n\n- The name of this file (or its URL) will be shared with all the agents in\n  the environment. They cannot modify the file, but they can access it\n  without credentials.",
        "name": "AnonFilesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/files/",
        "uri": "http://localhost:5240/MAAS/api/2.0/files/"
      },
      "auth": {
        "actions": [
          {
            "doc": "Add a new file to the file storage.\n\n:param filename: The file name to use in the storage.\n:type filename: string\n:param file: Actual file data with content type\n    application/octet-stream\n\nReturns 400 if any of these conditions apply:\n - The filename is missing from the parameters\n - The file data is missing\n - More than one file is supplied",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "Delete a FileStorage object.\n\n:param filename: The filename of the object to be deleted.\n:type filename: unicode",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Get a named file from the file storage.\n\n:param filename: The exact name of the file you want to get.\n:type filename: string\n:return: The file is returned in the response content.",
            "method": "GET",
            "name": "get",
            "op": "get",
            "restful": false
          },
          {
            "doc": "Get a file from the file storage using its key.\n\n:param key: The exact key of the file you want to get.\n:type key: string\n:return: The file is returned in the response content.",
            "method": "GET",
            "name": "get_by_key",
            "op": "get_by_key",
            "restful": false
          },
          {
            "doc": "List the files from the file storage.\n\nThe returned files are ordered by file name and the content is\nexcluded.\n\n:param prefix: Optional prefix used to filter out the returned files.\n:type prefix: string",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage the collection of all the files in this MAAS.",
        "name": "FilesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/files/",
        "uri": "http://localhost:5240/MAAS/api/2.0/files/"
      },
      "name": "FilesHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "List IP addresses known to MAAS.\n\nBy default, gets a listing of all IP addresses allocated to the\nrequesting user.\n\n:param ip: If specified, will only display information for the\n    specified IP address.\n:type ip: unicode (must be an IPv4 or IPv6 address)\n\nIf the requesting user is a MAAS administrator, the following options\nmay also be supplied:\n\n:param all: If True, all reserved IP addresses will be shown. (By\n    default, only addresses of type 'User reserved' that are assigned\n    to the requesting user are shown.)\n:type all: bool\n\n:param owner: If specified, filters the list to show only IP addresses\n    owned by the specified username.\n:type user: unicode",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Release an IP address that was previously reserved by the user.\n\n:param ip: The IP address to release.\n:type ip: unicode\n\n:param force: If True, allows a MAAS administrator to force an IP\n    address to be released, even if it is not a user-reserved IP\n    address or does not belong to the requesting user. Use with\n    caution.\n:type force: bool\n\nReturns 404 if the provided IP address is not found.",
            "method": "POST",
            "name": "release",
            "op": "release",
            "restful": false
          },
          {
            "doc": "Reserve an IP address for use outside of MAAS.\n\nReturns an IP adddress, which MAAS will not allow any of its known\nnodes to use; it is free for use by the requesting user until released\nby the user.\n\nThe user may supply either a subnet or a specific IP address within a\nsubnet.\n\n:param subnet: CIDR representation of the subnet on which the IP\n    reservation is required. e.g. 10.1.2.0/24\n:param ip: The IP address, which must be within\n    a known subnet.\n:param ip_address: (Deprecated.) Alias for 'ip' parameter. Provided\n    for backward compatibility.\n:param hostname: The hostname to use for the specified IP address.  If\n    no domain component is given, the default domain will be used.\n:param mac: The MAC address that should be linked to this reservation.\n\nReturns 400 if there is no subnet in MAAS matching the provided one,\nor a ip_address is supplied, but a corresponding subnet\ncould not be found.\nReturns 503 if there are no more IP addresses available.",
            "method": "POST",
            "name": "reserve",
            "op": "reserve",
            "restful": false
          }
        ],
        "doc": "Manage IP addresses allocated by MAAS.",
        "name": "IPAddressesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/ipaddresses/",
        "uri": "http://localhost:5240/MAAS/api/2.0/ipaddresses/"
      },
      "name": "IPAddressesHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete IP range.\n\nReturns 403 if not owner of IP range.\nReturns 404 if the IP range is not found.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read IP range.\n\nReturns 404 if the IP range is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update IP range.\n\n:param start_ip: Start IP address of this range (inclusive).\n:param end_ip: End IP address of this range (inclusive).\n:param comment: A description of this range. (optional)\n\nReturns 403 if not owner of IP range.\nReturns 404 if the IP Range is not found.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage IP range.",
        "name": "IPRangeHandler",
        "params": [
          "id"
        ],
        "path": "/MAAS/api/2.0/ipranges/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/ipranges/{id}/"
      },
      "name": "IPRangeHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create an IP range.\n\n:param type: Type of this range. (`dynamic` or `reserved`)\n:param start_ip: Start IP address of this range (inclusive).\n:param end_ip: End IP address of this range (inclusive).\n:param subnet: Subnet this range is associated with. (optional)\n:param comment: A description of this range. (optional)\n\nReturns 403 if standard users tries to create a dynamic IP range.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all IP ranges.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage IP ranges.",
        "name": "IPRangesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/ipranges/",
        "uri": "http://localhost:5240/MAAS/api/2.0/ipranges/"
      },
      "name": "IPRangesHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Add a tag to interface on a node.\n\n:param tag: The tag being added.\n\nReturns 404 if the node or interface is not found.\nReturns 403 if the user is not allowed to update the interface.",
            "method": "POST",
            "name": "add_tag",
            "op": "add_tag",
            "restful": false
          },
          {
            "doc": "Delete interface on node.\n\nReturns 404 if the node or interface is not found.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Disconnect an interface.\n\nDeletes any linked subnets and IP addresses, and disconnects the\ninterface from any associated VLAN.\n\nReturns 404 if the node or interface is not found.",
            "method": "POST",
            "name": "disconnect",
            "op": "disconnect",
            "restful": false
          },
          {
            "doc": "Link interface to a subnet.\n\n:param mode: AUTO, DHCP, STATIC or LINK_UP connection to subnet.\n:param subnet: Subnet linked to interface.\n:param ip_address: IP address for the interface in subnet. Only used\n    when mode is STATIC. If not provided an IP address from subnet\n    will be auto selected.\n:param force: If True, allows LINK_UP to be set on the interface\n    even if other links already exist. Also allows the selection of any\n    VLAN, even a VLAN MAAS does not believe the interface to currently\n    be on. Using this option will cause all other links on the\n    interface to be deleted. (Defaults to False.)\n:param default_gateway: True sets the gateway IP address for the subnet\n    as the default gateway for the node this interface belongs to.\n    Option can only be used with the AUTO and STATIC modes.\n\nMode definitions:\nAUTO - Assign this interface a static IP address from the provided\nsubnet. The subnet must be a managed subnet. The IP address will\nnot be assigned until the node goes to be deployed.\n\nDHCP - Bring this interface up with DHCP on the given subnet. Only\none subnet can be set to DHCP. If the subnet is managed this\ninterface will pull from the dynamic IP range.\n\nSTATIC - Bring this interface up with a STATIC IP address on the\ngiven subnet. Any number of STATIC links can exist on an interface.\n\nLINK_UP - Bring this interface up only on the given subnet. No IP\naddress will be assigned to this interface. The interface cannot\nhave any current AUTO, DHCP or STATIC links.\n\nReturns 404 if the node or interface is not found.",
            "method": "POST",
            "name": "link_subnet",
            "op": "link_subnet",
            "restful": false
          },
          {
            "doc": "Read interface on node.\n\nReturns 404 if the node or interface is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Remove a tag from interface on a node.\n\n:param tag: The tag being removed.\n\nReturns 404 if the node or interface is not found.\nReturns 403 if the user is not allowed to update the interface.",
            "method": "POST",
            "name": "remove_tag",
            "op": "remove_tag",
            "restful": false
          },
          {
            "doc": "Set the node to use this interface as the default gateway.\n\nIf this interface has more than one subnet with a gateway IP in the\nsame IP address family then specifying the ID of the link on\nthis interface is required.\n\n:param link_id: ID of the link on this interface to select the\n    default gateway IP address from.\n\nReturns 400 if the interface has not AUTO or STATIC links.\nReturns 404 if the node or interface is not found.",
            "method": "POST",
            "name": "set_default_gateway",
            "op": "set_default_gateway",
            "restful": false
          },
          {
            "doc": "Unlink interface to a subnet.\n\n:param id: ID of the link on the interface to remove.\n\nReturns 404 if the node or interface is not found.",
            "method": "POST",
            "name": "unlink_subnet",
            "op": "unlink_subnet",
            "restful": false
          },
          {
            "doc": "Update interface on node.\n\nMachines must has status of Ready or Broken to have access to all\noptions. Machines with Deployed status can only have the name and/or\nmac_address updated for an interface. This is intented to allow a bad\ninterface to be replaced while the machine remains deployed.\n\nFields for physical interface:\n\n:param name: Name of the interface.\n:param mac_address: MAC address of the interface.\n:param tags: Tags for the interface.\n:param vlan: Untagged VLAN the interface is connected to.  If not set\n    then the interface is considered disconnected.\n\nFields for bond interface:\n\n:param name: Name of the interface.\n:param mac_address: MAC address of the interface.\n:param tags: Tags for the interface.\n:param vlan: Untagged VLAN the interface is connected to.  If not set\n    then the interface is considered disconnected.\n:param parents: Parent interfaces that make this bond.\n\nFields for VLAN interface:\n\n:param tags: Tags for the interface.\n:param vlan: Tagged VLAN the interface is connected to.\n:param parent: Parent interface for this VLAN interface.\n\nFields for bridge interface:\n\n:param name: Name of the interface.\n:param mac_address: MAC address of the interface.\n:param tags: Tags for the interface.\n:param vlan: VLAN the interface is connected to.\n:param parent: Parent interface for this bridge interface.\n\nFollowing are extra parameters that can be set on all interface types:\n\n:param mtu: Maximum transmission unit.\n:param accept_ra: Accept router advertisements. (IPv6 only)\n:param autoconf: Perform stateless autoconfiguration. (IPv6 only)\n\nFollowing are parameters specific to bonds:\n\n:param bond-mode: The operating mode of the bond.\n    (Default: active-backup).\n:param bond-miimon: The link monitoring freqeuncy in milliseconds.\n    (Default: 100).\n:param bond-downdelay: Specifies the time, in milliseconds, to wait\n    before disabling a slave after a link failure has been detected.\n:param bond-updelay: Specifies the time, in milliseconds, to wait\n    before enabling a slave after a link recovery has been detected.\n:param bond-lacp_rate: Option specifying the rate in which we'll ask\n    our link partner to transmit LACPDU packets in 802.3ad mode.\n    Available options are fast or slow. (Default: slow).\n:param bond-xmit_hash_policy: The transmit hash policy to use for\n    slave selection in balance-xor, 802.3ad, and tlb modes.\n\nSupported bonding modes (bond-mode):\n\nbalance-rr - Transmit packets in sequential order from the first\navailable slave through the last.  This mode provides load balancing\nand fault tolerance.\n\nactive-backup - Only one slave in the bond is active.  A different\nslave becomes active if, and only if, the active slave fails.  The\nbond's MAC address is externally visible on only one port (network\nadapter) to avoid confusing the switch.\n\nbalance-xor - Transmit based on the selected transmit hash policy.\nThe default policy is a simple [(source MAC address XOR'd with\ndestination MAC address XOR packet type ID) modulo slave count].\n\nbroadcast - Transmits everything on all slave interfaces. This mode\nprovides fault tolerance.\n\n802.3ad - IEEE 802.3ad Dynamic link aggregation.  Creates aggregation\ngroups that share the same speed and duplex settings.  Utilizes all\nslaves in the active aggregator according to the 802.3ad specification.\n\nbalance-tlb - Adaptive transmit load balancing: channel bonding that\ndoes not require any special switch support.\n\nbalance-alb - Adaptive load balancing: includes balance-tlb plus\nreceive load balancing (rlb) for IPV4 traffic, and does not require any\nspecial switch support.  The receive load balancing is achieved by\nARP negotiation.\n\nFollowing are parameters specific to bridges:\n\n:param bridge_stp: Turn spanning tree protocol on or off.\n    (Default: False).\n:param bridge_fd: Set bridge forward delay to time seconds.\n    (Default: 15).\n\nReturns 404 if the node or interface is not found.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage a node's or device's interface.",
        "name": "InterfaceHandler",
        "params": [
          "system_id",
          "id"
        ],
        "path": "/MAAS/api/2.0/nodes/{system_id}/interfaces/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/{system_id}/interfaces/{id}/"
      },
      "name": "InterfaceHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a bond interface on a machine.\n\n:param name: Name of the interface.\n:param mac_address: MAC address of the interface.\n:param tags: Tags for the interface.\n:param vlan: VLAN the interface is connected to.  If not\n    provided then the interface is considered disconnected.\n:param parents: Parent interfaces that make this bond.\n\nFollowing are parameters specific to bonds:\n\n:param bond_mode: The operating mode of the bond.\n    (Default: active-backup).\n:param bond_miimon: The link monitoring freqeuncy in milliseconds.\n    (Default: 100).\n:param bond_downdelay: Specifies the time, in milliseconds, to wait\n    before disabling a slave after a link failure has been detected.\n:param bond_updelay: Specifies the time, in milliseconds, to wait\n    before enabling a slave after a link recovery has been detected.\n:param bond_lacp_rate: Option specifying the rate in which we'll ask\n    our link partner to transmit LACPDU packets in 802.3ad mode.\n    Available options are fast or slow. (Default: slow).\n:param bond_xmit_hash_policy: The transmit hash policy to use for\n    slave selection in balance-xor, 802.3ad, and tlb modes.\n    (Default: layer2)\n\nSupported bonding modes (bond-mode):\nbalance-rr - Transmit packets in sequential order from the first\navailable slave through the last.  This mode provides load balancing\nand fault tolerance.\n\nactive-backup - Only one slave in the bond is active.  A different\nslave becomes active if, and only if, the active slave fails.  The\nbond's MAC address is externally visible on only one port (network\nadapter) to avoid confusing the switch.\n\nbalance-xor - Transmit based on the selected transmit hash policy.\nThe default policy is a simple [(source MAC address XOR'd with\ndestination MAC address XOR packet type ID) modulo slave count].\n\nbroadcast - Transmits everything on all slave interfaces. This mode\nprovides fault tolerance.\n\n802.3ad - IEEE 802.3ad Dynamic link aggregation.  Creates aggregation\ngroups that share the same speed and duplex settings.  Utilizes all\nslaves in the active aggregator according to the 802.3ad specification.\n\nbalance-tlb - Adaptive transmit load balancing: channel bonding that\ndoes not require any special switch support.\n\nbalance-alb - Adaptive load balancing: includes balance-tlb plus\nreceive load balancing (rlb) for IPV4 traffic, and does not require any\nspecial switch support.  The receive load balancing is achieved by\nARP negotiation.\n\nFollowing are extra parameters that can be set on the interface:\n\n:param mtu: Maximum transmission unit.\n:param accept_ra: Accept router advertisements. (IPv6 only)\n:param autoconf: Perform stateless autoconfiguration. (IPv6 only)\n\nReturns 404 if the node is not found.",
            "method": "POST",
            "name": "create_bond",
            "op": "create_bond",
            "restful": false
          },
          {
            "doc": "Create a bridge interface on a machine.\n\n:param name: Name of the interface.\n:param mac_address: MAC address of the interface.\n:param tags: Tags for the interface.\n:param vlan: VLAN the interface is connected to.\n:param parent: Parent interface for this bridge interface.\n\nFollowing are parameters specific to bridges:\n\n:param bridge_stp: Turn spanning tree protocol on or off.\n    (Default: False).\n:param bridge_fd: Set bridge forward delay to time seconds.\n    (Default: 15).\n\nFollowing are extra parameters that can be set on the interface:\n\n:param mtu: Maximum transmission unit.\n:param accept_ra: Accept router advertisements. (IPv6 only)\n:param autoconf: Perform stateless autoconfiguration. (IPv6 only)\n\nReturns 404 if the node is not found.",
            "method": "POST",
            "name": "create_bridge",
            "op": "create_bridge",
            "restful": false
          },
          {
            "doc": "Create a physical interface on a machine and device.\n\n:param name: Name of the interface.\n:param mac_address: MAC address of the interface.\n:param tags: Tags for the interface.\n:param vlan: Untagged VLAN the interface is connected to.  If not\n    provided then the interface is considered disconnected.\n\nFollowing are extra parameters that can be set on the interface:\n\n:param mtu: Maximum transmission unit.\n:param accept_ra: Accept router advertisements. (IPv6 only)\n:param autoconf: Perform stateless autoconfiguration. (IPv6 only)\n\nReturns 404 if the node is not found.",
            "method": "POST",
            "name": "create_physical",
            "op": "create_physical",
            "restful": false
          },
          {
            "doc": "Create a VLAN interface on a machine.\n\n:param tags: Tags for the interface.\n:param vlan: Tagged VLAN the interface is connected to.\n:param parent: Parent interface for this VLAN interface.\n\nFollowing are extra parameters that can be set on the interface:\n\n:param mtu: Maximum transmission unit.\n:param accept_ra: Accept router advertisements. (IPv6 only)\n:param autoconf: Perform stateless autoconfiguration. (IPv6 only)\n\nReturns 404 if the node is not found.",
            "method": "POST",
            "name": "create_vlan",
            "op": "create_vlan",
            "restful": false
          },
          {
            "doc": "List all interfaces belonging to a machine, device, or\nrack controller.\n\nReturns 404 if the node is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage interfaces on a node.",
        "name": "InterfacesHandler",
        "params": [
          "system_id"
        ],
        "path": "/MAAS/api/2.0/nodes/{system_id}/interfaces/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/{system_id}/interfaces/"
      },
      "name": "InterfacesHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete license key.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read license key.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update license key.\n\n:param osystem: Operating system that the key belongs to.\n:param distro_series: OS release that the key belongs to.\n:param license_key: License key for osystem/distro_series combo.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage a license key.",
        "name": "LicenseKeyHandler",
        "params": [
          "osystem",
          "distro_series"
        ],
        "path": "/MAAS/api/2.0/license-key/{osystem}/{distro_series}",
        "uri": "http://localhost:5240/MAAS/api/2.0/license-key/{osystem}/{distro_series}"
      },
      "name": "LicenseKeyHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Define a license key.\n\n:param osystem: Operating system that the key belongs to.\n:param distro_series: OS release that the key belongs to.\n:param license_key: License key for osystem/distro_series combo.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List license keys.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage the license keys.",
        "name": "LicenseKeysHandler",
        "params": [],
        "path": "/MAAS/api/2.0/license-keys/",
        "uri": "http://localhost:5240/MAAS/api/2.0/license-keys/"
      },
      "name": "LicenseKeysHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Get a config value.\n\n:param name: The name of the config item to be retrieved.\n\nAvailable configuration items:\n\n:active_discovery_interval: Active subnet mapping interval.         When enabled, each rack will scan subnets enabled for active mapping. This helps ensure discovery information is accurate and complete.\n:boot_images_auto_import: Automatically import/refresh the boot images every 60 minutes.\n:commissioning_distro_series: Default Ubuntu release used for commissioning.\n:completed_intro: Marks if the initial intro has been completed..\n:curtin_verbose: Run the fast-path installer with higher verbosity. This provides more detail in the installation logs..\n:default_distro_series: Default OS release used for deployment.\n:default_dns_ttl: Default Time-To-Live for the DNS..         If no TTL value is specified at a more specific point this is how long DNS responses are valid, in seconds.\n:default_min_hwe_kernel: Default Minimum Kernel Version.         The default minimum kernel version used on all new and commissioned nodes.\n:default_osystem: Default operating system used for deployment.\n:default_storage_layout: Default storage layout.         Storage layout that is applied to a node when it is commissioned.        Available choices are: 'bcache' (Bcache layout), 'flat' (Flat layout), 'lvm' (LVM layout).\n:disk_erase_with_quick_erase: Use quick erase by default when erasing disks..         This is not a secure erase; it wipes only the beginning and end of each disk.\n:disk_erase_with_secure_erase: Use secure erase by default when erasing disks..         Will only be used on devices that support secure erase.  Other devices will fall back to full wipe or quick erase depending on the selected options.\n:dnssec_validation: Enable DNSSEC validation of upstream zones.         Only used when MAAS is running its own DNS server. This value is used as the value of 'dnssec_validation' in the DNS server config.\n:enable_analytics: Enable MAAS UI usage of Google Analytics. This helps the developers of MAAS to identify usage statistics to further development..\n:enable_disk_erasing_on_release: Erase nodes' disks prior to releasing..         Forces users to always erase disks when releasing.\n:enable_http_proxy: Enable the use of an APT and HTTP/HTTPS proxy.         Provision nodes to use the built-in HTTP proxy (or user specified proxy) for APT. MAAS also uses the proxy for downloading boot images.\n:enable_third_party_drivers: Enable the installation of proprietary drivers (i.e. HPVSA).\n:http_proxy: Proxy for APT and HTTP/HTTPS.         This will be passed onto provisioned nodes to use as a proxy for APT traffic. MAAS also uses the proxy for downloading boot images. If no URL is provided, the built-in MAAS proxy will be used.\n:kernel_opts: Boot parameters to pass to the kernel by default.\n:maas_name: MAAS name.\n:network_discovery: .         When enabled, MAAS will use passive techniques (such as listening to ARP requests and mDNS advertisements) to observe networks attached to rack controllers. Active subnet mapping will also be available to be enabled on the configured subnets.\n:ntp_external_only: Use external NTP servers only.         Configure all region controller hosts, rack controller hosts, and subsequently deployed machines to refer directly to the configured external NTP servers. Otherwise only region controller hosts will be configured to use those external NTP servers, rack contoller hosts will in turn refer to the regions' NTP servers, and deployed machines will refer to the racks' NTP servers.\n:ntp_servers: Addresses of NTP servers.         NTP servers, specified as IP addresses or hostnames delimited by commas and/or spaces, to be used as time references for MAAS itself, the machines MAAS deploys, and devices that make use of MAAS's DHCP services.\n:upstream_dns: Upstream DNS used to resolve domains not managed by this MAAS (space-separated IP addresses).         Only used when MAAS is running its own DNS server. This value is used as the value of 'forwarders' in the DNS server config.\n:windows_kms_host: Windows KMS activation host.         FQDN or IP address of the host that provides the KMS Windows activation service. (Only needed for Windows deployments using KMS activation.)",
            "method": "GET",
            "name": "get_config",
            "op": "get_config",
            "restful": false
          },
          {
            "doc": "Set a config value.\n\n:param name: The name of the config item to be set.\n:param value: The value of the config item to be set.\n\nAvailable configuration items:\n\n:active_discovery_interval: Active subnet mapping interval.         When enabled, each rack will scan subnets enabled for active mapping. This helps ensure discovery information is accurate and complete.\n:boot_images_auto_import: Automatically import/refresh the boot images every 60 minutes.\n:commissioning_distro_series: Default Ubuntu release used for commissioning.\n:completed_intro: Marks if the initial intro has been completed..\n:curtin_verbose: Run the fast-path installer with higher verbosity. This provides more detail in the installation logs..\n:default_distro_series: Default OS release used for deployment.\n:default_dns_ttl: Default Time-To-Live for the DNS..         If no TTL value is specified at a more specific point this is how long DNS responses are valid, in seconds.\n:default_min_hwe_kernel: Default Minimum Kernel Version.         The default minimum kernel version used on all new and commissioned nodes.\n:default_osystem: Default operating system used for deployment.\n:default_storage_layout: Default storage layout.         Storage layout that is applied to a node when it is commissioned.        Available choices are: 'bcache' (Bcache layout), 'flat' (Flat layout), 'lvm' (LVM layout).\n:disk_erase_with_quick_erase: Use quick erase by default when erasing disks..         This is not a secure erase; it wipes only the beginning and end of each disk.\n:disk_erase_with_secure_erase: Use secure erase by default when erasing disks..         Will only be used on devices that support secure erase.  Other devices will fall back to full wipe or quick erase depending on the selected options.\n:dnssec_validation: Enable DNSSEC validation of upstream zones.         Only used when MAAS is running its own DNS server. This value is used as the value of 'dnssec_validation' in the DNS server config.\n:enable_analytics: Enable MAAS UI usage of Google Analytics. This helps the developers of MAAS to identify usage statistics to further development..\n:enable_disk_erasing_on_release: Erase nodes' disks prior to releasing..         Forces users to always erase disks when releasing.\n:enable_http_proxy: Enable the use of an APT and HTTP/HTTPS proxy.         Provision nodes to use the built-in HTTP proxy (or user specified proxy) for APT. MAAS also uses the proxy for downloading boot images.\n:enable_third_party_drivers: Enable the installation of proprietary drivers (i.e. HPVSA).\n:http_proxy: Proxy for APT and HTTP/HTTPS.         This will be passed onto provisioned nodes to use as a proxy for APT traffic. MAAS also uses the proxy for downloading boot images. If no URL is provided, the built-in MAAS proxy will be used.\n:kernel_opts: Boot parameters to pass to the kernel by default.\n:maas_name: MAAS name.\n:network_discovery: .         When enabled, MAAS will use passive techniques (such as listening to ARP requests and mDNS advertisements) to observe networks attached to rack controllers. Active subnet mapping will also be available to be enabled on the configured subnets.\n:ntp_external_only: Use external NTP servers only.         Configure all region controller hosts, rack controller hosts, and subsequently deployed machines to refer directly to the configured external NTP servers. Otherwise only region controller hosts will be configured to use those external NTP servers, rack contoller hosts will in turn refer to the regions' NTP servers, and deployed machines will refer to the racks' NTP servers.\n:ntp_servers: Addresses of NTP servers.         NTP servers, specified as IP addresses or hostnames delimited by commas and/or spaces, to be used as time references for MAAS itself, the machines MAAS deploys, and devices that make use of MAAS's DHCP services.\n:upstream_dns: Upstream DNS used to resolve domains not managed by this MAAS (space-separated IP addresses).         Only used when MAAS is running its own DNS server. This value is used as the value of 'forwarders' in the DNS server config.\n:windows_kms_host: Windows KMS activation host.         FQDN or IP address of the host that provides the KMS Windows activation service. (Only needed for Windows deployments using KMS activation.)",
            "method": "POST",
            "name": "set_config",
            "op": "set_config",
            "restful": false
          }
        ],
        "doc": "Manage the MAAS server.",
        "name": "MaasHandler",
        "params": [],
        "path": "/MAAS/api/2.0/maas/",
        "uri": "http://localhost:5240/MAAS/api/2.0/maas/"
      },
      "name": "MaasHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Abort a machine's current operation.\n\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nThis currently only supports aborting of the 'Disk Erasing' operation.\n\nReturns 404 if the machine could not be found.\nReturns 403 if the user does not have permission to abort the\ncurrent operation.",
            "method": "POST",
            "name": "abort",
            "op": "abort",
            "restful": false
          },
          {
            "doc": "Clear any set default gateways on the machine.\n\nThis will clear both IPv4 and IPv6 gateways on the machine. This will\ntransition the logic of identifing the best gateway to MAAS. This logic\nis determined based the following criteria:\n\n1. Managed subnets over unmanaged subnets.\n2. Bond interfaces over physical interfaces.\n3. Machine's boot interface over all other interfaces except bonds.\n4. Physical interfaces over VLAN interfaces.\n5. Sticky IP links over user reserved IP links.\n6. User reserved IP links over auto IP links.\n\nIf the default gateways need to be specific for this machine you can\nset which interface and subnet's gateway to use when this machine is\ndeployed with the `interfaces set-default-gateway` API.\n\nReturns 404 if the machine could not be found.\nReturns 403 if the user does not have permission to clear the default\ngateways.",
            "method": "POST",
            "name": "clear_default_gateways",
            "op": "clear_default_gateways",
            "restful": false
          },
          {
            "doc": "Begin commissioning process for a machine.\n\n:param enable_ssh: Whether to enable SSH for the commissioning\n    environment using the user's SSH key(s).\n:type enable_ssh: bool ('0' for False, '1' for True)\n:param skip_networking: Whether to skip re-configuring the networking\n    on the machine after the commissioning has completed.\n:type skip_networking: bool ('0' for False, '1' for True)\n:param skip_storage: Whether to skip re-configuring the storage\n    on the machine after the commissioning has completed.\n:type skip_storage: bool ('0' for False, '1' for True)\n\nA machine in the 'ready', 'declared' or 'failed test' state may\ninitiate a commissioning cycle where it is checked out and tested\nin preparation for transitioning to the 'ready' state. If it is\nalready in the 'ready' state this is considered a re-commissioning\nprocess which is useful if commissioning tests were changed after\nit previously commissioned.\n\nReturns 404 if the machine is not found.",
            "method": "POST",
            "name": "commission",
            "op": "commission",
            "restful": false
          },
          {
            "doc": "Delete a specific Node.\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to delete the node.\nReturns 204 if the node is successfully deleted.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Deploy an operating system to a machine.\n\n:param user_data: If present, this blob of user-data to be made\n    available to the machines through the metadata service.\n:type user_data: base64-encoded unicode\n:param distro_series: If present, this parameter specifies the\n    OS release the machine will use.\n:type distro_series: unicode\n:param hwe_kernel: If present, this parameter specified the kernel to\n    be used on the machine\n:type hwe_kernel: unicode\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nIdeally we'd have MIME multipart and content-transfer-encoding etc.\ndeal with the encapsulation of binary data, but couldn't make it work\nwith the framework in reasonable time so went for a dumb, manual\nencoding instead.\n\nReturns 404 if the machine is not found.\nReturns 403 if the user does not have permission to start the machine.\nReturns 503 if the start-up attempted to allocate an IP address,\nand there were no IP addresses available on the relevant cluster\ninterface.",
            "method": "POST",
            "name": "deploy",
            "op": "deploy",
            "restful": false
          },
          {
            "doc": "Obtain various system details.\n\nFor example, LLDP and ``lshw`` XML dumps.\n\nReturns a ``{detail_type: xml, ...}`` map, where\n``detail_type`` is something like \"lldp\" or \"lshw\".\n\nNote that this is returned as BSON and not JSON. This is for\nefficiency, but mainly because JSON can't do binary content\nwithout applying additional encoding like base-64.\n\nReturns 404 if the node is not found.",
            "method": "GET",
            "name": "details",
            "op": "details",
            "restful": false
          },
          {
            "doc": "Exit rescue mode process for a machine.\n\nA machine in the 'rescue mode' state may exit the rescue mode\nprocess.\n\nReturns 404 if the machine is not found.\nReturns 403 if the user does not have permission to exit the\nrescue mode process for this machine.",
            "method": "POST",
            "name": "exit_rescue_mode",
            "op": "exit_rescue_mode",
            "restful": false
          },
          {
            "doc": "Return the rendered curtin configuration for the machine.\n\nReturns 404 if the machine could not be found.\nReturns 403 if the user does not have permission to get the curtin\nconfiguration.",
            "method": "GET",
            "name": "get_curtin_config",
            "op": "get_curtin_config",
            "restful": false
          },
          {
            "doc": "Mark a node as 'broken'.\n\nIf the node is allocated, release it first.\n\n:param comment: Optional comment for the event log. Will be\n    displayed on the node as an error description until marked fixed.\n:type comment: unicode\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to mark the node\nbroken.",
            "method": "POST",
            "name": "mark_broken",
            "op": "mark_broken",
            "restful": false
          },
          {
            "doc": "Mark a broken node as fixed and set its status as 'ready'.\n\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nReturns 404 if the machine is not found.\nReturns 403 if the user does not have permission to mark the machine\nfixed.",
            "method": "POST",
            "name": "mark_fixed",
            "op": "mark_fixed",
            "restful": false
          },
          {
            "doc": "Mount a special-purpose filesystem, like tmpfs.\n\n:param fstype: The filesystem type. This must be a filesystem that\n    does not require a block special device.\n:param mount_point: Path on the filesystem to mount.\n:param mount_option: Options to pass to mount(8).\n\nReturns 403 when the user is not permitted to mount the partition.",
            "method": "POST",
            "name": "mount_special",
            "op": "mount_special",
            "restful": false
          },
          {
            "doc": "Power off a node.\n\n:param stop_mode: An optional power off mode. If 'soft',\n    perform a soft power down if the node's power type supports\n    it, otherwise perform a hard power off. For all values other\n    than 'soft', and by default, perform a hard power off. A\n    soft power off generally asks the OS to shutdown the system\n    gracefully before powering off, while a hard power off\n    occurs immediately without any warning to the OS.\n:type stop_mode: unicode\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to stop the node.",
            "method": "POST",
            "name": "power_off",
            "op": "power_off",
            "restful": false
          },
          {
            "doc": "Turn on a node.\n\n:param user_data: If present, this blob of user-data to be made\n    available to the nodes through the metadata service.\n:type user_data: base64-encoded unicode\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nIdeally we'd have MIME multipart and content-transfer-encoding etc.\ndeal with the encapsulation of binary data, but couldn't make it work\nwith the framework in reasonable time so went for a dumb, manual\nencoding instead.\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to start the machine.\nReturns 503 if the start-up attempted to allocate an IP address,\nand there were no IP addresses available on the relevant cluster\ninterface.",
            "method": "POST",
            "name": "power_on",
            "op": "power_on",
            "restful": false
          },
          {
            "doc": "Obtain power parameters.\n\nThis method is reserved for admin users and returns a 403 if the\nuser is not one.\n\nThis returns the power parameters, if any, configured for a\nnode. For some types of power control this will include private\ninformation such as passwords and secret keys.\n\nReturns 404 if the node is not found.",
            "method": "GET",
            "name": "power_parameters",
            "op": "power_parameters",
            "restful": false
          },
          {
            "doc": "Query the power state of a node.\n\nSend a request to the node's power controller which asks it about\nthe node's state.  The reply to this could be delayed by up to\n30 seconds while waiting for the power controller to respond.\nUse this method sparingly as it ties up an appserver thread\nwhile waiting.\n\n:param system_id: The node to query.\n:return: a dict whose key is \"state\" with a value of one of\n    'on' or 'off'.\n\nReturns 404 if the node is not found.\nReturns node's power state.",
            "method": "GET",
            "name": "query_power_state",
            "op": "query_power_state",
            "restful": false
          },
          {
            "doc": "Read a specific Node.\n\nReturns 404 if the node is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Release a machine. Opposite of `Machines.allocate`.\n\n:param comment: Optional comment for the event log.\n:type comment: unicode\n:param erase: Erase the disk when releasing.\n:type erase: boolean\n:param secure_erase: Use the drive's secure erase feature if available.\n    In some cases this can be much faster than overwriting the drive.\n    Some drives implement secure erasure by overwriting themselves so\n    this could still be slow.\n:type secure_erase: boolean\n:param quick_erase: Wipe 1MiB at the start and at the end of the drive\n    to make data recovery inconvenient and unlikely to happen by\n    accident. This is not secure.\n:type quick_erase: boolean\n\nIf neither secure_erase nor quick_erase are specified, MAAS will\noverwrite the whole disk with null bytes. This can be very slow.\n\nIf both secure_erase and quick_erase are specified and the drive does\nNOT have a secure erase feature, MAAS will behave as if only\nquick_erase was specified.\n\nIf secure_erase is specified and quick_erase is NOT specified and the\ndrive does NOT have a secure erase feature, MAAS will behave as if\nsecure_erase was NOT specified, i.e. will overwrite the whole disk\nwith null bytes. This can be very slow.\n\nReturns 404 if the machine is not found.\nReturns 403 if the user doesn't have permission to release the machine.\nReturns 409 if the machine is in a state where it may not be released.",
            "method": "POST",
            "name": "release",
            "op": "release",
            "restful": false
          },
          {
            "doc": "Begin rescue mode process for a machine.\n\nA machine in the 'deployed' or 'broken' state may initiate the\nrescue mode process.\n\nReturns 404 if the machine is not found.\nReturns 403 if the user does not have permission to start the\nrescue mode process for this machine.",
            "method": "POST",
            "name": "rescue_mode",
            "op": "rescue_mode",
            "restful": false
          },
          {
            "doc": "Reset a machine's configuration to its initial state.\n\nReturns 404 if the machine is not found.\nReturns 403 if the user does not have permission to reset the machine.",
            "method": "POST",
            "name": "restore_default_configuration",
            "op": "restore_default_configuration",
            "restful": false
          },
          {
            "doc": "Reset a machine's networking options to its initial state.\n\nReturns 404 if the machine is not found.\nReturns 403 if the user does not have permission to reset the machine.",
            "method": "POST",
            "name": "restore_networking_configuration",
            "op": "restore_networking_configuration",
            "restful": false
          },
          {
            "doc": "Reset a machine's storage options to its initial state.\n\nReturns 404 if the machine is not found.\nReturns 403 if the user does not have permission to reset the machine.",
            "method": "POST",
            "name": "restore_storage_configuration",
            "op": "restore_storage_configuration",
            "restful": false
          },
          {
            "doc": "Set key/value data for the current owner.\n\nPass any key/value data to this method to add, modify, or remove. A key\nis removed when the value for that key is set to an empty string.\n\nThis operation will not remove any previous keys unless explicitly\npassed with an empty string. All owner data is removed when the machine\nis no longer allocated to a user.\n\nReturns 404 if the machine is not found.\nReturns 403 if the user does not have permission.",
            "method": "POST",
            "name": "set_owner_data",
            "op": "set_owner_data",
            "restful": false
          },
          {
            "doc": "Changes the storage layout on the machine.\n\nThis can only be preformed on an allocated machine.\n\nNote: This will clear the current storage layout and any extra\nconfiguration and replace it will the new layout.\n\n:param storage_layout: Storage layout for the machine. (flat, lvm,\n    and bcache)\n\nThe following are optional for all layouts:\n\n:param boot_size: Size of the boot partition.\n:param root_size: Size of the root partition.\n:param root_device: Physical block device to place the root partition.\n\nThe following are optional for LVM:\n\n:param vg_name: Name of created volume group.\n:param lv_name: Name of created logical volume.\n:param lv_size: Size of created logical volume.\n\nThe following are optional for Bcache:\n\n:param cache_device: Physical block device to use as the cache device.\n:param cache_mode: Cache mode for bcache device. (writeback,\n    writethrough, writearound)\n:param cache_size: Size of the cache partition to create on the cache\n    device.\n:param cache_no_part: Don't create a partition on the cache device.\n    Use the entire disk as the cache device.\n\nReturns 400 if the machine is currently not allocated.\nReturns 404 if the machine could not be found.\nReturns 403 if the user does not have permission to set the storage\nlayout.",
            "method": "POST",
            "name": "set_storage_layout",
            "op": "set_storage_layout",
            "restful": false
          },
          {
            "doc": "Unmount a special-purpose filesystem, like tmpfs.\n\n:param mount_point: Path on the filesystem to unmount.\n\nReturns 403 when the user is not permitted to unmount the partition.",
            "method": "POST",
            "name": "unmount_special",
            "op": "unmount_special",
            "restful": false
          },
          {
            "doc": "Update a specific Machine.\n\n:param hostname: The new hostname for this machine.\n:type hostname: unicode\n\n:param domain: The domain for this machine. If not given the default\n    domain is used.\n:type domain: unicode\n\n:param architecture: The new architecture for this machine.\n:type architecture: unicode\n\n:param min_hwe_kernel: A string containing the minimum kernel version\n    allowed to be ran on this machine.\n:type min_hwe_kernel: unicode\n\n:param power_type: The new power type for this machine. If you use the\n    default value, power_parameters will be set to the empty string.\n    Available to admin users.\n    See the `Power types`_ section for a list of the available power\n    types.\n:type power_type: unicode\n\n:param power_parameters_{param1}: The new value for the 'param1'\n    power parameter.  Note that this is dynamic as the available\n    parameters depend on the selected value of the Machine's\n    power_type.  Available to admin users. See the `Power types`_\n    section for a list of the available power parameters for each\n    power type.\n:type power_parameters_{param1}: unicode\n\n:param power_parameters_skip_check: Whether or not the new power\n    parameters for this machine should be checked against the expected\n    power parameters for the machine's power type ('true' or 'false').\n    The default is 'false'.\n:type power_parameters_skip_check: unicode\n\n:param zone: Name of a valid physical zone in which to place this\n    machine.\n:type zone: unicode\n\n:param swap_size: Specifies the size of the swap file, in bytes. Field\n    accept K, M, G and T suffixes for values expressed respectively in\n    kilobytes, megabytes, gigabytes and terabytes.\n:type swap_size: unicode\n\n:param disable_ipv4: Deprecated.  If specified, must be False.\n:type disable_ipv4: boolean\n\n:param cpu_count: The amount of CPU cores the machine has.\n:type cpu_count: integer\n\n:param memory: How much memory the machine has.\n:type memory: unicode\n\nReturns 404 if the machine is not found.\nReturns 403 if the user does not have permission to update the machine.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage an individual Machine.\n\nThe Machine is identified by its system_id.",
        "name": "MachineHandler",
        "params": [
          "system_id"
        ],
        "path": "/MAAS/api/2.0/machines/{system_id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/machines/{system_id}/"
      },
      "name": "MachineHandler"
    },
    {
      "anon": {
        "actions": [
          {
            "doc": "Accept a machine's enlistment: not allowed to anonymous users.\n\nAlways returns 401.",
            "method": "POST",
            "name": "accept",
            "op": "accept",
            "restful": false
          },
          {
            "doc": "Create a new Machine.\n\nAdding a server to a MAAS puts it on a path that will wipe its disks\nand re-install its operating system, in the event that it PXE boots.\nIn anonymous enlistment (and when the enlistment is done by a\nnon-admin), the machine is held in the \"New\" state for approval by a\nMAAS admin.\n\nThe minimum data required is:\narchitecture=<arch string> (e.g. \"i386/generic\")\nmac_addresses=<value> (e.g. \"aa:bb:cc:dd:ee:ff\")\n\n:param architecture: A string containing the architecture type of\n    the machine. (For example, \"i386\", or \"amd64\".) To determine the\n    supported architectures, use the boot-resources endpoint.\n:type architecture: unicode\n\n:param min_hwe_kernel: A string containing the minimum kernel version\n    allowed to be ran on this machine.\n:type min_hwe_kernel: unicode\n\n:param subarchitecture: A string containing the subarchitecture type\n    of the machine. (For example, \"generic\" or \"hwe-t\".) To determine\n    the supported subarchitectures, use the boot-resources endpoint.\n:type subarchitecture: unicode\n\n:param mac_addresses: One or more MAC addresses for the machine. To\n    specify more than one MAC address, the parameter must be specified\n    twice. (such as \"machines new mac_addresses=01:02:03:04:05:06\n    mac_addresses=02:03:04:05:06:07\")\n:type mac_addresses: unicode\n\n:param hostname: A hostname. If not given, one will be generated.\n:type hostname: unicode\n\n:param domain: The domain of the machine. If not given the default\n    domain is used.\n:type domain: unicode\n\n:param power_type: A power management type, if applicable (e.g.\n    \"virsh\", \"ipmi\").\n:type power_type:unicode\n\n:param power_parameters_{param}: The parameter(s) for the power_type.\n    Note that this is dynamic as the available parameters depend on\n    the selected value of the Machine's power_type. `Power types`_\n    section for a list of the available power parameters for each\n    power type.\n:type power_parameters_{param1}: unicode",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "Returns whether or not the given MAC address is registered within\nthis MAAS (and attached to a non-retired node).\n\n:param mac_address: The mac address to be checked.\n:type mac_address: unicode\n:return: 'true' or 'false'.\n:rtype: unicode\n\nReturns 400 if any mandatory parameters are missing.",
            "method": "GET",
            "name": "is_registered",
            "op": "is_registered",
            "restful": false
          }
        ],
        "doc": "Anonymous access to Machines.",
        "name": "AnonMachinesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/machines/",
        "uri": "http://localhost:5240/MAAS/api/2.0/machines/"
      },
      "auth": {
        "actions": [
          {
            "doc": "Accept declared machines into the MAAS.\n\nMachines can be enlisted in the MAAS anonymously or by non-admin users,\nas opposed to by an admin.  These machines are held in the New\nstate; a MAAS admin must first verify the authenticity of these\nenlistments, and accept them.\n\nEnlistments can be accepted en masse, by passing multiple machines to\nthis call.  Accepting an already accepted machine is not an error, but\naccepting one that is already allocated, broken, etc. is.\n\n:param machines: system_ids of the machines whose enlistment is to be\n    accepted.  (An empty list is acceptable).\n:return: The system_ids of any machines that have their status changed\n    by this call.  Thus, machines that were already accepted are\n    excluded from the result.\n\nReturns 400 if any of the machines do not exist.\nReturns 403 if the user is not an admin.",
            "method": "POST",
            "name": "accept",
            "op": "accept",
            "restful": false
          },
          {
            "doc": "Accept all declared machines into the MAAS.\n\nMachines can be enlisted in the MAAS anonymously or by non-admin users,\nas opposed to by an admin.  These machines are held in the New\nstate; a MAAS admin must first verify the authenticity of these\nenlistments, and accept them.\n\n:return: Representations of any machines that have their status changed\n    by this call.  Thus, machines that were already accepted are\n    excluded from the result.",
            "method": "POST",
            "name": "accept_all",
            "op": "accept_all",
            "restful": false
          },
          {
            "doc": "Add special hardware types.\n\n:param chassis_type: The type of hardware.\n    mscm is the type for the Moonshot Chassis Manager.\n    msftocs is the type for the Microsoft OCS Chassis Manager.\n    powerkvm is the type for Virtual Machines on Power KVM,\n    managed by Virsh.\n    seamicro15k is the type for the Seamicro 1500 Chassis.\n    ucsm is the type for the Cisco UCS Manager.\n    virsh is the type for virtual machines managed by Virsh.\n    vmware is the type for virtual machines managed by VMware.\n:type chassis_type: unicode\n\n:param hostname: The URL, hostname, or IP address to access the\n    chassis.\n:type url: unicode\n\n:param username: The username used to access the chassis. This field\n    is required for the seamicro15k, vmware, mscm, msftocs, and ucsm\n    chassis types.\n:type username: unicode\n\n:param password: The password used to access the chassis. This field\n    is required for the seamicro15k, vmware, mscm, msftocs, and ucsm\n    chassis types.\n:type password: unicode\n\n:param accept_all: If true, all enlisted machines will be\n    commissioned.\n:type accept_all: unicode\n\n:param rack_controller: The system_id of the rack controller to send\n    the add chassis command through. If none is specifed MAAS will\n    automatically determine the rack controller to use.\n:type rack_controller: unicode\n\n:param domain: The domain that each new machine added should use.\n:type domain: unicode\n\nThe following are optional if you are adding a virsh, vmware, or\npowerkvm chassis:\n\n:param prefix_filter: Filter machines with supplied prefix.\n:type prefix_filter: unicode\n\nThe following are optional if you are adding a seamicro15k chassis:\n\n:param power_control: The power_control to use, either ipmi (default),\n    restapi, or restapi2.\n:type power_control: unicode\n\nThe following are optional if you are adding a vmware or msftocs\nchassis.\n\n:param port: The port to use when accessing the chassis.\n:type port: integer\n\nThe following are optioanl if you are adding a vmware chassis:\n\n:param protocol: The protocol to use when accessing the VMware\n    chassis (default: https).\n:type protocol: unicode\n\n:return: A string containing the chassis powered on by which rack\n    controller.\n\nReturns 404 if no rack controller can be found which has access to the\ngiven URL.\nReturns 403 if the user does not have access to the rack controller.\nReturns 400 if the required parameters were not passed.",
            "method": "POST",
            "name": "add_chassis",
            "op": "add_chassis",
            "restful": false
          },
          {
            "doc": "Allocate an available machine for deployment.\n\nConstraints parameters can be used to allocate a machine that possesses\ncertain characteristics.  All the constraints are optional and when\nmultiple constraints are provided, they are combined using 'AND'\nsemantics.\n\n:param name: Hostname or FQDN of the desired machine. If a FQDN is\n    specified, both the domain and the hostname portions must match.\n:type name: unicode\n:param system_id: system_id of the desired machine.\n:type system_id: unicode\n:param arch: Architecture of the returned machine (e.g. 'i386/generic',\n    'amd64', 'armhf/highbank', etc.).\n\n    If multiple architectures are specified, the machine to acquire may\n    match any of the given architectures. To request multiple\n    architectures, this parameter must be repeated in the request with\n    each value.\n:type arch: unicode (accepts multiple)\n:param cpu_count: Minimum number of CPUs a returned machine must have.\n\n    A machine with additional CPUs may be allocated if there is no\n    exact match, or if the 'mem' constraint is not also specified.\n:type cpu_count: positive integer\n:param mem: The minimum amount of memory (expressed in MB) the\n     returned machine must have. A machine with additional memory may\n     be allocated if there is no exact match, or the 'cpu_count'\n     constraint is not also specified.\n:type mem: positive integer\n:param tags: Tags the machine must match in order to be acquired.\n\n    If multiple tag names are specified, the machine must be\n    tagged with all of them. To request multiple tags, this parameter\n    must be repeated in the request with each value.\n:type tags: unicode (accepts multiple)\n:param not_tags: Tags the machine must NOT match.\n\n    If multiple tag names are specified, the machine must NOT be\n    tagged with ANY of them. To request exclusion of multiple tags,\n    this parameter must be repeated in the request with each value.\n:type tags: unicode (accepts multiple)\n:param zone: Physical zone name the machine must be located in.\n:type zone: unicode\n:type not_in_zone: List of physical zones from which the machine must\n    not be acquired.\n\n    If multiple zones are specified, the machine must NOT be\n    associated with ANY of them. To request multiple zones to\n    exclude, this parameter must be repeated in the request with each\n    value.\n:type not_in_zone: unicode (accepts multiple)\n:param subnets: Subnets that must be linked to the machine.\n\n    \"Linked to\" means the node must be configured to acquire an address\n    in the specified subnet, have a static IP address in the specified\n    subnet, or have been observed to DHCP from the specified subnet\n    during commissioning time (which implies that it *could* have an\n    address on the specified subnet).\n\n    Subnets can be specified by one of the following criteria:\n\n    - <id>: match the subnet by its 'id' field\n    - fabric:<fabric-spec>: match all subnets in a given fabric.\n    - ip:<ip-address>: Match the subnet containing <ip-address> with\n      the with the longest-prefix match.\n    - name:<subnet-name>: Match a subnet with the given name.\n    - space:<space-spec>: Match all subnets in a given space.\n    - vid:<vid-integer>: Match a subnet on a VLAN with the specified\n      VID. Valid values range from 0 through 4094 (inclusive). An\n      untagged VLAN can be specified by using the value \"0\".\n    - vlan:<vlan-spec>: Match all subnets on the given VLAN.\n\n    Note that (as of this writing), the 'fabric', 'space', 'vid', and\n    'vlan' specifiers are only useful for the 'not_spaces' version of\n    this constraint, because they will most likely force the query\n    to match ALL the subnets in each fabric, space, or VLAN, and thus\n    not return any nodes. (This is not a particularly useful behavior,\n    so may be changed in the future.)\n\n    If multiple subnets are specified, the machine must be associated\n    with all of them. To request multiple subnets, this parameter must\n    be repeated in the request with each value.\n\n    Note that this replaces the leagcy 'networks' constraint in MAAS\n    1.x.\n:type subnets: unicode (accepts multiple)\n:param not_subnets: Subnets that must NOT be linked to the machine.\n\n    See the 'subnets' constraint documentation above for more\n    information about how each subnet can be specified.\n\n    If multiple subnets are specified, the machine must NOT be\n    associated with ANY of them. To request multiple subnets to\n    exclude, this parameter must be repeated in the request with each\n    value. (Or a fabric, space, or VLAN specifier may be used to match\n    multiple subnets).\n\n    Note that this replaces the leagcy 'not_networks' constraint in\n    MAAS 1.x.\n:type not_subnets: unicode (accepts multiple)\n:param storage: A list of storage constraint identifiers, in the form:\n    <label>:<size>(<tag>[,<tag>[,...])][,<label>:...]\n:type storage: unicode\n:param interfaces: A labeled constraint map associating constraint\n    labels with interface properties that should be matched. Returned\n    nodes must have one or more interface matching the specified\n    constraints. The labeled constraint map must be in the format:\n    ``<label>:<key>=<value>[,<key2>=<value2>[,...]]``\n\n    Each key can be one of the following:\n\n    - id: Matches an interface with the specific id\n    - fabric: Matches an interface attached to the specified fabric.\n    - fabric_class: Matches an interface attached to a fabric\n      with the specified class.\n    - ip: Matches an interface with the specified IP address\n      assigned to it.\n    - mode: Matches an interface with the specified mode. (Currently,\n      the only supported mode is \"unconfigured\".)\n    - name: Matches an interface with the specified name.\n      (For example, \"eth0\".)\n    - hostname: Matches an interface attached to the node with\n      the specified hostname.\n    - subnet: Matches an interface attached to the specified subnet.\n    - space: Matches an interface attached to the specified space.\n    - subnet_cidr: Matches an interface attached to the specified\n      subnet CIDR. (For example, \"192.168.0.0/24\".)\n    - type: Matches an interface of the specified type. (Valid\n      types: \"physical\", \"vlan\", \"bond\", \"bridge\", or \"unknown\".)\n    - vlan: Matches an interface on the specified VLAN.\n    - vid: Matches an interface on a VLAN with the specified VID.\n    - tag: Matches an interface tagged with the specified tag.\n:type interfaces: unicode\n:param fabrics: Set of fabrics that the machine must be associated with\n    in order to be acquired.\n\n    If multiple fabrics names are specified, the machine can be\n    in any of the specified fabrics. To request multiple possible\n    fabrics to match, this parameter must be repeated in the request\n    with each value.\n:type fabrics: unicode (accepts multiple)\n:param not_fabrics: Fabrics the machine must NOT be associated with in\n    order to be acquired.\n\n    If multiple fabrics names are specified, the machine must NOT be\n    in ANY of them. To request exclusion of multiple fabrics, this\n    parameter must be repeated in the request with each value.\n:type not_fabrics: unicode (accepts multiple)\n:param fabric_classes: Set of fabric class types whose fabrics the\n    machine must be associated with in order to be acquired.\n\n    If multiple fabrics class types are specified, the machine can be\n    in any matching fabric. To request multiple possible fabrics class\n    types to match, this parameter must be repeated in the request\n    with each value.\n:type fabric_classes: unicode (accepts multiple)\n:param not_fabric_classes: Fabric class types whose fabrics the machine\n    must NOT be associated with in order to be acquired.\n\n    If multiple fabrics names are specified, the machine must NOT be\n    in ANY of them. To request exclusion of multiple fabrics, this\n    parameter must be repeated in the request with each value.\n:type not_fabric_classes: unicode (accepts multiple)\n:param agent_name: An optional agent name to attach to the\n    acquired machine.\n:type agent_name: unicode\n:param comment: Optional comment for the event log.\n:type comment: unicode\n:param bridge_all: Optionally create a bridge interface for every\n    configured interface on the machine. The created bridges will be\n    removed once the machine is released.\n    (Default: False)\n:type bridge_all: boolean\n:param bridge_stp: Optionally turn spanning tree protocol on or off\n    for the bridges created on every configured interface.\n    (Default: off)\n:type bridge_stp: boolean\n:param bridge_fd: Optionally adjust the forward delay to time seconds.\n    (Default: 15)\n:type bridge_fd: integer\n:param dry_run: Optional boolean to indicate that the machine should\n    not actually be acquired (this is for support/troubleshooting, or\n    users who want to see which machine would match a constraint,\n    without acquiring a machine). Defaults to False.\n:type dry_run: bool\n:param verbose: Optional boolean to indicate that the user would like\n    additional verbosity in the constraints_by_type field (each\n    constraint will be prefixed by `verbose_`, and contain the full\n    data structure that indicates which machine(s) matched).\n:type verbose: bool\n\nReturns 409 if a suitable machine matching the constraints could not be\nfound.",
            "method": "POST",
            "name": "allocate",
            "op": "allocate",
            "restful": false
          },
          {
            "doc": "Create a new Machine.\n\nAdding a server to MAAS puts it on a path that will wipe its disks\nand re-install its operating system, in the event that it PXE boots.\nIn anonymous enlistment (and when the enlistment is done by a\nnon-admin), the machine is held in the \"New\" state for approval by a\nMAAS admin.\n\nThe minimum data required is:\narchitecture=<arch string> (e.g. \"i386/generic\")\nmac_addresses=<value> (e.g. \"aa:bb:cc:dd:ee:ff\")\n\n:param architecture: A string containing the architecture type of\n    the machine. (For example, \"i386\", or \"amd64\".) To determine the\n    supported architectures, use the boot-resources endpoint.\n:type architecture: unicode\n\n:param min_hwe_kernel: A string containing the minimum kernel version\n    allowed to be ran on this machine.\n:type min_hwe_kernel: unicode\n\n:param subarchitecture: A string containing the subarchitecture type\n    of the machine. (For example, \"generic\" or \"hwe-t\".) To determine\n    the supported subarchitectures, use the boot-resources endpoint.\n:type subarchitecture: unicode\n\n:param mac_addresses: One or more MAC addresses for the machine. To\n    specify more than one MAC address, the parameter must be specified\n    twice. (such as \"machines new mac_addresses=01:02:03:04:05:06\n    mac_addresses=02:03:04:05:06:07\")\n:type mac_addresses: unicode\n\n:param hostname: A hostname. If not given, one will be generated.\n:type hostname: unicode\n\n:param domain: The domain of the machine. If not given the default\n    domain is used.\n:type domain: unicode\n\n:param power_type: A power management type, if applicable (e.g.\n    \"virsh\", \"ipmi\").\n:type power_type: unicode",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "Fetch Machines that were allocated to the User/oauth token.",
            "method": "GET",
            "name": "list_allocated",
            "op": "list_allocated",
            "restful": false
          },
          {
            "doc": "Retrieve power parameters for multiple machines.\n\n:param id: An optional list of system ids.  Only machines with\n    matching system ids will be returned.\n:type id: iterable\n\n:return: A dictionary of power parameters, keyed by machine system_id.\n\nRaises 403 if the user is not an admin.",
            "method": "GET",
            "name": "power_parameters",
            "op": "power_parameters",
            "restful": false
          },
          {
            "doc": "List Nodes visible to the user, optionally filtered by criteria.\n\nNodes are sorted by id (i.e. most recent last) and grouped by type.\n\n:param hostname: An optional hostname. Only nodes relating to the node\n    with the matching hostname will be returned. This can be specified\n    multiple times to see multiple nodes.\n:type hostname: unicode\n\n:param mac_address: An optional MAC address. Only nodes relating to the\n    node owning the specified MAC address will be returned. This can be\n    specified multiple times to see multiple nodes.\n:type mac_address: unicode\n\n:param id: An optional list of system ids.  Only nodes relating to the\n    nodes with matching system ids will be returned.\n:type id: unicode\n\n:param domain: An optional name for a dns domain. Only nodes relating\n    to the nodes in the domain will be returned.\n:type domain: unicode\n\n:param zone: An optional name for a physical zone. Only nodes relating\n    to the nodes in the zone will be returned.\n:type zone: unicode\n\n:param agent_name: An optional agent name.  Only nodes relating to the\n    nodes with matching agent names will be returned.\n:type agent_name: unicode",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Release multiple machines.\n\nThis places the machines back into the pool, ready to be reallocated.\n\n:param machines: system_ids of the machines which are to be released.\n   (An empty list is acceptable).\n:param comment: Optional comment for the event log.\n:type comment: unicode\n:return: The system_ids of any machines that have their status\n    changed by this call. Thus, machines that were already released\n    are excluded from the result.\n\nReturns 400 if any of the machines cannot be found.\nReturns 403 if the user does not have permission to release any of\nthe machines.\nReturns a 409 if any of the machines could not be released due to their\ncurrent state.",
            "method": "POST",
            "name": "release",
            "op": "release",
            "restful": false
          },
          {
            "doc": "Assign multiple nodes to a physical zone at once.\n\n:param zone: Zone name.  If omitted, the zone is \"none\" and the nodes\n    will be taken out of their physical zones.\n:param nodes: system_ids of the nodes whose zones are to be set.\n   (An empty list is acceptable).\n\nRaises 403 if the user is not an admin.",
            "method": "POST",
            "name": "set_zone",
            "op": "set_zone",
            "restful": false
          }
        ],
        "doc": "Manage the collection of all the machines in the MAAS.",
        "name": "MachinesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/machines/",
        "uri": "http://localhost:5240/MAAS/api/2.0/machines/"
      },
      "name": "MachinesHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Connect the given MAC addresses to this network.\n\nThis endpoint is no longer available. Use the 'subnet' endpoint\ninstead.",
            "method": "POST",
            "name": "connect_macs",
            "op": "connect_macs",
            "restful": false
          },
          {
            "doc": "Delete network definition.\n\nThis endpoint is no longer available. Use the 'subnet' endpoint\ninstead.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Disconnect the given MAC addresses from this network.\n\nThis endpoint is no longer available. Use the 'subnet' endpoint\ninstead.",
            "method": "POST",
            "name": "disconnect_macs",
            "op": "disconnect_macs",
            "restful": false
          },
          {
            "doc": "Returns the list of MAC addresses connected to this network.\n\nOnly MAC addresses for nodes visible to the requesting user are\nreturned.",
            "method": "GET",
            "name": "list_connected_macs",
            "op": "list_connected_macs",
            "restful": false
          },
          {
            "doc": "Read network definition.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update network definition.\n\nThis endpoint is no longer available. Use the 'subnet' endpoint\ninstead.\n\n:param name: A simple name for the network, to make it easier to\n    refer to.  Must consist only of letters, digits, dashes, and\n    underscores.\n:param ip: Base IP address for the network, e.g. `10.1.0.0`.  The host\n    bits will be zeroed.\n:param netmask: Subnet mask to indicate which parts of an IP address\n    are part of the network address.  For example, `255.255.255.0`.\n:param vlan_tag: Optional VLAN tag: a number between 1 and 0xffe (4094)\n    inclusive, or zero for an untagged network.\n:param description: Detailed description of the network for the benefit\n    of users and administrators.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage a network.\n\nThis endpoint is deprecated. Use the new 'subnet' endpoint instead.",
        "name": "NetworkHandler",
        "params": [
          "name"
        ],
        "path": "/MAAS/api/2.0/networks/{name}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/networks/{name}/"
      },
      "name": "NetworkHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Define a network.\n\nThis endpoint is no longer available. Use the 'subnets' endpoint\ninstead.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List networks.\n\n:param node: Optionally, nodes which must be attached to any returned\n    networks.  If more than one node is given, the result will be\n    restricted to networks that these nodes have in common.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage the networks.\n\nThis endpoint is deprecated. Use the new 'subnets' endpoint instead.",
        "name": "NetworksHandler",
        "params": [],
        "path": "/MAAS/api/2.0/networks/",
        "uri": "http://localhost:5240/MAAS/api/2.0/networks/"
      },
      "name": "NetworksHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete a specific Node.\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to delete the node.\nReturns 204 if the node is successfully deleted.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Obtain various system details.\n\nFor example, LLDP and ``lshw`` XML dumps.\n\nReturns a ``{detail_type: xml, ...}`` map, where\n``detail_type`` is something like \"lldp\" or \"lshw\".\n\nNote that this is returned as BSON and not JSON. This is for\nefficiency, but mainly because JSON can't do binary content\nwithout applying additional encoding like base-64.\n\nReturns 404 if the node is not found.",
            "method": "GET",
            "name": "details",
            "op": "details",
            "restful": false
          },
          {
            "doc": "Obtain power parameters.\n\nThis method is reserved for admin users and returns a 403 if the\nuser is not one.\n\nThis returns the power parameters, if any, configured for a\nnode. For some types of power control this will include private\ninformation such as passwords and secret keys.\n\nReturns 404 if the node is not found.",
            "method": "GET",
            "name": "power_parameters",
            "op": "power_parameters",
            "restful": false
          },
          {
            "doc": "Read a specific Node.\n\nReturns 404 if the node is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage an individual Node.\n\nThe Node is identified by its system_id.",
        "name": "NodeHandler",
        "params": [
          "system_id"
        ],
        "path": "/MAAS/api/2.0/nodes/{system_id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/{system_id}/"
      },
      "name": "NodeHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "List NodeResult visible to the user, optionally filtered.\n\n:param system_id: An optional list of system ids.  Only the\n    results related to the nodes with these system ids\n    will be returned.\n:type system_id: iterable\n:param name: An optional list of names.  Only the results\n    with the specified names will be returned.\n:type name: iterable\n:param result_type: An optional result_type.  Only the results\n    with the specified result_type will be returned.\n:type name: iterable",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Read the collection of NodeResult in the MAAS.",
        "name": "NodeResultsHandler",
        "params": [],
        "path": "/MAAS/api/2.0/installation-results/",
        "uri": "http://localhost:5240/MAAS/api/2.0/installation-results/"
      },
      "name": "NodeResultsHandler"
    },
    {
      "anon": {
        "actions": [
          {
            "doc": "Returns whether or not the given MAC address is registered within\nthis MAAS (and attached to a non-retired node).\n\n:param mac_address: The mac address to be checked.\n:type mac_address: unicode\n:return: 'true' or 'false'.\n:rtype: unicode\n\nReturns 400 if any mandatory parameters are missing.",
            "method": "GET",
            "name": "is_registered",
            "op": "is_registered",
            "restful": false
          }
        ],
        "doc": "Anonymous access to Nodes.",
        "name": "AnonNodesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/nodes/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/"
      },
      "auth": {
        "actions": [
          {
            "doc": "List Nodes visible to the user, optionally filtered by criteria.\n\nNodes are sorted by id (i.e. most recent last) and grouped by type.\n\n:param hostname: An optional hostname. Only nodes relating to the node\n    with the matching hostname will be returned. This can be specified\n    multiple times to see multiple nodes.\n:type hostname: unicode\n\n:param mac_address: An optional MAC address. Only nodes relating to the\n    node owning the specified MAC address will be returned. This can be\n    specified multiple times to see multiple nodes.\n:type mac_address: unicode\n\n:param id: An optional list of system ids.  Only nodes relating to the\n    nodes with matching system ids will be returned.\n:type id: unicode\n\n:param domain: An optional name for a dns domain. Only nodes relating\n    to the nodes in the domain will be returned.\n:type domain: unicode\n\n:param zone: An optional name for a physical zone. Only nodes relating\n    to the nodes in the zone will be returned.\n:type zone: unicode\n\n:param agent_name: An optional agent name.  Only nodes relating to the\n    nodes with matching agent names will be returned.\n:type agent_name: unicode",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Assign multiple nodes to a physical zone at once.\n\n:param zone: Zone name.  If omitted, the zone is \"none\" and the nodes\n    will be taken out of their physical zones.\n:param nodes: system_ids of the nodes whose zones are to be set.\n   (An empty list is acceptable).\n\nRaises 403 if the user is not an admin.",
            "method": "POST",
            "name": "set_zone",
            "op": "set_zone",
            "restful": false
          }
        ],
        "doc": "Manage the collection of all the nodes in the MAAS.",
        "name": "NodesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/nodes/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/"
      },
      "name": "NodesHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a Package Repository.\n\n:param name: The name of the Package Repository.\n:type name: unicode\n\n:param url: The url of the Package Repository.\n:type url: unicode\n\n:param distributions: Which package distributions to include.\n:type distributions: unicode\n\n:param disabled_pockets: The list of pockets to disable.\n\n:param components: The list of components to enable.\n\n:param arches: The list of supported architectures.\n\n:param key: The authentication key to use with the repository.\n:type key: unicode\n\n:param enabled: Whether or not the repository is enabled.\n:type enabled: boolean",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all Package Repositories.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage the collection of all Package Repositories in MAAS.",
        "name": "PackageRepositoriesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/package-repositories/",
        "uri": "http://localhost:5240/MAAS/api/2.0/package-repositories/"
      },
      "name": "PackageRepositoriesHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete a Package Repository.\n\nReturns 404 if the Package Repository is not found.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read Package Repository.\n\nReturns 404 if the repository is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update a Package Repository.\n\n:param name: The name of the Package Repository.\n:type name: unicode\n\n:param url: The url of the Package Repository.\n:type url: unicode\n\n:param distributions: Which package distributions to include.\n:type distributions: unicode\n\n:param disabled_pockets: The list of pockets to disable.\n\n:param components: The list of components to enable.\n\n:param arches: The list of supported architectures.\n\n:param key: The authentication key to use with the repository.\n:type key: unicode\n\n:param enabled: Whether or not the repository is enabled.\n:type enabled: boolean\n\nReturns 404 if the Package Repository is not found.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage an individual Package Repository.\n\nThe Package Repository is identified by its id.",
        "name": "PackageRepositoryHandler",
        "params": [
          "id"
        ],
        "path": "/MAAS/api/2.0/package-repositories/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/package-repositories/{id}/"
      },
      "name": "PackageRepositoryHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete partition.\n\nReturns 404 if the node, block device, or partition are not found.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Format a partition.\n\n:param fstype: Type of filesystem.\n:param uuid: The UUID for the filesystem.\n:param label: The label for the filesystem.\n\nReturns 403 when the user doesn't have the ability to format the             partition.\nReturns 404 if the node, block device, or partition is not found.",
            "method": "POST",
            "name": "format",
            "op": "format",
            "restful": false
          },
          {
            "doc": "Mount the filesystem on partition.\n\n:param mount_point: Path on the filesystem to mount.\n:param mount_options: Options to pass to mount(8).\n\nReturns 403 when the user doesn't have the ability to mount the             partition.\nReturns 404 if the node, block device, or partition is not found.",
            "method": "POST",
            "name": "mount",
            "op": "mount",
            "restful": false
          },
          {
            "doc": "Read partition.\n\nReturns 404 if the node, block device, or partition are not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Unformat a partition.",
            "method": "POST",
            "name": "unformat",
            "op": "unformat",
            "restful": false
          },
          {
            "doc": "Unmount the filesystem on partition.\n\nReturns 400 if the partition is not formatted or not currently             mounted.\nReturns 403 when the user doesn't have the ability to unmount the             partition.\nReturns 404 if the node, block device, or partition is not found.",
            "method": "POST",
            "name": "unmount",
            "op": "unmount",
            "restful": false
          }
        ],
        "doc": "Manage partition on a block device.",
        "name": "PartitionHandler",
        "params": [
          "system_id",
          "device_id",
          "id"
        ],
        "path": "/MAAS/api/2.0/nodes/{system_id}/blockdevices/{device_id}/partition/{id}",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/{system_id}/blockdevices/{device_id}/partition/{id}"
      },
      "name": "PartitionHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a partition on the block device.\n\n:param size: The size of the partition.\n:param uuid: UUID for the partition. Only used if the partition table\n    type for the block device is GPT.\n:param bootable: If the partition should be marked bootable.\n\nReturns 404 if the node or the block device are not found.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all partitions on the block device.\n\nReturns 404 if the node or the block device are not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage partitions on a block device.",
        "name": "PartitionsHandler",
        "params": [
          "system_id",
          "device_id"
        ],
        "path": "/MAAS/api/2.0/nodes/{system_id}/blockdevices/{device_id}/partitions/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/{system_id}/blockdevices/{device_id}/partitions/"
      },
      "name": "PartitionsHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete a specific Node.\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to delete the node.\nReturns 204 if the node is successfully deleted.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Obtain various system details.\n\nFor example, LLDP and ``lshw`` XML dumps.\n\nReturns a ``{detail_type: xml, ...}`` map, where\n``detail_type`` is something like \"lldp\" or \"lshw\".\n\nNote that this is returned as BSON and not JSON. This is for\nefficiency, but mainly because JSON can't do binary content\nwithout applying additional encoding like base-64.\n\nReturns 404 if the node is not found.",
            "method": "GET",
            "name": "details",
            "op": "details",
            "restful": false
          },
          {
            "doc": "Import the boot images on this rack controller.\n\nReturns 404 if the rack controller is not found.",
            "method": "POST",
            "name": "import_boot_images",
            "op": "import_boot_images",
            "restful": false
          },
          {
            "doc": "List all available boot images.\n\nShows all available boot images and lists whether they are in sync with\nthe region.\n\nReturns 404 if the rack controller is not found.",
            "method": "GET",
            "name": "list_boot_images",
            "op": "list_boot_images",
            "restful": false
          },
          {
            "doc": "Power off a node.\n\n:param stop_mode: An optional power off mode. If 'soft',\n    perform a soft power down if the node's power type supports\n    it, otherwise perform a hard power off. For all values other\n    than 'soft', and by default, perform a hard power off. A\n    soft power off generally asks the OS to shutdown the system\n    gracefully before powering off, while a hard power off\n    occurs immediately without any warning to the OS.\n:type stop_mode: unicode\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to stop the node.",
            "method": "POST",
            "name": "power_off",
            "op": "power_off",
            "restful": false
          },
          {
            "doc": "Turn on a node.\n\n:param user_data: If present, this blob of user-data to be made\n    available to the nodes through the metadata service.\n:type user_data: base64-encoded unicode\n:param comment: Optional comment for the event log.\n:type comment: unicode\n\nIdeally we'd have MIME multipart and content-transfer-encoding etc.\ndeal with the encapsulation of binary data, but couldn't make it work\nwith the framework in reasonable time so went for a dumb, manual\nencoding instead.\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to start the machine.\nReturns 503 if the start-up attempted to allocate an IP address,\nand there were no IP addresses available on the relevant cluster\ninterface.",
            "method": "POST",
            "name": "power_on",
            "op": "power_on",
            "restful": false
          },
          {
            "doc": "Obtain power parameters.\n\nThis method is reserved for admin users and returns a 403 if the\nuser is not one.\n\nThis returns the power parameters, if any, configured for a\nnode. For some types of power control this will include private\ninformation such as passwords and secret keys.\n\nReturns 404 if the node is not found.",
            "method": "GET",
            "name": "power_parameters",
            "op": "power_parameters",
            "restful": false
          },
          {
            "doc": "Query the power state of a node.\n\nSend a request to the node's power controller which asks it about\nthe node's state.  The reply to this could be delayed by up to\n30 seconds while waiting for the power controller to respond.\nUse this method sparingly as it ties up an appserver thread\nwhile waiting.\n\n:param system_id: The node to query.\n:return: a dict whose key is \"state\" with a value of one of\n    'on' or 'off'.\n\nReturns 404 if the node is not found.\nReturns node's power state.",
            "method": "GET",
            "name": "query_power_state",
            "op": "query_power_state",
            "restful": false
          },
          {
            "doc": "Read a specific Node.\n\nReturns 404 if the node is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update a specific Rack controller.\n\n:param power_type: The new power type for this rack controller. If you\n    use the default value, power_parameters will be set to the empty\n    string.\n    Available to admin users.\n    See the `Power types`_ section for a list of the available power\n    types.\n:type power_type: unicode\n\n:param power_parameters_{param1}: The new value for the 'param1'\n    power parameter.  Note that this is dynamic as the available\n    parameters depend on the selected value of the rack controller's\n    power_type.  Available to admin users. See the `Power types`_\n    section for a list of the available power parameters for each\n    power type.\n:type power_parameters_{param1}: unicode\n\n:param power_parameters_skip_check: Whether or not the new power\n    parameters for this rack controller should be checked against the\n    expected power parameters for the rack controller's power type\n    ('true' or 'false'). The default is 'false'.\n:type power_parameters_skip_check: unicode\n\n:param zone: Name of a valid physical zone in which to place this\n    rack controller.\n:type zone: unicode\n\nReturns 404 if the rack controller is not found.\nReturns 403 if the user does not have permission to update the rack\ncontroller.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage an individual rack controller.\n\nThe rack controller is identified by its system_id.",
        "name": "RackControllerHandler",
        "params": [
          "system_id"
        ],
        "path": "/MAAS/api/2.0/rackcontrollers/{system_id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/rackcontrollers/{system_id}/"
      },
      "name": "RackControllerHandler"
    },
    {
      "anon": {
        "actions": [
          {
            "doc": "Returns whether or not the given MAC address is registered within\nthis MAAS (and attached to a non-retired node).\n\n:param mac_address: The mac address to be checked.\n:type mac_address: unicode\n:return: 'true' or 'false'.\n:rtype: unicode\n\nReturns 400 if any mandatory parameters are missing.",
            "method": "GET",
            "name": "is_registered",
            "op": "is_registered",
            "restful": false
          }
        ],
        "doc": "Anonymous access to Nodes.",
        "name": "AnonNodesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/nodes/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/"
      },
      "auth": {
        "actions": [
          {
            "doc": "Query all of the rack controllers for power information.\n\n:return: a list of dicts that describe the power types in this format.",
            "method": "GET",
            "name": "describe_power_types",
            "op": "describe_power_types",
            "restful": false
          },
          {
            "doc": "Import the boot images on all rack controllers.",
            "method": "POST",
            "name": "import_boot_images",
            "op": "import_boot_images",
            "restful": false
          },
          {
            "doc": "Retrieve power parameters for multiple machines.\n\n:param id: An optional list of system ids.  Only machines with\n    matching system ids will be returned.\n:type id: iterable\n\n:return: A dictionary of power parameters, keyed by machine system_id.\n\nRaises 403 if the user is not an admin.",
            "method": "GET",
            "name": "power_parameters",
            "op": "power_parameters",
            "restful": false
          },
          {
            "doc": "List Nodes visible to the user, optionally filtered by criteria.\n\nNodes are sorted by id (i.e. most recent last) and grouped by type.\n\n:param hostname: An optional hostname. Only nodes relating to the node\n    with the matching hostname will be returned. This can be specified\n    multiple times to see multiple nodes.\n:type hostname: unicode\n\n:param mac_address: An optional MAC address. Only nodes relating to the\n    node owning the specified MAC address will be returned. This can be\n    specified multiple times to see multiple nodes.\n:type mac_address: unicode\n\n:param id: An optional list of system ids.  Only nodes relating to the\n    nodes with matching system ids will be returned.\n:type id: unicode\n\n:param domain: An optional name for a dns domain. Only nodes relating\n    to the nodes in the domain will be returned.\n:type domain: unicode\n\n:param zone: An optional name for a physical zone. Only nodes relating\n    to the nodes in the zone will be returned.\n:type zone: unicode\n\n:param agent_name: An optional agent name.  Only nodes relating to the\n    nodes with matching agent names will be returned.\n:type agent_name: unicode",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Assign multiple nodes to a physical zone at once.\n\n:param zone: Zone name.  If omitted, the zone is \"none\" and the nodes\n    will be taken out of their physical zones.\n:param nodes: system_ids of the nodes whose zones are to be set.\n   (An empty list is acceptable).\n\nRaises 403 if the user is not an admin.",
            "method": "POST",
            "name": "set_zone",
            "op": "set_zone",
            "restful": false
          }
        ],
        "doc": "Manage the collection of all rack controllers in MAAS.",
        "name": "RackControllersHandler",
        "params": [],
        "path": "/MAAS/api/2.0/rackcontrollers/",
        "uri": "http://localhost:5240/MAAS/api/2.0/rackcontrollers/"
      },
      "name": "RackControllersHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete RAID on a machine.\n\nReturns 404 if the machine or RAID is not found.\nReturns 409 if the machine is not Ready.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read RAID device on a machine.\n\nReturns 404 if the machine or RAID is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update RAID on a machine.\n\n:param name: Name of the RAID.\n:param uuid: UUID of the RAID.\n:param add_block_devices: Block devices to add to the RAID.\n:param remove_block_devices: Block devices to remove from the RAID.\n:param add_spare_devices: Spare block devices to add to the RAID.\n:param remove_spare_devices: Spare block devices to remove\n       from the RAID.\n:param add_partitions: Partitions to add to the RAID.\n:param remove_partitions: Partitions to remove from the RAID.\n:param add_spare_partitions: Spare partitions to add to the RAID.\n:param remove_spare_partitions: Spare partitions to remove from the\n       RAID.\n\nReturns 404 if the machine or RAID is not found.\nReturns 409 if the machine is not Ready.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage a specific RAID device on a machine.",
        "name": "RaidHandler",
        "params": [
          "system_id",
          "id"
        ],
        "path": "/MAAS/api/2.0/nodes/{system_id}/raid/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/{system_id}/raid/{id}/"
      },
      "name": "RaidHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Creates a RAID\n\n:param name: Name of the RAID.\n:param uuid: UUID of the RAID.\n:param level: RAID level.\n:param block_devices: Block devices to add to the RAID.\n:param spare_devices: Spare block devices to add to the RAID.\n:param partitions: Partitions to add to the RAID.\n:param spare_partitions: Spare partitions to add to the RAID.\n\nReturns 404 if the machine is not found.\nReturns 409 if the machine is not Ready.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all RAID devices belonging to a machine.\n\nReturns 404 if the machine is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage all RAID devices on a machine.",
        "name": "RaidsHandler",
        "params": [
          "system_id"
        ],
        "path": "/MAAS/api/2.0/nodes/{system_id}/raids/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/{system_id}/raids/"
      },
      "name": "RaidsHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete a specific Node.\n\nReturns 404 if the node is not found.\nReturns 403 if the user does not have permission to delete the node.\nReturns 204 if the node is successfully deleted.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Obtain various system details.\n\nFor example, LLDP and ``lshw`` XML dumps.\n\nReturns a ``{detail_type: xml, ...}`` map, where\n``detail_type`` is something like \"lldp\" or \"lshw\".\n\nNote that this is returned as BSON and not JSON. This is for\nefficiency, but mainly because JSON can't do binary content\nwithout applying additional encoding like base-64.\n\nReturns 404 if the node is not found.",
            "method": "GET",
            "name": "details",
            "op": "details",
            "restful": false
          },
          {
            "doc": "Obtain power parameters.\n\nThis method is reserved for admin users and returns a 403 if the\nuser is not one.\n\nThis returns the power parameters, if any, configured for a\nnode. For some types of power control this will include private\ninformation such as passwords and secret keys.\n\nReturns 404 if the node is not found.",
            "method": "GET",
            "name": "power_parameters",
            "op": "power_parameters",
            "restful": false
          },
          {
            "doc": "Read a specific Node.\n\nReturns 404 if the node is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update a specific Region controller.\n\n:param power_type: The new power type for this region controller. If\n    you use the default value, power_parameters will be set to the\n    empty string.\n    Available to admin users.\n    See the `Power types`_ section for a list of the available power\n    types.\n:type power_type: unicode\n\n:param power_parameters_{param1}: The new value for the 'param1'\n    power parameter.  Note that this is dynamic as the available\n    parameters depend on the selected value of the region controller's\n    power_type.  Available to admin users. See the `Power types`_\n    section for a list of the available power parameters for each\n    power type.\n:type power_parameters_{param1}: unicode\n\n:param power_parameters_skip_check: Whether or not the new power\n    parameters for this region controller should be checked against the\n    expected power parameters for the region controller's power type\n    ('true' or 'false').\n    The default is 'false'.\n:type power_parameters_skip_check: unicode\n\n:param zone: Name of a valid physical zone in which to place this\n    region controller.\n:type zone: unicode\n\nReturns 404 if the region controller is not found.\nReturns 403 if the user does not have permission to update the region\ncontroller.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage an individual region controller.\n\nThe region controller is identified by its system_id.",
        "name": "RegionControllerHandler",
        "params": [
          "system_id"
        ],
        "path": "/MAAS/api/2.0/regioncontrollers/{system_id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/regioncontrollers/{system_id}/"
      },
      "name": "RegionControllerHandler"
    },
    {
      "anon": {
        "actions": [
          {
            "doc": "Returns whether or not the given MAC address is registered within\nthis MAAS (and attached to a non-retired node).\n\n:param mac_address: The mac address to be checked.\n:type mac_address: unicode\n:return: 'true' or 'false'.\n:rtype: unicode\n\nReturns 400 if any mandatory parameters are missing.",
            "method": "GET",
            "name": "is_registered",
            "op": "is_registered",
            "restful": false
          }
        ],
        "doc": "Anonymous access to Nodes.",
        "name": "AnonNodesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/nodes/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/"
      },
      "auth": {
        "actions": [
          {
            "doc": "List Nodes visible to the user, optionally filtered by criteria.\n\nNodes are sorted by id (i.e. most recent last) and grouped by type.\n\n:param hostname: An optional hostname. Only nodes relating to the node\n    with the matching hostname will be returned. This can be specified\n    multiple times to see multiple nodes.\n:type hostname: unicode\n\n:param mac_address: An optional MAC address. Only nodes relating to the\n    node owning the specified MAC address will be returned. This can be\n    specified multiple times to see multiple nodes.\n:type mac_address: unicode\n\n:param id: An optional list of system ids.  Only nodes relating to the\n    nodes with matching system ids will be returned.\n:type id: unicode\n\n:param domain: An optional name for a dns domain. Only nodes relating\n    to the nodes in the domain will be returned.\n:type domain: unicode\n\n:param zone: An optional name for a physical zone. Only nodes relating\n    to the nodes in the zone will be returned.\n:type zone: unicode\n\n:param agent_name: An optional agent name.  Only nodes relating to the\n    nodes with matching agent names will be returned.\n:type agent_name: unicode",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Assign multiple nodes to a physical zone at once.\n\n:param zone: Zone name.  If omitted, the zone is \"none\" and the nodes\n    will be taken out of their physical zones.\n:param nodes: system_ids of the nodes whose zones are to be set.\n   (An empty list is acceptable).\n\nRaises 403 if the user is not an admin.",
            "method": "POST",
            "name": "set_zone",
            "op": "set_zone",
            "restful": false
          }
        ],
        "doc": "Manage the collection of all region controllers in MAAS.",
        "name": "RegionControllersHandler",
        "params": [],
        "path": "/MAAS/api/2.0/regioncontrollers/",
        "uri": "http://localhost:5240/MAAS/api/2.0/regioncontrollers/"
      },
      "name": "RegionControllersHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "DELETE an SSH key.\n\nReturns 404 if the key does not exist.\nReturns 401 if the key does not belong to the calling user.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "GET an SSH key.\n\nReturns 404 if the key does not exist.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage an SSH key.\n\nSSH keys can be retrieved or deleted.",
        "name": "SSHKeyHandler",
        "params": [
          "id"
        ],
        "path": "/MAAS/api/2.0/account/prefs/sshkeys/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/account/prefs/sshkeys/{id}/"
      },
      "name": "SSHKeyHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Add a new SSH key to the requesting user's account.\n\nThe request payload should contain the public SSH key data in form\ndata whose name is \"key\".",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "Import the requesting user's SSH keys.\n\nImport SSH keys for a given protocol and authorization ID in\nprotocol:auth_id format.",
            "method": "POST",
            "name": "import",
            "op": "import",
            "restful": false
          },
          {
            "doc": "List all keys belonging to the requesting user.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage the collection of all the SSH keys in this MAAS.",
        "name": "SSHKeysHandler",
        "params": [],
        "path": "/MAAS/api/2.0/account/prefs/sshkeys/",
        "uri": "http://localhost:5240/MAAS/api/2.0/account/prefs/sshkeys/"
      },
      "name": "SSHKeysHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "DELETE an SSL key.\n\nReturns 401 if the key does not belong to the requesting user.\nReturns 204 if the key is successfully deleted.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "GET an SSL key.\n\nReturns 404 if the key with `id` is not found.\nReturns 401 if the key does not belong to the requesting user.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage an SSL key.\n\nSSL keys can be retrieved or deleted.",
        "name": "SSLKeyHandler",
        "params": [
          "id"
        ],
        "path": "/MAAS/api/2.0/account/prefs/sslkeys/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/account/prefs/sslkeys/{id}/"
      },
      "name": "SSLKeyHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Add a new SSL key to the requesting user's account.\n\nThe request payload should contain the SSL key data in form\ndata whose name is \"key\".",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all keys belonging to the requesting user.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Operations on multiple keys.",
        "name": "SSLKeysHandler",
        "params": [],
        "path": "/MAAS/api/2.0/account/prefs/sslkeys/",
        "uri": "http://localhost:5240/MAAS/api/2.0/account/prefs/sslkeys/"
      },
      "name": "SSLKeysHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete space.\n\nReturns 404 if the space is not found.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read space.\n\nReturns 404 if the space is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update space.\n\n:param name: Name of the space.\n:param description: Description of the space.\n\nReturns 404 if the space is not found.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage space.",
        "name": "SpaceHandler",
        "params": [
          "id"
        ],
        "path": "/MAAS/api/2.0/spaces/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/spaces/{id}/"
      },
      "name": "SpaceHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a space.\n\n:param name: Name of the space.\n:param description: Description of the space.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all spaces.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage spaces.",
        "name": "SpacesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/spaces/",
        "uri": "http://localhost:5240/MAAS/api/2.0/spaces/"
      },
      "name": "SpacesHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete static route.\n\nReturns 404 if the static route is not found.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read static route.\n\nReturns 404 if the static route is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update static route.\n\n:param source: Source subnet for the route.\n:param destination: Destination subnet for the route.\n:param gateway_ip: IP address of the gateway on the source subnet.\n:param metric: Weight of the route on a deployed machine.\n\nReturns 404 if the static route is not found.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage static route.",
        "name": "StaticRouteHandler",
        "params": [
          "id"
        ],
        "path": "/MAAS/api/2.0/static-routes/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/static-routes/{id}/"
      },
      "name": "StaticRouteHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a static route.\n\n:param source: Source subnet for the route.\n:param destination: Destination subnet for the route.\n:param gateway_ip: IP address of the gateway on the source subnet.\n:param metric: Weight of the route on a deployed machine.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all static routes.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage static routes.",
        "name": "StaticRoutesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/static-routes/",
        "uri": "http://localhost:5240/MAAS/api/2.0/static-routes/"
      },
      "name": "StaticRoutesHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete subnet.\n\nReturns 404 if the subnet is not found.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Returns a summary of IP addresses assigned to this subnet.\n\nOptional arguments:\nwith_username: (default=True) if False, suppresses the display\nof usernames associated with each address.\nwith_node_summary: (default=True) if False, suppresses the display\nof any node associated with each address.",
            "method": "GET",
            "name": "ip_addresses",
            "op": "ip_addresses",
            "restful": false
          },
          {
            "doc": "Read subnet.\n\nReturns 404 if the subnet is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Lists IP ranges currently reserved in the subnet.\n\nReturns 404 if the subnet is not found.",
            "method": "GET",
            "name": "reserved_ip_ranges",
            "op": "reserved_ip_ranges",
            "restful": false
          },
          {
            "doc": "Returns statistics for the specified subnet, including:\n\nnum_available - the number of available IP addresses\nlargest_available - the largest number of contiguous free IP addresses\nnum_unavailable - the number of unavailable IP addresses\ntotal_addresses - the sum of the available plus unavailable addresses\nusage - the (floating point) usage percentage of this subnet\nusage_string - the (formatted unicode) usage percentage of this subnet\nranges - the specific IP ranges present in ths subnet (if specified)\n\nOptional arguments:\ninclude_ranges: if True, includes detailed information\nabout the usage of this range.\ninclude_suggestions: if True, includes the suggested gateway and\ndynamic range for this subnet, if it were to be configured.\n\nReturns 404 if the subnet is not found.",
            "method": "GET",
            "name": "statistics",
            "op": "statistics",
            "restful": false
          },
          {
            "doc": "Lists IP ranges currently unreserved in the subnet.\n\nReturns 404 if the subnet is not found.",
            "method": "GET",
            "name": "unreserved_ip_ranges",
            "op": "unreserved_ip_ranges",
            "restful": false
          },
          {
            "doc": "Update subnet.\n\n:param name: Name of the subnet.\n:param description: Description of the subnet.\n:param vlan: VLAN this subnet belongs to.\n:param space: Space this subnet is in.\n:param cidr: The network CIDR for this subnet.\n:param gateway_ip: The gateway IP address for this subnet.\n:param rdns_mode: How reverse DNS is handled for this subnet.\n:param allow_proxy: Configure maas-proxy to allow requests from this             subnet.\n:param dns_servers: Comma-seperated list of DNS servers for this             subnet.\n\nReturns 404 if the subnet is not found.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage subnet.",
        "name": "SubnetHandler",
        "params": [
          "id"
        ],
        "path": "/MAAS/api/2.0/subnets/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/subnets/{id}/"
      },
      "name": "SubnetHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a subnet.\n\n:param name: Name of the subnet.\n:param description: Description of the subnet.\n:param fabric: Fabric for the subnet. Defaults to the fabric the\n    provided VLAN belongs to or defaults to the default fabric.\n:param vlan: VLAN this subnet belongs to. Defaults to the default\n    VLAN for the provided fabric or defaults to the default VLAN in\n    the default fabric.\n:param vid: VID of the VLAN this subnet belongs to. Only used when\n    vlan is not provided. Picks the VLAN with this VID in the provided\n    fabric or the default fabric if one is not given.\n:param space: Space this subnet is in. Defaults to the default space.\n:param cidr: The network CIDR for this subnet.\n:param gateway_ip: The gateway IP address for this subnet.\n:param rdns_mode: How reverse DNS is handled for this subnet.\n    One of: 0 (Disabled), 1 (Enabled), or 2 (RFC2317).  Disabled means\n    no reverse zone is created; Enabled means generate the reverse\n    zone; RFC2317 extends Enabled to create the necessary parent zone\n    with the appropriate CNAME resource records for the network, if the\n    network is small enough to require the support described in\n    RFC2317.\n:param allow_proxy: Configure maas-proxy to allow requests from this\n    subnet.\n:param dns_servers: Comma-seperated list of DNS servers for this\n    subnet.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all subnets.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage subnets.",
        "name": "SubnetsHandler",
        "params": [],
        "path": "/MAAS/api/2.0/subnets/",
        "uri": "http://localhost:5240/MAAS/api/2.0/subnets/"
      },
      "name": "SubnetsHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete a specific Tag.\n\nReturns 404 if the tag is not found.\nReturns 204 if the tag is successfully deleted.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Get the list of devices that have this tag.\n\nReturns 404 if the tag is not found.",
            "method": "GET",
            "name": "devices",
            "op": "devices",
            "restful": false
          },
          {
            "doc": "Get the list of machines that have this tag.\n\nReturns 404 if the tag is not found.",
            "method": "GET",
            "name": "machines",
            "op": "machines",
            "restful": false
          },
          {
            "doc": "Get the list of nodes that have this tag.\n\nReturns 404 if the tag is not found.",
            "method": "GET",
            "name": "nodes",
            "op": "nodes",
            "restful": false
          },
          {
            "doc": "Get the list of rack controllers that have this tag.\n\nReturns 404 if the tag is not found.",
            "method": "GET",
            "name": "rack_controllers",
            "op": "rack_controllers",
            "restful": false
          },
          {
            "doc": "Read a specific Tag.\n\nReturns 404 if the tag is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Manually trigger a rebuild the tag <=> node mapping.\n\nThis is considered a maintenance operation, which should normally not\nbe necessary. Adding nodes or updating a tag's definition should\nautomatically trigger the appropriate changes.\n\nReturns 404 if the tag is not found.",
            "method": "POST",
            "name": "rebuild",
            "op": "rebuild",
            "restful": false
          },
          {
            "doc": "Get the list of region controllers that have this tag.\n\nReturns 404 if the tag is not found.",
            "method": "GET",
            "name": "region_controllers",
            "op": "region_controllers",
            "restful": false
          },
          {
            "doc": "Update a specific Tag.\n\n:param name: The name of the Tag to be created. This should be a short\n    name, and will be used in the URL of the tag.\n:param comment: A long form description of what the tag is meant for.\n    It is meant as a human readable description of the tag.\n:param definition: An XPATH query that will be evaluated against the\n    hardware_details stored for all nodes (output of `lshw -xml`).\n\nReturns 404 if the tag is not found.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          },
          {
            "doc": "Add or remove nodes being associated with this tag.\n\n:param add: system_ids of nodes to add to this tag.\n:param remove: system_ids of nodes to remove from this tag.\n:param definition: (optional) If supplied, the definition will be\n    validated against the current definition of the tag. If the value\n    does not match, then the update will be dropped (assuming this was\n    just a case of a worker being out-of-date)\n:param rack_controller: A system ID of a rack controller that did the\n    processing. This value is optional. If not supplied, the requester\n    must be a superuser. If supplied, then the requester must be the\n    rack controller.\n\nReturns 404 if the tag is not found.\nReturns 401 if the user does not have permission to update the nodes.\nReturns 409 if 'definition' doesn't match the current definition.",
            "method": "POST",
            "name": "update_nodes",
            "op": "update_nodes",
            "restful": false
          }
        ],
        "doc": "Manage a Tag.\n\nTags are properties that can be associated with a Node and serve as\ncriteria for selecting and allocating nodes.\n\nA Tag is identified by its name.",
        "name": "TagHandler",
        "params": [
          "name"
        ],
        "path": "/MAAS/api/2.0/tags/{name}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/tags/{name}/"
      },
      "name": "TagHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a new Tag.\n\n:param name: The name of the Tag to be created. This should be a short\n    name, and will be used in the URL of the tag.\n:param comment: A long form description of what the tag is meant for.\n    It is meant as a human readable description of the tag.\n:param definition: An XPATH query that will be evaluated against the\n    hardware_details stored for all nodes (output of `lshw -xml`).\n:param kernel_opts: Can be None. If set, nodes associated with this tag\n    will add this string to their kernel options when booting. The\n    value overrides the global 'kernel_opts' setting. If more than one\n    tag is associated with a node, the one with the lowest alphabetical\n    name will be picked (eg 01-my-tag will be taken over 99-tag-name).\n\nReturns 401 if the user is not an admin.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List Tags.\n\nGet a listing of all tags that are currently defined.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage the collection of all the Tags in this MAAS.",
        "name": "TagsHandler",
        "params": [],
        "path": "/MAAS/api/2.0/tags/",
        "uri": "http://localhost:5240/MAAS/api/2.0/tags/"
      },
      "name": "TagsHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Deletes a user",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": null,
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage a user account.",
        "name": "UserHandler",
        "params": [
          "username"
        ],
        "path": "/MAAS/api/2.0/users/{username}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/users/{username}/"
      },
      "name": "UserHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a MAAS user account.\n\nThis is not safe: the password is sent in plaintext.  Avoid it for\nproduction, unless you are confident that you can prevent eavesdroppers\nfrom observing the request.\n\n:param username: Identifier-style username for the new user.\n:type username: unicode\n:param email: Email address for the new user.\n:type email: unicode\n:param password: Password for the new user.\n:type password: unicode\n:param is_superuser: Whether the new user is to be an administrator.\n:type is_superuser: bool ('0' for False, '1' for True)\n\nReturns 400 if any mandatory parameters are missing.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List users.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Returns the currently logged in user.",
            "method": "GET",
            "name": "whoami",
            "op": "whoami",
            "restful": false
          }
        ],
        "doc": "Manage the user accounts of this MAAS.",
        "name": "UsersHandler",
        "params": [],
        "path": "/MAAS/api/2.0/users/",
        "uri": "http://localhost:5240/MAAS/api/2.0/users/"
      },
      "name": "UsersHandler"
    },
    {
      "anon": {
        "actions": [
          {
            "doc": "Version and capabilities of this MAAS instance.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Information about this MAAS instance.\n\nThis returns a JSON dictionary with information about this\nMAAS instance::\n\n    {\n        'version': '1.8.0',\n        'subversion': 'alpha10+bzr3750',\n        'capabilities': ['capability1', 'capability2', ...]\n    }",
        "name": "VersionHandler",
        "params": [],
        "path": "/MAAS/api/2.0/version/",
        "uri": "http://localhost:5240/MAAS/api/2.0/version/"
      },
      "auth": null,
      "name": "VersionHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Delete VLAN on fabric.\n\nReturns 404 if the fabric or VLAN is not found.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read VLAN on fabric.\n\nReturns 404 if the fabric or VLAN is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Update VLAN.\n\n:param name: Name of the VLAN.\n:type name: unicode\n:param description: Description of the VLAN.\n:type description: unicode\n:param vid: VLAN ID of the VLAN.\n:type vid: integer\n:param mtu: The MTU to use on the VLAN.\n:type mtu: integer\n:Param dhcp_on: Whether or not DHCP should be managed on the VLAN.\n:type dhcp_on: boolean\n:param primary_rack: The primary rack controller managing the VLAN.\n:type primary_rack: system_id\n:param secondary_rack: The secondary rack controller manging the VLAN.\n:type secondary_rack: system_id\n\nReturns 404 if the fabric or VLAN is not found.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage VLAN on a fabric.",
        "name": "VlanHandler",
        "params": [
          "fabric_id",
          "vid"
        ],
        "path": "/MAAS/api/2.0/fabrics/{fabric_id}/vlans/{vid}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/fabrics/{fabric_id}/vlans/{vid}/"
      },
      "name": "VlanHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a VLAN.\n\n:param name: Name of the VLAN.\n:param description: Description of the VLAN.\n:param vid: VLAN ID of the VLAN.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all VLANs belonging to fabric.\n\nReturns 404 if the fabric is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage VLANs on a fabric.",
        "name": "VlansHandler",
        "params": [
          "fabric_id"
        ],
        "path": "/MAAS/api/2.0/fabrics/{fabric_id}/vlans/",
        "uri": "http://localhost:5240/MAAS/api/2.0/fabrics/{fabric_id}/vlans/"
      },
      "name": "VlansHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a logical volume in the volume group.\n\n:param name: Name of the logical volume.\n:param uuid: (optional) UUID of the logical volume.\n:param size: Size of the logical volume.\n\nReturns 404 if the machine or volume group is not found.\nReturns 409 if the machine is not Ready.",
            "method": "POST",
            "name": "create_logical_volume",
            "op": "create_logical_volume",
            "restful": false
          },
          {
            "doc": "Delete volume group on a machine.\n\nReturns 404 if the machine or volume group is not found.\nReturns 409 if the machine is not Ready.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "Delete a logical volume in the volume group.\n\n:param id: ID of the logical volume.\n\nReturns 403 if no logical volume with id.\nReturns 404 if the machine or volume group is not found.\nReturns 409 if the machine is not Ready.",
            "method": "POST",
            "name": "delete_logical_volume",
            "op": "delete_logical_volume",
            "restful": false
          },
          {
            "doc": "Read volume group on a machine.\n\nReturns 404 if the machine or volume group is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "Read volume group on a machine.\n\n:param name: Name of the volume group.\n:param uuid: UUID of the volume group.\n:param add_block_devices: Block devices to add to the volume group.\n:param remove_block_devices: Block devices to remove from the\n    volume group.\n:param add_partitions: Partitions to add to the volume group.\n:param remove_partitions: Partitions to remove from the volume group.\n\nReturns 404 if the machine or volume group is not found.\nReturns 409 if the machine is not Ready.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage volume group on a machine.",
        "name": "VolumeGroupHandler",
        "params": [
          "system_id",
          "id"
        ],
        "path": "/MAAS/api/2.0/nodes/{system_id}/volume-group/{id}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/{system_id}/volume-group/{id}/"
      },
      "name": "VolumeGroupHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a volume group belonging to machine.\n\n:param name: Name of the volume group.\n:param uuid: (optional) UUID of the volume group.\n:param block_devices: Block devices to add to the volume group.\n:param partitions: Partitions to add to the volume group.\n\nReturns 404 if the machine is not found.\nReturns 409 if the machine is not Ready.",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List all volume groups belonging to a machine.\n\nReturns 404 if the machine is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage volume groups on a machine.",
        "name": "VolumeGroupsHandler",
        "params": [
          "system_id"
        ],
        "path": "/MAAS/api/2.0/nodes/{system_id}/volume-groups/",
        "uri": "http://localhost:5240/MAAS/api/2.0/nodes/{system_id}/volume-groups/"
      },
      "name": "VolumeGroupsHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "DELETE request.  Delete zone.\n\nReturns 404 if the zone is not found.\nReturns 204 if the zone is successfully deleted.",
            "method": "DELETE",
            "name": "delete",
            "op": null,
            "restful": true
          },
          {
            "doc": "GET request.  Return zone.\n\nReturns 404 if the zone is not found.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          },
          {
            "doc": "PUT request.  Update zone.\n\nReturns 404 if the zone is not found.",
            "method": "PUT",
            "name": "update",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage a physical zone.\n\nAny node is in a physical zone, or \"zone\" for short.  The meaning of a\nphysical zone is up to you: it could identify e.g. a server rack, a\nnetwork, or a data centre.  Users can then allocate nodes from specific\nphysical zones, to suit their redundancy or performance requirements.\n\nThis functionality is only available to administrators.  Other users can\nview physical zones, but not modify them.",
        "name": "ZoneHandler",
        "params": [
          "name"
        ],
        "path": "/MAAS/api/2.0/zones/{name}/",
        "uri": "http://localhost:5240/MAAS/api/2.0/zones/{name}/"
      },
      "name": "ZoneHandler"
    },
    {
      "anon": null,
      "auth": {
        "actions": [
          {
            "doc": "Create a new physical zone.\n\n:param name: Identifier-style name for the new zone.\n:type name: unicode\n:param description: Free-form description of the new zone.\n:type description: unicode",
            "method": "POST",
            "name": "create",
            "op": null,
            "restful": true
          },
          {
            "doc": "List zones.\n\nGet a listing of all the physical zones.",
            "method": "GET",
            "name": "read",
            "op": null,
            "restful": true
          }
        ],
        "doc": "Manage physical zones.",
        "name": "ZonesHandler",
        "params": [],
        "path": "/MAAS/api/2.0/zones/",
        "uri": "http://localhost:5240/MAAS/api/2.0/zones/"
      },
      "name": "ZonesHandler"
    }
  ]
}