{
  "src/components/Dropdown.react.js": {
    "description": "",
    "methods": [],
    "props": {
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the option is disabled"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The id of the component"
      },
      "multi": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the user can select multiple values"
      },
      "options": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "disabled": {
                "name": "bool",
                "required": false
              },
              "label": {
                "name": "string",
                "required": false
              },
              "value": {
                "name": "string",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": ""
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value of the input"
      },
      "valueChanged": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the input changes"
      }
    }
  },
  "src/components/Graph.react.js": {
    "description": "",
    "methods": [
      {
        "name": "plot",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "bindEvents",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "clickData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest click event",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "hoverData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest hover event",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "selectedData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest select event",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "zoomData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest zoom event",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "figure": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Plotly `figure` object. See schema:\nhttps://plot.ly/javascript/reference",
        "defaultValue": {
          "value": "{data: [], layout: {}}",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Generic style overrides on the plot div"
      },
      "valueChanged": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function that updates the state tree."
      },
      "fireEvent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function that fires events"
      },
      "layout": {
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/components/Input.react.js": {
    "description": "",
    "methods": [],
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The class of the input element"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The id of the component"
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The input's placeholder"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The input's inline styles"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The value of the input"
      },
      "fireEvent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the input changes."
      },
      "valueChanged": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/components/RangeSlider.react.js": {
    "description": "",
    "methods": [],
    "props": {
      "allowCross": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "allowCross could be set as true to allow those handles to cross."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Additional CSS class for the root DOM node"
      },
      "count": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Determine how many ranges to render, and multiple handles\nwill be rendered (number + 1)."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the handles can't be moved."
      },
      "dots": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When the step value is greater than 1,\nyou can set the dots to true if you want to\nrender the slider with dots."
      },
      "included": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If the value is true, it means a continuous\nvalue is included. Otherwise, it is an independent value."
      },
      "marks": {
        "type": {
          "name": "shape",
          "value": {
            "number": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Marks on the slider.\nThe key determines the position,\nand the value determines what will show.\nIf you want to set the style of a specific mark point,\nthe value should be an object which\ncontains style and label properties."
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Minimum allowed value of the slider"
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum allowed value of the slider"
      },
      "pushable": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "pushable could be set as true to allow pushing of\nsurrounding handles when moving an handle.\nWhen set to a number, the number will be the\nminimum ensured distance between handles."
      },
      "step": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Value by which increments or decrements are made"
      },
      "labels": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Key-values pairs describing the labels"
      },
      "value": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "The value of the input"
      },
      "valueChanged": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Dash-assigned callback that gets fired when the input changes"
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the slider will be vertical"
      }
    }
  },
  "src/components/Slider.react.js": {
    "description": "",
    "methods": [],
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Additional CSS class for the root DOM node"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the handles can't be moved."
      },
      "dots": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When the step value is greater than 1,\nyou can set the dots to true if you want to\nrender the slider with dots."
      },
      "included": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If the value is true, it means a continuous\nvalue is included. Otherwise, it is an independent value."
      },
      "marks": {
        "type": {
          "name": "shape",
          "value": {
            "number": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Marks on the slider.\nThe key determines the position,\nand the value determines what will show.\nIf you want to set the style of a specific mark point,\nthe value should be an object which\ncontains style and label properties."
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Minimum allowed value of the slider"
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum allowed value of the slider"
      },
      "step": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Value by which increments or decrements are made"
      },
      "labels": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Key-values pairs describing the labels"
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The value of the input"
      },
      "valueChanged": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Dash-assigned callback that gets fired when the input changes"
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the slider will be vertical"
      }
    }
  }
}