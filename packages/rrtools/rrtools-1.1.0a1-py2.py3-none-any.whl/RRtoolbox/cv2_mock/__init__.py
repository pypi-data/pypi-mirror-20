# encoding: utf-8
# module cv2
# from /home/davtoh/anaconda3/envs/rrtools/lib/python3.5/site-packages/cv2.cpython-35m-x86_64-linux-gnu.so
# by generator 1.144
""" Python wrapper for OpenCV. """
from __future__ import absolute_import
# imports
#import cv2  # <module 'cv2'>
from builtins import object
from . import bioinspired as bioinspired # <module 'cv2.bioinspired'>
from . import saliency as saliency # <module 'cv2.saliency'>
from . import text as text # <module 'cv2.text'>
from . import omnidir as omnidir # <module 'cv2.omnidir'>
from . import fisheye as fisheye # <module 'cv2.fisheye'>
from . import detail as detail # <module 'cv2.detail'>
from . import motempl as motempl # <module 'cv2.motempl'>
from . import bgsegm as bgsegm # <module 'cv2.bgsegm'>
from . import face as face # <module 'cv2.face'>
from . import hdf as hdf # <module 'cv2.hdf'>
from . import ocl as ocl # <module 'cv2.ocl'>
from . import cuda as cuda # <module 'cv2.cuda'>
from . import plot as plot # <module 'cv2.plot'>
from . import Error as Error # <module 'cv2.Error'>
from . import ximgproc as ximgproc # <module 'cv2.ximgproc'>
from . import rgbd as rgbd # <module 'cv2.rgbd'>
from . import ppf_match_3d as ppf_match_3d # <module 'cv2.ppf_match_3d'>
from . import dnn as dnn # <module 'cv2.dnn'>
from . import xfeatures2d as xfeatures2d # <module 'cv2.xfeatures2d'>
from . import flann as flann # <module 'cv2.flann'>
from . import videostab as videostab # <module 'cv2.videostab'>
from . import line_descriptor as line_descriptor # <module 'cv2.line_descriptor'>
from . import multicalib as multicalib # <module 'cv2.multicalib'>
from . import aruco as aruco # <module 'cv2.aruco'>
from . import freetype as freetype # <module 'cv2.freetype'>
from . import ft as ft # <module 'cv2.ft'>
from . import instr as instr # <module 'cv2.instr'>
from . import optflow as optflow # <module 'cv2.optflow'>
from . import ml as ml # <module 'cv2.ml'>
from . import xphoto as xphoto # <module 'cv2.xphoto'>
from . import structured_light as structured_light # <module 'cv2.structured_light'>
from . import ogl as ogl # <module 'cv2.ogl'>
from . import datasets as datasets # <module 'cv2.datasets'>

# Variables with simple values

ACCESS_FAST = 67108864
ACCESS_MASK = 50331648
ACCESS_READ = 16777216
ACCESS_RW = 50331648
ACCESS_WRITE = 33554432

ADAPTIVE_THRESH_GAUSSIAN_C = 1

ADAPTIVE_THRESH_MEAN_C = 0

AgastFeatureDetector_AGAST_5_8 = 0

AgastFeatureDetector_AGAST_7_12d = 1
AgastFeatureDetector_AGAST_7_12s = 2

AgastFeatureDetector_NONMAX_SUPPRESSION = 10001

AgastFeatureDetector_OAST_9_16 = 3

AgastFeatureDetector_THRESHOLD = 10000

AGAST_FEATURE_DETECTOR_AGAST_5_8 = 0

AGAST_FEATURE_DETECTOR_AGAST_7_12D = 1
AGAST_FEATURE_DETECTOR_AGAST_7_12S = 2

AGAST_FEATURE_DETECTOR_NONMAX_SUPPRESSION = 10001

AGAST_FEATURE_DETECTOR_OAST_9_16 = 3

AGAST_FEATURE_DETECTOR_THRESHOLD = 10000

AKAZE_DESCRIPTOR_KAZE = 3

AKAZE_DESCRIPTOR_KAZE_UPRIGHT = 2

AKAZE_DESCRIPTOR_MLDB = 5

AKAZE_DESCRIPTOR_MLDB_UPRIGHT = 4

BORDER_CONSTANT = 0
BORDER_DEFAULT = 4
BORDER_ISOLATED = 16
BORDER_REFLECT = 2
BORDER_REFLECT101 = 4

BORDER_REFLECT_101 = 4

BORDER_REPLICATE = 1
BORDER_TRANSPARENT = 5
BORDER_WRAP = 3

CALIB_CB_ADAPTIVE_THRESH = 1

CALIB_CB_ASYMMETRIC_GRID = 2

CALIB_CB_CLUSTERING = 4

CALIB_CB_FAST_CHECK = 8

CALIB_CB_FILTER_QUADS = 4

CALIB_CB_NORMALIZE_IMAGE = 2

CALIB_CB_SYMMETRIC_GRID = 1

CALIB_FIX_ASPECT_RATIO = 2

CALIB_FIX_FOCAL_LENGTH = 16

CALIB_FIX_INTRINSIC = 256
CALIB_FIX_K1 = 32
CALIB_FIX_K2 = 64
CALIB_FIX_K3 = 128
CALIB_FIX_K4 = 2048
CALIB_FIX_K5 = 4096
CALIB_FIX_K6 = 8192

CALIB_FIX_PRINCIPAL_POINT = 4

CALIB_FIX_S1_S2_S3_S4 = 65536

CALIB_FIX_TAUX_TAUY = 524288

CALIB_RATIONAL_MODEL = 16384

CALIB_SAME_FOCAL_LENGTH = 512

CALIB_THIN_PRISM_MODEL = 32768

CALIB_TILTED_MODEL = 262144

CALIB_USE_INTRINSIC_GUESS = 1

CALIB_USE_LU = 131072
CALIB_USE_QR = 1048576

CALIB_ZERO_DISPARITY = 1024

CALIB_ZERO_TANGENT_DIST = 8

CAP_ANDROID = 1000
CAP_ANY = 0
CAP_ARAVIS = 2100
CAP_AVFOUNDATION = 1200
CAP_CMU1394 = 300
CAP_DC1394 = 300
CAP_DSHOW = 700
CAP_FFMPEG = 1900
CAP_FIREWARE = 300
CAP_FIREWIRE = 300
CAP_GIGANETIX = 1300
CAP_GPHOTO2 = 1700
CAP_GSTREAMER = 1800
CAP_IEEE1394 = 300
CAP_IMAGES = 2000
CAP_INTELPERC = 1500

CAP_INTELPERC_DEPTH_GENERATOR = 536870912
CAP_INTELPERC_DEPTH_MAP = 0

CAP_INTELPERC_GENERATORS_MASK = 805306368

CAP_INTELPERC_IMAGE = 3

CAP_INTELPERC_IMAGE_GENERATOR = 268435456

CAP_INTELPERC_IR_MAP = 2

CAP_INTELPERC_UVDEPTH_MAP = 1

CAP_MODE_BGR = 0
CAP_MODE_GRAY = 2
CAP_MODE_RGB = 1
CAP_MODE_YUYV = 3

CAP_MSMF = 1400
CAP_OPENNI = 900
CAP_OPENNI2 = 1600

CAP_OPENNI2_ASUS = 1610

CAP_OPENNI_ASUS = 910

CAP_OPENNI_BGR_IMAGE = 5

CAP_OPENNI_DEPTH_GENERATOR = -2147483648

CAP_OPENNI_DEPTH_GENERATOR_BASELINE = -2147483546

CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH = -2147483545

CAP_OPENNI_DEPTH_GENERATOR_PRESENT = -2147483539
CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION = -2147483544

CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON = -2147483544

CAP_OPENNI_DEPTH_MAP = 0

CAP_OPENNI_DISPARITY_MAP = 2

CAP_OPENNI_DISPARITY_MAP_32F = 3

CAP_OPENNI_GENERATORS_MASK = -536870912

CAP_OPENNI_GRAY_IMAGE = 6

CAP_OPENNI_IMAGE_GENERATOR = 1073741824

CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE = 1073741924

CAP_OPENNI_IMAGE_GENERATOR_PRESENT = 1073741933

CAP_OPENNI_IR_GENERATOR = 536870912

CAP_OPENNI_IR_GENERATOR_PRESENT = 536871021

CAP_OPENNI_IR_IMAGE = 7

CAP_OPENNI_POINT_CLOUD_MAP = 1

CAP_OPENNI_QVGA_30HZ = 3
CAP_OPENNI_QVGA_60HZ = 4

CAP_OPENNI_SXGA_15HZ = 1
CAP_OPENNI_SXGA_30HZ = 2

CAP_OPENNI_VALID_DEPTH_MASK = 4

CAP_OPENNI_VGA_30HZ = 0

CAP_PROP_APERTURE = 17008
CAP_PROP_AUTOFOCUS = 39

CAP_PROP_AUTO_EXPOSURE = 21

CAP_PROP_BACKLIGHT = 32
CAP_PROP_BRIGHTNESS = 10
CAP_PROP_BUFFERSIZE = 38
CAP_PROP_CONTRAST = 11

CAP_PROP_CONVERT_RGB = 16

CAP_PROP_DC1394_MAX = 31

CAP_PROP_DC1394_MODE_AUTO = -2
CAP_PROP_DC1394_MODE_MANUAL = -3

CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO = -1

CAP_PROP_DC1394_OFF = -4

CAP_PROP_EXPOSURE = 15
CAP_PROP_EXPOSUREPROGRAM = 17009
CAP_PROP_FOCUS = 28
CAP_PROP_FORMAT = 8
CAP_PROP_FOURCC = 6
CAP_PROP_FPS = 5

CAP_PROP_FRAME_COUNT = 7
CAP_PROP_FRAME_HEIGHT = 4
CAP_PROP_FRAME_WIDTH = 3

CAP_PROP_GAIN = 14
CAP_PROP_GAMMA = 22

CAP_PROP_GIGA_FRAME_HEIGH_MAX = 10004

CAP_PROP_GIGA_FRAME_OFFSET_X = 10001
CAP_PROP_GIGA_FRAME_OFFSET_Y = 10002

CAP_PROP_GIGA_FRAME_SENS_HEIGH = 10006
CAP_PROP_GIGA_FRAME_SENS_WIDTH = 10005

CAP_PROP_GIGA_FRAME_WIDTH_MAX = 10003

CAP_PROP_GPHOTO2_COLLECT_MSGS = 17005

CAP_PROP_GPHOTO2_FLUSH_MSGS = 17006

CAP_PROP_GPHOTO2_PREVIEW = 17001

CAP_PROP_GPHOTO2_RELOAD_CONFIG = 17003

CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE = 17004

CAP_PROP_GPHOTO2_WIDGET_ENUMERATE = 17002

CAP_PROP_GSTREAMER_QUEUE_LENGTH = 200

CAP_PROP_GUID = 29
CAP_PROP_HUE = 13

CAP_PROP_IMAGES_BASE = 18000
CAP_PROP_IMAGES_LAST = 19000

CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD = 11005

CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ = 11006
CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT = 11007

CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE = 11003

CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE = 11004

CAP_PROP_INTELPERC_PROFILE_COUNT = 11001
CAP_PROP_INTELPERC_PROFILE_IDX = 11002

CAP_PROP_IOS_DEVICE_EXPOSURE = 9002
CAP_PROP_IOS_DEVICE_FLASH = 9003
CAP_PROP_IOS_DEVICE_FOCUS = 9001
CAP_PROP_IOS_DEVICE_TORCH = 9005
CAP_PROP_IOS_DEVICE_WHITEBALANCE = 9004

CAP_PROP_IRIS = 36

CAP_PROP_ISO_SPEED = 30

CAP_PROP_MODE = 9
CAP_PROP_MONOCHROME = 19

CAP_PROP_OPENNI2_MIRROR = 111
CAP_PROP_OPENNI2_SYNC = 110

CAP_PROP_OPENNI_APPROX_FRAME_SYNC = 105

CAP_PROP_OPENNI_BASELINE = 102

CAP_PROP_OPENNI_CIRCLE_BUFFER = 107

CAP_PROP_OPENNI_FOCAL_LENGTH = 103

CAP_PROP_OPENNI_FRAME_MAX_DEPTH = 101

CAP_PROP_OPENNI_GENERATOR_PRESENT = 109

CAP_PROP_OPENNI_MAX_BUFFER_SIZE = 106

CAP_PROP_OPENNI_MAX_TIME_DURATION = 108

CAP_PROP_OPENNI_OUTPUT_MODE = 100

CAP_PROP_OPENNI_REGISTRATION = 104

CAP_PROP_OPENNI_REGISTRATION_ON = 104

CAP_PROP_PAN = 33

CAP_PROP_POS_AVI_RATIO = 2

CAP_PROP_POS_FRAMES = 1
CAP_PROP_POS_MSEC = 0

CAP_PROP_PVAPI_BINNINGX = 304
CAP_PROP_PVAPI_BINNINGY = 305
CAP_PROP_PVAPI_DECIMATIONHORIZONTAL = 302
CAP_PROP_PVAPI_DECIMATIONVERTICAL = 303
CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE = 301
CAP_PROP_PVAPI_MULTICASTIP = 300
CAP_PROP_PVAPI_PIXELFORMAT = 306

CAP_PROP_RECTIFICATION = 18
CAP_PROP_ROLL = 35
CAP_PROP_SATURATION = 12
CAP_PROP_SETTINGS = 37
CAP_PROP_SHARPNESS = 20
CAP_PROP_SPEED = 17007
CAP_PROP_TEMPERATURE = 23
CAP_PROP_TILT = 34
CAP_PROP_TRIGGER = 24

CAP_PROP_TRIGGER_DELAY = 25

CAP_PROP_VIEWFINDER = 17010

CAP_PROP_WHITE_BALANCE_BLUE_U = 17

CAP_PROP_WHITE_BALANCE_RED_V = 26

CAP_PROP_XI_ACQ_BUFFER_SIZE = 548

CAP_PROP_XI_ACQ_BUFFER_SIZE_UNIT = 549

CAP_PROP_XI_ACQ_FRAME_BURST_COUNT = 499

CAP_PROP_XI_ACQ_TIMING_MODE = 538

CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_COMMIT = 552
CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_SIZE = 550

CAP_PROP_XI_AEAG = 415

CAP_PROP_XI_AEAG_LEVEL = 419

CAP_PROP_XI_AEAG_ROI_HEIGHT = 442

CAP_PROP_XI_AEAG_ROI_OFFSET_X = 439
CAP_PROP_XI_AEAG_ROI_OFFSET_Y = 440

CAP_PROP_XI_AEAG_ROI_WIDTH = 441

CAP_PROP_XI_AE_MAX_LIMIT = 417

CAP_PROP_XI_AG_MAX_LIMIT = 418

CAP_PROP_XI_APPLY_CMS = 471

CAP_PROP_XI_AUTO_BANDWIDTH_CALCULATION = 573

CAP_PROP_XI_AUTO_WB = 414

CAP_PROP_XI_AVAILABLE_BANDWIDTH = 539

CAP_PROP_XI_BINNING_HORIZONTAL = 429
CAP_PROP_XI_BINNING_PATTERN = 430
CAP_PROP_XI_BINNING_SELECTOR = 427
CAP_PROP_XI_BINNING_VERTICAL = 428

CAP_PROP_XI_BPC = 445

CAP_PROP_XI_BUFFERS_QUEUE_SIZE = 551

CAP_PROP_XI_BUFFER_POLICY = 540

CAP_PROP_XI_CC_MATRIX_00 = 479
CAP_PROP_XI_CC_MATRIX_01 = 480
CAP_PROP_XI_CC_MATRIX_02 = 481
CAP_PROP_XI_CC_MATRIX_03 = 482
CAP_PROP_XI_CC_MATRIX_10 = 483
CAP_PROP_XI_CC_MATRIX_11 = 484
CAP_PROP_XI_CC_MATRIX_12 = 485
CAP_PROP_XI_CC_MATRIX_13 = 486
CAP_PROP_XI_CC_MATRIX_20 = 487
CAP_PROP_XI_CC_MATRIX_21 = 488
CAP_PROP_XI_CC_MATRIX_22 = 489
CAP_PROP_XI_CC_MATRIX_23 = 490
CAP_PROP_XI_CC_MATRIX_30 = 491
CAP_PROP_XI_CC_MATRIX_31 = 492
CAP_PROP_XI_CC_MATRIX_32 = 493
CAP_PROP_XI_CC_MATRIX_33 = 494

CAP_PROP_XI_CHIP_TEMP = 468

CAP_PROP_XI_CMS = 470

CAP_PROP_XI_COLOR_FILTER_ARRAY = 475

CAP_PROP_XI_COLUMN_FPN_CORRECTION = 555

CAP_PROP_XI_COOLING = 466

CAP_PROP_XI_COUNTER_SELECTOR = 536
CAP_PROP_XI_COUNTER_VALUE = 537

CAP_PROP_XI_DATA_FORMAT = 401

CAP_PROP_XI_DEBOUNCE_EN = 507
CAP_PROP_XI_DEBOUNCE_POL = 510
CAP_PROP_XI_DEBOUNCE_T0 = 508
CAP_PROP_XI_DEBOUNCE_T1 = 509

CAP_PROP_XI_DEBUG_LEVEL = 572

CAP_PROP_XI_DECIMATION_HORIZONTAL = 433
CAP_PROP_XI_DECIMATION_PATTERN = 434
CAP_PROP_XI_DECIMATION_SELECTOR = 431
CAP_PROP_XI_DECIMATION_VERTICAL = 432

CAP_PROP_XI_DEFAULT_CC_MATRIX = 495

CAP_PROP_XI_DEVICE_MODEL_ID = 521

CAP_PROP_XI_DEVICE_RESET = 554
CAP_PROP_XI_DEVICE_SN = 522

CAP_PROP_XI_DOWNSAMPLING = 400

CAP_PROP_XI_DOWNSAMPLING_TYPE = 426

CAP_PROP_XI_EXPOSURE = 421

CAP_PROP_XI_EXPOSURE_BURST_COUNT = 422

CAP_PROP_XI_EXP_PRIORITY = 416

CAP_PROP_XI_FFS_ACCESS_KEY = 583

CAP_PROP_XI_FFS_FILE_ID = 594
CAP_PROP_XI_FFS_FILE_SIZE = 580

CAP_PROP_XI_FRAMERATE = 535

CAP_PROP_XI_FREE_FFS_SIZE = 581

CAP_PROP_XI_GAIN = 424

CAP_PROP_XI_GAIN_SELECTOR = 423

CAP_PROP_XI_GAMMAC = 477
CAP_PROP_XI_GAMMAY = 476

CAP_PROP_XI_GPI_LEVEL = 408
CAP_PROP_XI_GPI_MODE = 407
CAP_PROP_XI_GPI_SELECTOR = 406

CAP_PROP_XI_GPO_MODE = 410
CAP_PROP_XI_GPO_SELECTOR = 409

CAP_PROP_XI_HDR = 559

CAP_PROP_XI_HDR_KNEEPOINT_COUNT = 560

CAP_PROP_XI_HDR_T1 = 561
CAP_PROP_XI_HDR_T2 = 562

CAP_PROP_XI_HEIGHT = 452

CAP_PROP_XI_HOUS_BACK_SIDE_TEMP = 590

CAP_PROP_XI_HOUS_TEMP = 469

CAP_PROP_XI_HW_REVISION = 571

CAP_PROP_XI_IMAGE_BLACK_LEVEL = 565

CAP_PROP_XI_IMAGE_DATA_BIT_DEPTH = 462

CAP_PROP_XI_IMAGE_DATA_FORMAT = 435

CAP_PROP_XI_IMAGE_DATA_FORMAT_RGB32_ALPHA = 529

CAP_PROP_XI_IMAGE_IS_COLOR = 474

CAP_PROP_XI_IMAGE_PAYLOAD_SIZE = 530

CAP_PROP_XI_IS_COOLED = 465

CAP_PROP_XI_IS_DEVICE_EXIST = 547

CAP_PROP_XI_KNEEPOINT1 = 563
CAP_PROP_XI_KNEEPOINT2 = 564

CAP_PROP_XI_LED_MODE = 412
CAP_PROP_XI_LED_SELECTOR = 411

CAP_PROP_XI_LENS_APERTURE_VALUE = 512

CAP_PROP_XI_LENS_FEATURE = 518

CAP_PROP_XI_LENS_FEATURE_SELECTOR = 517

CAP_PROP_XI_LENS_FOCAL_LENGTH = 516

CAP_PROP_XI_LENS_FOCUS_DISTANCE = 515
CAP_PROP_XI_LENS_FOCUS_MOVE = 514

CAP_PROP_XI_LENS_FOCUS_MOVEMENT_VALUE = 513

CAP_PROP_XI_LENS_MODE = 511

CAP_PROP_XI_LIMIT_BANDWIDTH = 459

CAP_PROP_XI_LUT_EN = 541
CAP_PROP_XI_LUT_INDEX = 542
CAP_PROP_XI_LUT_VALUE = 543

CAP_PROP_XI_MANUAL_WB = 413

CAP_PROP_XI_OFFSET_X = 402
CAP_PROP_XI_OFFSET_Y = 403

CAP_PROP_XI_OUTPUT_DATA_BIT_DEPTH = 461

CAP_PROP_XI_OUTPUT_DATA_PACKING = 463

CAP_PROP_XI_OUTPUT_DATA_PACKING_TYPE = 464

CAP_PROP_XI_RECENT_FRAME = 553

CAP_PROP_XI_REGION_MODE = 595
CAP_PROP_XI_REGION_SELECTOR = 589

CAP_PROP_XI_ROW_FPN_CORRECTION = 591

CAP_PROP_XI_SENSOR_BOARD_TEMP = 596

CAP_PROP_XI_SENSOR_CLOCK_FREQ_HZ = 532
CAP_PROP_XI_SENSOR_CLOCK_FREQ_INDEX = 533

CAP_PROP_XI_SENSOR_DATA_BIT_DEPTH = 460

CAP_PROP_XI_SENSOR_FEATURE_SELECTOR = 585
CAP_PROP_XI_SENSOR_FEATURE_VALUE = 586

CAP_PROP_XI_SENSOR_MODE = 558

CAP_PROP_XI_SENSOR_OUTPUT_CHANNEL_COUNT = 534

CAP_PROP_XI_SENSOR_TAPS = 437

CAP_PROP_XI_SHARPNESS = 478

CAP_PROP_XI_SHUTTER_TYPE = 436

CAP_PROP_XI_TARGET_TEMP = 467

CAP_PROP_XI_TEST_PATTERN = 588

CAP_PROP_XI_TEST_PATTERN_GENERATOR_SELECTOR = 587

CAP_PROP_XI_TIMEOUT = 420

CAP_PROP_XI_TRANSPORT_PIXEL_FORMAT = 531

CAP_PROP_XI_TRG_DELAY = 544
CAP_PROP_XI_TRG_SELECTOR = 498
CAP_PROP_XI_TRG_SOFTWARE = 405
CAP_PROP_XI_TRG_SOURCE = 404

CAP_PROP_XI_TS_RST_MODE = 545
CAP_PROP_XI_TS_RST_SOURCE = 546

CAP_PROP_XI_USED_FFS_SIZE = 582

CAP_PROP_XI_WB_KB = 450
CAP_PROP_XI_WB_KG = 449
CAP_PROP_XI_WB_KR = 448

CAP_PROP_XI_WIDTH = 451

CAP_PROP_ZOOM = 27

CAP_PVAPI = 800

CAP_PVAPI_DECIMATION_2OUTOF16 = 8
CAP_PVAPI_DECIMATION_2OUTOF4 = 2
CAP_PVAPI_DECIMATION_2OUTOF8 = 4
CAP_PVAPI_DECIMATION_OFF = 1

CAP_PVAPI_FSTRIGMODE_FIXEDRATE = 3
CAP_PVAPI_FSTRIGMODE_FREERUN = 0
CAP_PVAPI_FSTRIGMODE_SOFTWARE = 4
CAP_PVAPI_FSTRIGMODE_SYNCIN1 = 1
CAP_PVAPI_FSTRIGMODE_SYNCIN2 = 2

CAP_PVAPI_PIXELFORMAT_BAYER16 = 4
CAP_PVAPI_PIXELFORMAT_BAYER8 = 3
CAP_PVAPI_PIXELFORMAT_BGR24 = 6
CAP_PVAPI_PIXELFORMAT_BGRA32 = 8
CAP_PVAPI_PIXELFORMAT_MONO16 = 2
CAP_PVAPI_PIXELFORMAT_MONO8 = 1
CAP_PVAPI_PIXELFORMAT_RGB24 = 5
CAP_PVAPI_PIXELFORMAT_RGBA32 = 7

CAP_QT = 500
CAP_UNICAP = 600
CAP_V4L = 200
CAP_V4L2 = 200
CAP_VFW = 200
CAP_WINRT = 1410
CAP_XIAPI = 1100

CASCADE_DO_CANNY_PRUNING = 1

CASCADE_DO_ROUGH_SEARCH = 8

CASCADE_FIND_BIGGEST_OBJECT = 4

CASCADE_SCALE_IMAGE = 2

CCL_DEFAULT = -1
CCL_GRANA = 1
CCL_WU = 0

CC_STAT_AREA = 4
CC_STAT_HEIGHT = 3
CC_STAT_LEFT = 0
CC_STAT_MAX = 5
CC_STAT_TOP = 1
CC_STAT_WIDTH = 2

CHAIN_APPROX_NONE = 1
CHAIN_APPROX_SIMPLE = 2

CHAIN_APPROX_TC89_KCOS = 4
CHAIN_APPROX_TC89_L1 = 3

CMP_EQ = 0
CMP_GE = 2
CMP_GT = 1
CMP_LE = 4
CMP_LT = 3
CMP_NE = 5

COLORMAP_AUTUMN = 0
COLORMAP_BONE = 1
COLORMAP_COOL = 8
COLORMAP_HOT = 11
COLORMAP_HSV = 9
COLORMAP_JET = 2
COLORMAP_OCEAN = 5
COLORMAP_PARULA = 12
COLORMAP_PINK = 10
COLORMAP_RAINBOW = 4
COLORMAP_SPRING = 7
COLORMAP_SUMMER = 6
COLORMAP_WINTER = 3

COLOR_BayerBG2BGR = 46

COLOR_BayerBG2BGR_EA = 135
COLOR_BayerBG2BGR_VNG = 62

COLOR_BayerBG2GRAY = 86
COLOR_BayerBG2RGB = 48

COLOR_BayerBG2RGB_EA = 137
COLOR_BayerBG2RGB_VNG = 64

COLOR_BayerGB2BGR = 47

COLOR_BayerGB2BGR_EA = 136
COLOR_BayerGB2BGR_VNG = 63

COLOR_BayerGB2GRAY = 87
COLOR_BayerGB2RGB = 49

COLOR_BayerGB2RGB_EA = 138
COLOR_BayerGB2RGB_VNG = 65

COLOR_BayerGR2BGR = 49

COLOR_BayerGR2BGR_EA = 138
COLOR_BayerGR2BGR_VNG = 65

COLOR_BayerGR2GRAY = 89
COLOR_BayerGR2RGB = 47

COLOR_BayerGR2RGB_EA = 136
COLOR_BayerGR2RGB_VNG = 63

COLOR_BayerRG2BGR = 48

COLOR_BayerRG2BGR_EA = 137
COLOR_BayerRG2BGR_VNG = 64

COLOR_BayerRG2GRAY = 88
COLOR_BayerRG2RGB = 46

COLOR_BayerRG2RGB_EA = 135
COLOR_BayerRG2RGB_VNG = 62

COLOR_BAYER_BG2BGR = 46

COLOR_BAYER_BG2BGR_EA = 135
COLOR_BAYER_BG2BGR_VNG = 62

COLOR_BAYER_BG2GRAY = 86
COLOR_BAYER_BG2RGB = 48

COLOR_BAYER_BG2RGB_EA = 137
COLOR_BAYER_BG2RGB_VNG = 64

COLOR_BAYER_GB2BGR = 47

COLOR_BAYER_GB2BGR_EA = 136
COLOR_BAYER_GB2BGR_VNG = 63

COLOR_BAYER_GB2GRAY = 87
COLOR_BAYER_GB2RGB = 49

COLOR_BAYER_GB2RGB_EA = 138
COLOR_BAYER_GB2RGB_VNG = 65

COLOR_BAYER_GR2BGR = 49

COLOR_BAYER_GR2BGR_EA = 138
COLOR_BAYER_GR2BGR_VNG = 65

COLOR_BAYER_GR2GRAY = 89
COLOR_BAYER_GR2RGB = 47

COLOR_BAYER_GR2RGB_EA = 136
COLOR_BAYER_GR2RGB_VNG = 63

COLOR_BAYER_RG2BGR = 48

COLOR_BAYER_RG2BGR_EA = 137
COLOR_BAYER_RG2BGR_VNG = 64

COLOR_BAYER_RG2GRAY = 88
COLOR_BAYER_RG2RGB = 46

COLOR_BAYER_RG2RGB_EA = 135
COLOR_BAYER_RG2RGB_VNG = 62

COLOR_BGR2BGR555 = 22
COLOR_BGR2BGR565 = 12
COLOR_BGR2BGRA = 0
COLOR_BGR2GRAY = 6
COLOR_BGR2HLS = 52

COLOR_BGR2HLS_FULL = 68

COLOR_BGR2HSV = 40

COLOR_BGR2HSV_FULL = 66

COLOR_BGR2LAB = 44
COLOR_BGR2Lab = 44
COLOR_BGR2LUV = 50
COLOR_BGR2Luv = 50
COLOR_BGR2RGB = 4
COLOR_BGR2RGBA = 2
COLOR_BGR2XYZ = 32
COLOR_BGR2YCrCb = 36

COLOR_BGR2YCR_CB = 36

COLOR_BGR2YUV = 82

COLOR_BGR2YUV_I420 = 128
COLOR_BGR2YUV_IYUV = 128
COLOR_BGR2YUV_YV12 = 132

COLOR_BGR5552BGR = 24
COLOR_BGR5552BGRA = 28
COLOR_BGR5552GRAY = 31
COLOR_BGR5552RGB = 25
COLOR_BGR5552RGBA = 29
COLOR_BGR5652BGR = 14
COLOR_BGR5652BGRA = 18
COLOR_BGR5652GRAY = 21
COLOR_BGR5652RGB = 15
COLOR_BGR5652RGBA = 19
COLOR_BGRA2BGR = 1
COLOR_BGRA2BGR555 = 26
COLOR_BGRA2BGR565 = 16
COLOR_BGRA2GRAY = 10
COLOR_BGRA2RGB = 3
COLOR_BGRA2RGBA = 5

COLOR_BGRA2YUV_I420 = 130
COLOR_BGRA2YUV_IYUV = 130
COLOR_BGRA2YUV_YV12 = 134

COLOR_COLORCVT_MAX = 139

COLOR_GRAY2BGR = 8
COLOR_GRAY2BGR555 = 30
COLOR_GRAY2BGR565 = 20
COLOR_GRAY2BGRA = 9
COLOR_GRAY2RGB = 8
COLOR_GRAY2RGBA = 9
COLOR_HLS2BGR = 60

COLOR_HLS2BGR_FULL = 72

COLOR_HLS2RGB = 61

COLOR_HLS2RGB_FULL = 73

COLOR_HSV2BGR = 54

COLOR_HSV2BGR_FULL = 70

COLOR_HSV2RGB = 55

COLOR_HSV2RGB_FULL = 71

COLOR_LAB2BGR = 56
COLOR_Lab2BGR = 56
COLOR_LAB2LBGR = 78
COLOR_Lab2LBGR = 78
COLOR_LAB2LRGB = 79
COLOR_Lab2LRGB = 79
COLOR_LAB2RGB = 57
COLOR_Lab2RGB = 57
COLOR_LBGR2Lab = 74
COLOR_LBGR2LAB = 74
COLOR_LBGR2Luv = 76
COLOR_LBGR2LUV = 76
COLOR_LRGB2LAB = 75
COLOR_LRGB2Lab = 75
COLOR_LRGB2LUV = 77
COLOR_LRGB2Luv = 77
COLOR_Luv2BGR = 58
COLOR_LUV2BGR = 58
COLOR_LUV2LBGR = 80
COLOR_Luv2LBGR = 80
COLOR_LUV2LRGB = 81
COLOR_Luv2LRGB = 81
COLOR_Luv2RGB = 59
COLOR_LUV2RGB = 59
COLOR_mRGBA2RGBA = 126

COLOR_M_RGBA2RGBA = 126

COLOR_RGB2BGR = 4
COLOR_RGB2BGR555 = 23
COLOR_RGB2BGR565 = 13
COLOR_RGB2BGRA = 2
COLOR_RGB2GRAY = 7
COLOR_RGB2HLS = 53

COLOR_RGB2HLS_FULL = 69

COLOR_RGB2HSV = 41

COLOR_RGB2HSV_FULL = 67

COLOR_RGB2LAB = 45
COLOR_RGB2Lab = 45
COLOR_RGB2Luv = 51
COLOR_RGB2LUV = 51
COLOR_RGB2RGBA = 0
COLOR_RGB2XYZ = 33
COLOR_RGB2YCrCb = 37

COLOR_RGB2YCR_CB = 37

COLOR_RGB2YUV = 83

COLOR_RGB2YUV_I420 = 127
COLOR_RGB2YUV_IYUV = 127
COLOR_RGB2YUV_YV12 = 131

COLOR_RGBA2BGR = 3
COLOR_RGBA2BGR555 = 27
COLOR_RGBA2BGR565 = 17
COLOR_RGBA2BGRA = 5
COLOR_RGBA2GRAY = 11
COLOR_RGBA2mRGBA = 125

COLOR_RGBA2M_RGBA = 125

COLOR_RGBA2RGB = 1

COLOR_RGBA2YUV_I420 = 129
COLOR_RGBA2YUV_IYUV = 129
COLOR_RGBA2YUV_YV12 = 133

COLOR_XYZ2BGR = 34
COLOR_XYZ2RGB = 35
COLOR_YCrCb2BGR = 38
COLOR_YCrCb2RGB = 39

COLOR_YCR_CB2BGR = 38
COLOR_YCR_CB2RGB = 39

COLOR_YUV2BGR = 84

COLOR_YUV2BGRA_I420 = 105
COLOR_YUV2BGRA_IYUV = 105
COLOR_YUV2BGRA_NV12 = 95
COLOR_YUV2BGRA_NV21 = 97
COLOR_YUV2BGRA_UYNV = 112
COLOR_YUV2BGRA_UYVY = 112
COLOR_YUV2BGRA_Y422 = 112
COLOR_YUV2BGRA_YUNV = 120
COLOR_YUV2BGRA_YUY2 = 120
COLOR_YUV2BGRA_YUYV = 120
COLOR_YUV2BGRA_YV12 = 103
COLOR_YUV2BGRA_YVYU = 122

COLOR_YUV2BGR_I420 = 101
COLOR_YUV2BGR_IYUV = 101
COLOR_YUV2BGR_NV12 = 91
COLOR_YUV2BGR_NV21 = 93
COLOR_YUV2BGR_UYNV = 108
COLOR_YUV2BGR_UYVY = 108
COLOR_YUV2BGR_Y422 = 108
COLOR_YUV2BGR_YUNV = 116
COLOR_YUV2BGR_YUY2 = 116
COLOR_YUV2BGR_YUYV = 116
COLOR_YUV2BGR_YV12 = 99
COLOR_YUV2BGR_YVYU = 118

COLOR_YUV2GRAY_420 = 106
COLOR_YUV2GRAY_I420 = 106
COLOR_YUV2GRAY_IYUV = 106
COLOR_YUV2GRAY_NV12 = 106
COLOR_YUV2GRAY_NV21 = 106
COLOR_YUV2GRAY_UYNV = 123
COLOR_YUV2GRAY_UYVY = 123
COLOR_YUV2GRAY_Y422 = 123
COLOR_YUV2GRAY_YUNV = 124
COLOR_YUV2GRAY_YUY2 = 124
COLOR_YUV2GRAY_YUYV = 124
COLOR_YUV2GRAY_YV12 = 106
COLOR_YUV2GRAY_YVYU = 124

COLOR_YUV2RGB = 85

COLOR_YUV2RGBA_I420 = 104
COLOR_YUV2RGBA_IYUV = 104
COLOR_YUV2RGBA_NV12 = 94
COLOR_YUV2RGBA_NV21 = 96
COLOR_YUV2RGBA_UYNV = 111
COLOR_YUV2RGBA_UYVY = 111
COLOR_YUV2RGBA_Y422 = 111
COLOR_YUV2RGBA_YUNV = 119
COLOR_YUV2RGBA_YUY2 = 119
COLOR_YUV2RGBA_YUYV = 119
COLOR_YUV2RGBA_YV12 = 102
COLOR_YUV2RGBA_YVYU = 121

COLOR_YUV2RGB_I420 = 100
COLOR_YUV2RGB_IYUV = 100
COLOR_YUV2RGB_NV12 = 90
COLOR_YUV2RGB_NV21 = 92
COLOR_YUV2RGB_UYNV = 107
COLOR_YUV2RGB_UYVY = 107
COLOR_YUV2RGB_Y422 = 107
COLOR_YUV2RGB_YUNV = 115
COLOR_YUV2RGB_YUY2 = 115
COLOR_YUV2RGB_YUYV = 115
COLOR_YUV2RGB_YV12 = 98
COLOR_YUV2RGB_YVYU = 117

COLOR_YUV420p2BGR = 99
COLOR_YUV420P2BGR = 99
COLOR_YUV420P2BGRA = 103
COLOR_YUV420p2BGRA = 103
COLOR_YUV420p2GRAY = 106
COLOR_YUV420P2GRAY = 106
COLOR_YUV420p2RGB = 98
COLOR_YUV420P2RGB = 98
COLOR_YUV420P2RGBA = 102
COLOR_YUV420p2RGBA = 102
COLOR_YUV420SP2BGR = 93
COLOR_YUV420sp2BGR = 93
COLOR_YUV420sp2BGRA = 97
COLOR_YUV420SP2BGRA = 97
COLOR_YUV420sp2GRAY = 106
COLOR_YUV420SP2GRAY = 106
COLOR_YUV420SP2RGB = 92
COLOR_YUV420sp2RGB = 92
COLOR_YUV420SP2RGBA = 96
COLOR_YUV420sp2RGBA = 96

COVAR_COLS = 16
COVAR_NORMAL = 1
COVAR_ROWS = 8
COVAR_SCALE = 4
COVAR_SCRAMBLED = 0

COVAR_USE_AVG = 2

CvFeatureParams_HAAR = 0
CvFeatureParams_HOG = 2
CvFeatureParams_LBP = 1

CV_16S = 3
CV_16SC1 = 3
CV_16SC2 = 11
CV_16SC3 = 19
CV_16SC4 = 27
CV_16U = 2
CV_16UC1 = 2
CV_16UC2 = 10
CV_16UC3 = 18
CV_16UC4 = 26
CV_32F = 5
CV_32FC1 = 5
CV_32FC2 = 13
CV_32FC3 = 21
CV_32FC4 = 29
CV_32S = 4
CV_32SC1 = 4
CV_32SC2 = 12
CV_32SC3 = 20
CV_32SC4 = 28
CV_64F = 6
CV_64FC1 = 6
CV_64FC2 = 14
CV_64FC3 = 22
CV_64FC4 = 30
CV_8S = 1
CV_8SC1 = 1
CV_8SC2 = 9
CV_8SC3 = 17
CV_8SC4 = 25
CV_8U = 0
CV_8UC1 = 0
CV_8UC2 = 8
CV_8UC3 = 16
CV_8UC4 = 24

CV_FEATURE_PARAMS_HAAR = 0
CV_FEATURE_PARAMS_HOG = 2
CV_FEATURE_PARAMS_LBP = 1

DCT_INVERSE = 1
DCT_ROWS = 4

DECOMP_CHOLESKY = 3
DECOMP_EIG = 2
DECOMP_LU = 0
DECOMP_NORMAL = 16
DECOMP_QR = 4
DECOMP_SVD = 1

DescriptorMatcher_BRUTEFORCE = 2

DescriptorMatcher_BRUTEFORCE_HAMMING = 4
DescriptorMatcher_BRUTEFORCE_HAMMINGLUT = 5
DescriptorMatcher_BRUTEFORCE_L1 = 3
DescriptorMatcher_BRUTEFORCE_SL2 = 6

DescriptorMatcher_FLANNBASED = 1

DESCRIPTOR_MATCHER_BRUTEFORCE = 2

DESCRIPTOR_MATCHER_BRUTEFORCE_HAMMING = 4
DESCRIPTOR_MATCHER_BRUTEFORCE_HAMMINGLUT = 5
DESCRIPTOR_MATCHER_BRUTEFORCE_L1 = 3
DESCRIPTOR_MATCHER_BRUTEFORCE_SL2 = 6

DESCRIPTOR_MATCHER_FLANNBASED = 1

DFT_COMPLEX_OUTPUT = 16

DFT_INVERSE = 1

DFT_REAL_OUTPUT = 32

DFT_ROWS = 4
DFT_SCALE = 2

DIST_C = 3
DIST_FAIR = 5
DIST_HUBER = 7
DIST_L1 = 1
DIST_L12 = 4
DIST_L2 = 2

DIST_LABEL_CCOMP = 0
DIST_LABEL_PIXEL = 1

DIST_MASK_3 = 3
DIST_MASK_5 = 5
DIST_MASK_PRECISE = 0

DIST_USER = -1
DIST_WELSCH = 6

DrawMatchesFlags_DEFAULT = 0

DrawMatchesFlags_DRAW_OVER_OUTIMG = 1

DrawMatchesFlags_DRAW_RICH_KEYPOINTS = 4

DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS = 2

DRAW_MATCHES_FLAGS_DEFAULT = 0

DRAW_MATCHES_FLAGS_DRAW_OVER_OUTIMG = 1

DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS = 4

DRAW_MATCHES_FLAGS_NOT_DRAW_SINGLE_POINTS = 2

EVENT_FLAG_ALTKEY = 32
EVENT_FLAG_CTRLKEY = 8
EVENT_FLAG_LBUTTON = 1
EVENT_FLAG_MBUTTON = 4
EVENT_FLAG_RBUTTON = 2
EVENT_FLAG_SHIFTKEY = 16

EVENT_LBUTTONDBLCLK = 7
EVENT_LBUTTONDOWN = 1
EVENT_LBUTTONUP = 4
EVENT_MBUTTONDBLCLK = 9
EVENT_MBUTTONDOWN = 3
EVENT_MBUTTONUP = 6
EVENT_MOUSEHWHEEL = 11
EVENT_MOUSEMOVE = 0
EVENT_MOUSEWHEEL = 10
EVENT_RBUTTONDBLCLK = 8
EVENT_RBUTTONDOWN = 2
EVENT_RBUTTONUP = 5

FastFeatureDetector_FAST_N = 10002

FastFeatureDetector_NONMAX_SUPPRESSION = 10001

FastFeatureDetector_THRESHOLD = 10000

FastFeatureDetector_TYPE_5_8 = 0

FastFeatureDetector_TYPE_7_12 = 1

FastFeatureDetector_TYPE_9_16 = 2

FAST_FEATURE_DETECTOR_FAST_N = 10002

FAST_FEATURE_DETECTOR_NONMAX_SUPPRESSION = 10001

FAST_FEATURE_DETECTOR_THRESHOLD = 10000

FAST_FEATURE_DETECTOR_TYPE_5_8 = 0

FAST_FEATURE_DETECTOR_TYPE_7_12 = 1

FAST_FEATURE_DETECTOR_TYPE_9_16 = 2

FileNode_EMPTY = 32
FileNode_FLOAT = 2
FileNode_FLOW = 8
FileNode_INT = 1
FileNode_MAP = 6
FileNode_NAMED = 64
FileNode_NONE = 0
FileNode_REAL = 2
FileNode_REF = 4
FileNode_SEQ = 5
FileNode_STR = 3
FileNode_STRING = 3

FileNode_TYPE_MASK = 7

FileNode_USER = 16

FileStorage_APPEND = 2
FileStorage_BASE64 = 64

FileStorage_FORMAT_AUTO = 0
FileStorage_FORMAT_JSON = 24
FileStorage_FORMAT_MASK = 56
FileStorage_FORMAT_XML = 8
FileStorage_FORMAT_YAML = 16

FileStorage_INSIDE_MAP = 4

FileStorage_MEMORY = 4

FileStorage_NAME_EXPECTED = 2

FileStorage_READ = 0
FileStorage_UNDEFINED = 0

FileStorage_VALUE_EXPECTED = 1

FileStorage_WRITE = 1

FileStorage_WRITE_BASE64 = 65

FILE_NODE_EMPTY = 32
FILE_NODE_FLOAT = 2
FILE_NODE_FLOW = 8
FILE_NODE_INT = 1
FILE_NODE_MAP = 6
FILE_NODE_NAMED = 64
FILE_NODE_NONE = 0
FILE_NODE_REAL = 2
FILE_NODE_REF = 4
FILE_NODE_SEQ = 5
FILE_NODE_STR = 3
FILE_NODE_STRING = 3

FILE_NODE_TYPE_MASK = 7

FILE_NODE_USER = 16

FILE_STORAGE_APPEND = 2
FILE_STORAGE_BASE64 = 64

FILE_STORAGE_FORMAT_AUTO = 0
FILE_STORAGE_FORMAT_JSON = 24
FILE_STORAGE_FORMAT_MASK = 56
FILE_STORAGE_FORMAT_XML = 8
FILE_STORAGE_FORMAT_YAML = 16

FILE_STORAGE_INSIDE_MAP = 4

FILE_STORAGE_MEMORY = 4

FILE_STORAGE_NAME_EXPECTED = 2

FILE_STORAGE_READ = 0
FILE_STORAGE_UNDEFINED = 0

FILE_STORAGE_VALUE_EXPECTED = 1

FILE_STORAGE_WRITE = 1

FILE_STORAGE_WRITE_BASE64 = 65

FILLED = -1

FLOODFILL_FIXED_RANGE = 65536

FLOODFILL_MASK_ONLY = 131072

FM_7POINT = 1
FM_8POINT = 2
FM_LMEDS = 4
FM_RANSAC = 8

FONT_HERSHEY_COMPLEX = 3

FONT_HERSHEY_COMPLEX_SMALL = 5

FONT_HERSHEY_DUPLEX = 2
FONT_HERSHEY_PLAIN = 1

FONT_HERSHEY_SCRIPT_COMPLEX = 7
FONT_HERSHEY_SCRIPT_SIMPLEX = 6

FONT_HERSHEY_SIMPLEX = 0
FONT_HERSHEY_TRIPLEX = 4

FONT_ITALIC = 16

Formatter_FMT_C = 5

FORMATTER_FMT_C = 5

Formatter_FMT_CSV = 2

FORMATTER_FMT_CSV = 2
FORMATTER_FMT_DEFAULT = 0

Formatter_FMT_DEFAULT = 0

FORMATTER_FMT_MATLAB = 1

Formatter_FMT_MATLAB = 1
Formatter_FMT_NUMPY = 4

FORMATTER_FMT_NUMPY = 4
FORMATTER_FMT_PYTHON = 3

Formatter_FMT_PYTHON = 3

GC_BGD = 0
GC_EVAL = 2
GC_FGD = 1

GC_INIT_WITH_MASK = 1
GC_INIT_WITH_RECT = 0

GC_PR_BGD = 2
GC_PR_FGD = 3

GEMM_1_T = 1

GEMM_2_T = 2

GEMM_3_T = 4

Hamming_normType = 6

HAMMING_NORM_TYPE = 6

HISTCMP_BHATTACHARYYA = 3
HISTCMP_CHISQR = 1

HISTCMP_CHISQR_ALT = 4

HISTCMP_CORREL = 0
HISTCMP_HELLINGER = 3
HISTCMP_INTERSECT = 2

HISTCMP_KL_DIV = 5

HOGDESCRIPTOR_DEFAULT_NLEVELS = 64

HOGDescriptor_DEFAULT_NLEVELS = 64

HOGDESCRIPTOR_L2HYS = 0

HOGDescriptor_L2Hys = 0

HOUGH_GRADIENT = 3

HOUGH_MULTI_SCALE = 2

HOUGH_PROBABILISTIC = 1
HOUGH_STANDARD = 0

IMREAD_ANYCOLOR = 4
IMREAD_ANYDEPTH = 2
IMREAD_COLOR = 1
IMREAD_GRAYSCALE = 0

IMREAD_IGNORE_ORIENTATION = 128

IMREAD_LOAD_GDAL = 8

IMREAD_REDUCED_COLOR_2 = 17
IMREAD_REDUCED_COLOR_4 = 33
IMREAD_REDUCED_COLOR_8 = 65

IMREAD_REDUCED_GRAYSCALE_2 = 16
IMREAD_REDUCED_GRAYSCALE_4 = 32
IMREAD_REDUCED_GRAYSCALE_8 = 64

IMREAD_UNCHANGED = -1

IMWRITE_JPEG_CHROMA_QUALITY = 6

IMWRITE_JPEG_LUMA_QUALITY = 5

IMWRITE_JPEG_OPTIMIZE = 3
IMWRITE_JPEG_PROGRESSIVE = 2
IMWRITE_JPEG_QUALITY = 1

IMWRITE_JPEG_RST_INTERVAL = 4

IMWRITE_PAM_FORMAT_BLACKANDWHITE = 1
IMWRITE_PAM_FORMAT_GRAYSCALE = 2

IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA = 3

IMWRITE_PAM_FORMAT_NULL = 0
IMWRITE_PAM_FORMAT_RGB = 4

IMWRITE_PAM_FORMAT_RGB_ALPHA = 5

IMWRITE_PAM_TUPLETYPE = 128

IMWRITE_PNG_BILEVEL = 18
IMWRITE_PNG_COMPRESSION = 16
IMWRITE_PNG_STRATEGY = 17

IMWRITE_PNG_STRATEGY_DEFAULT = 0
IMWRITE_PNG_STRATEGY_FILTERED = 1
IMWRITE_PNG_STRATEGY_FIXED = 4

IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY = 2

IMWRITE_PNG_STRATEGY_RLE = 3

IMWRITE_PXM_BINARY = 32

IMWRITE_WEBP_QUALITY = 64

INPAINT_NS = 0
INPAINT_TELEA = 1

INTERSECT_FULL = 2
INTERSECT_NONE = 0
INTERSECT_PARTIAL = 1

INTER_AREA = 3
INTER_BITS = 5
INTER_BITS2 = 10
INTER_CUBIC = 2
INTER_LANCZOS4 = 4
INTER_LINEAR = 1
INTER_MAX = 7
INTER_NEAREST = 0

INTER_TAB_SIZE = 32
INTER_TAB_SIZE2 = 1024

KAZE_DIFF_CHARBONNIER = 3

KAZE_DIFF_PM_G1 = 0
KAZE_DIFF_PM_G2 = 1

KAZE_DIFF_WEICKERT = 2

KMEANS_PP_CENTERS = 2

KMEANS_RANDOM_CENTERS = 0

KMEANS_USE_INITIAL_LABELS = 1

LDR_SIZE = 256

LINE_4 = 4
LINE_8 = 8
LINE_AA = 16

LMEDS = 4

LSD_REFINE_ADV = 2
LSD_REFINE_NONE = 0
LSD_REFINE_STD = 1

MARKER_CROSS = 0
MARKER_DIAMOND = 3
MARKER_SQUARE = 4
MARKER_STAR = 2

MARKER_TILTED_CROSS = 1

MARKER_TRIANGLE_DOWN = 6
MARKER_TRIANGLE_UP = 5

MAT_AUTO_STEP = 0

Mat_AUTO_STEP = 0

Mat_CONTINUOUS_FLAG = 16384

MAT_CONTINUOUS_FLAG = 16384

MAT_DEPTH_MASK = 7

Mat_DEPTH_MASK = 7

Mat_MAGIC_MASK = 4294901760

MAT_MAGIC_MASK = 4294901760

Mat_MAGIC_VAL = 1124007936

MAT_MAGIC_VAL = 1124007936

Mat_SUBMATRIX_FLAG = 32768

MAT_SUBMATRIX_FLAG = 32768

Mat_TYPE_MASK = 4095

MAT_TYPE_MASK = 4095

MIXED_CLONE = 2

MONOCHROME_TRANSFER = 3

MORPH_BLACKHAT = 6
MORPH_CLOSE = 3
MORPH_CROSS = 1
MORPH_DILATE = 1
MORPH_ELLIPSE = 2
MORPH_ERODE = 0
MORPH_GRADIENT = 4
MORPH_HITMISS = 7
MORPH_OPEN = 2
MORPH_RECT = 0
MORPH_TOPHAT = 5

MOTION_AFFINE = 2
MOTION_EUCLIDEAN = 1
MOTION_HOMOGRAPHY = 3
MOTION_TRANSLATION = 0

NORMAL_CLONE = 1

NORMCONV_FILTER = 2

NORM_HAMMING = 6
NORM_HAMMING2 = 7
NORM_INF = 1
NORM_L1 = 2
NORM_L2 = 4
NORM_L2SQR = 5
NORM_MINMAX = 32
NORM_RELATIVE = 8

NORM_TYPE_MASK = 7

OPTFLOW_FARNEBACK_GAUSSIAN = 256

OPTFLOW_LK_GET_MIN_EIGENVALS = 8

OPTFLOW_USE_INITIAL_FLOW = 4

ORB_FAST_SCORE = 1

ORB_HARRIS_SCORE = 0

ORB_kBytes = 32

ORB_K_BYTES = 32

Param_ALGORITHM = 6

PARAM_ALGORITHM = 6

Param_BOOLEAN = 1

PARAM_BOOLEAN = 1
PARAM_FLOAT = 7

Param_FLOAT = 7

PARAM_INT = 0

Param_INT = 0

PARAM_MAT = 4

Param_MAT = 4

Param_MAT_VECTOR = 5

PARAM_MAT_VECTOR = 5

Param_REAL = 2

PARAM_REAL = 2

Param_STRING = 3

PARAM_STRING = 3
PARAM_UCHAR = 11

Param_UCHAR = 11

PARAM_UINT64 = 9

Param_UINT64 = 9

Param_UNSIGNED_INT = 8

PARAM_UNSIGNED_INT = 8

PCA_DATA_AS_COL = 1
PCA_DATA_AS_ROW = 0

PCA_USE_AVG = 2

PROJ_SPHERICAL_EQRECT = 1
PROJ_SPHERICAL_ORTHO = 0

QT_CHECKBOX = 1

QT_FONT_BLACK = 87
QT_FONT_BOLD = 75
QT_FONT_DEMIBOLD = 63
QT_FONT_LIGHT = 25
QT_FONT_NORMAL = 50

QT_NEW_BUTTONBAR = 1024

QT_PUSH_BUTTON = 0

QT_RADIOBOX = 2

QT_STYLE_ITALIC = 1
QT_STYLE_NORMAL = 0
QT_STYLE_OBLIQUE = 2

RANSAC = 8

RECURS_FILTER = 1

REDUCE_AVG = 1
REDUCE_MAX = 2
REDUCE_MIN = 3
REDUCE_SUM = 0

RETR_CCOMP = 2
RETR_EXTERNAL = 0
RETR_FLOODFILL = 4
RETR_LIST = 1
RETR_TREE = 3

RHO = 16

RNG_NORMAL = 1
RNG_UNIFORM = 0

ROTATE_180 = 1

ROTATE_90_CLOCKWISE = 0
ROTATE_90_COUNTERCLOCKWISE = 2

SOLVELP_MULTI = 1
SOLVELP_SINGLE = 0
SOLVELP_UNBOUNDED = -2
SOLVELP_UNFEASIBLE = -1

SOLVEPNP_DLS = 3
SOLVEPNP_EPNP = 1
SOLVEPNP_ITERATIVE = 0
SOLVEPNP_P3P = 2
SOLVEPNP_UPNP = 4

SORT_ASCENDING = 0
SORT_DESCENDING = 16

SORT_EVERY_COLUMN = 1
SORT_EVERY_ROW = 0

SparseMat_HASH_BIT = 2147483648
SparseMat_HASH_SCALE = 1540483477

SparseMat_MAGIC_VAL = 1123876864

SparseMat_MAX_DIM = 32

SPARSE_MAT_HASH_BIT = 2147483648
SPARSE_MAT_HASH_SCALE = 1540483477

SPARSE_MAT_MAGIC_VAL = 1123876864

SPARSE_MAT_MAX_DIM = 32

StereoBM_PREFILTER_NORMALIZED_RESPONSE = 0

StereoBM_PREFILTER_XSOBEL = 1

StereoMatcher_DISP_SCALE = 16
StereoMatcher_DISP_SHIFT = 4

StereoSGBM_MODE_HH = 1
StereoSGBM_MODE_SGBM = 0

StereoSGBM_MODE_SGBM_3WAY = 2

STEREO_BM_PREFILTER_NORMALIZED_RESPONSE = 0

STEREO_BM_PREFILTER_XSOBEL = 1

STEREO_MATCHER_DISP_SCALE = 16
STEREO_MATCHER_DISP_SHIFT = 4

STEREO_SGBM_MODE_HH = 1
STEREO_SGBM_MODE_SGBM = 0

STEREO_SGBM_MODE_SGBM_3WAY = 2

Stitcher_ERR_CAMERA_PARAMS_ADJUST_FAIL = 3

STITCHER_ERR_CAMERA_PARAMS_ADJUST_FAIL = 3

Stitcher_ERR_HOMOGRAPHY_EST_FAIL = 2

STITCHER_ERR_HOMOGRAPHY_EST_FAIL = 2

STITCHER_ERR_NEED_MORE_IMGS = 1

Stitcher_ERR_NEED_MORE_IMGS = 1

Stitcher_OK = 0

STITCHER_OK = 0

STITCHER_ORIG_RESOL = -1

Stitcher_ORIG_RESOL = -1

STITCHER_PANORAMA = 0

Stitcher_PANORAMA = 0

STITCHER_SCANS = 1

Stitcher_SCANS = 1

SUBDIV2D_NEXT_AROUND_DST = 34

Subdiv2D_NEXT_AROUND_DST = 34
Subdiv2D_NEXT_AROUND_LEFT = 19

SUBDIV2D_NEXT_AROUND_LEFT = 19
SUBDIV2D_NEXT_AROUND_ORG = 0

Subdiv2D_NEXT_AROUND_ORG = 0

SUBDIV2D_NEXT_AROUND_RIGHT = 49

Subdiv2D_NEXT_AROUND_RIGHT = 49

Subdiv2D_PREV_AROUND_DST = 51

SUBDIV2D_PREV_AROUND_DST = 51

Subdiv2D_PREV_AROUND_LEFT = 32

SUBDIV2D_PREV_AROUND_LEFT = 32
SUBDIV2D_PREV_AROUND_ORG = 17

Subdiv2D_PREV_AROUND_ORG = 17

SUBDIV2D_PREV_AROUND_RIGHT = 2

Subdiv2D_PREV_AROUND_RIGHT = 2

SUBDIV2D_PTLOC_ERROR = -2

Subdiv2D_PTLOC_ERROR = -2

SUBDIV2D_PTLOC_INSIDE = 0

Subdiv2D_PTLOC_INSIDE = 0

SUBDIV2D_PTLOC_ON_EDGE = 2

Subdiv2D_PTLOC_ON_EDGE = 2

SUBDIV2D_PTLOC_OUTSIDE_RECT = -1

Subdiv2D_PTLOC_OUTSIDE_RECT = -1

SUBDIV2D_PTLOC_VERTEX = 1

Subdiv2D_PTLOC_VERTEX = 1

SVD_FULL_UV = 4

SVD_MODIFY_A = 1

SVD_NO_UV = 2

TermCriteria_COUNT = 1
TermCriteria_EPS = 2

TermCriteria_MAX_ITER = 1

TERM_CRITERIA_COUNT = 1
TERM_CRITERIA_EPS = 2

TERM_CRITERIA_MAX_ITER = 1

THRESH_BINARY = 0

THRESH_BINARY_INV = 1

THRESH_MASK = 7
THRESH_OTSU = 8
THRESH_TOZERO = 3

THRESH_TOZERO_INV = 4

THRESH_TRIANGLE = 16
THRESH_TRUNC = 2

TM_CCOEFF = 4

TM_CCOEFF_NORMED = 5

TM_CCORR = 2

TM_CCORR_NORMED = 3

TM_SQDIFF = 0

TM_SQDIFF_NORMED = 1

TrackerKCF_CN = 2
TrackerKCF_CUSTOM = 4
TrackerKCF_GRAY = 1

TrackerSamplerCSC_MODE_DETECT = 5

TrackerSamplerCSC_MODE_INIT_NEG = 2
TrackerSamplerCSC_MODE_INIT_POS = 1

TrackerSamplerCSC_MODE_TRACK_NEG = 4
TrackerSamplerCSC_MODE_TRACK_POS = 3

TrackerSamplerCS_MODE_CLASSIFY = 3
TrackerSamplerCS_MODE_NEGATIVE = 2
TrackerSamplerCS_MODE_POSITIVE = 1

TRACKER_KCF_CN = 2
TRACKER_KCF_CUSTOM = 4
TRACKER_KCF_GRAY = 1

TRACKER_SAMPLER_CSC_MODE_DETECT = 5

TRACKER_SAMPLER_CSC_MODE_INIT_NEG = 2
TRACKER_SAMPLER_CSC_MODE_INIT_POS = 1

TRACKER_SAMPLER_CSC_MODE_TRACK_NEG = 4
TRACKER_SAMPLER_CSC_MODE_TRACK_POS = 3

TRACKER_SAMPLER_CS_MODE_CLASSIFY = 3
TRACKER_SAMPLER_CS_MODE_NEGATIVE = 2
TRACKER_SAMPLER_CS_MODE_POSITIVE = 1

UMatData_COPY_ON_MAP = 1

UMatData_DEVICE_COPY_OBSOLETE = 4

UMatData_DEVICE_MEM_MAPPED = 64

UMatData_HOST_COPY_OBSOLETE = 2

UMatData_TEMP_COPIED_UMAT = 24

UMatData_TEMP_UMAT = 8

UMatData_USER_ALLOCATED = 32

UMAT_AUTO_STEP = 0

UMat_AUTO_STEP = 0

UMAT_CONTINUOUS_FLAG = 16384

UMat_CONTINUOUS_FLAG = 16384

UMAT_DATA_COPY_ON_MAP = 1

UMAT_DATA_DEVICE_COPY_OBSOLETE = 4

UMAT_DATA_DEVICE_MEM_MAPPED = 64

UMAT_DATA_HOST_COPY_OBSOLETE = 2

UMAT_DATA_TEMP_COPIED_UMAT = 24

UMAT_DATA_TEMP_UMAT = 8

UMAT_DATA_USER_ALLOCATED = 32

UMat_DEPTH_MASK = 7

UMAT_DEPTH_MASK = 7

UMAT_MAGIC_MASK = 4294901760

UMat_MAGIC_MASK = 4294901760

UMAT_MAGIC_VAL = 1124007936

UMat_MAGIC_VAL = 1124007936

UMAT_SUBMATRIX_FLAG = 32768

UMat_SUBMATRIX_FLAG = 32768

UMAT_TYPE_MASK = 4095

UMat_TYPE_MASK = 4095

USAGE_ALLOCATE_DEVICE_MEMORY = 2

USAGE_ALLOCATE_HOST_MEMORY = 1

USAGE_ALLOCATE_SHARED_MEMORY = 4

USAGE_DEFAULT = 0

VIDEOWRITER_PROP_FRAMEBYTES = 2
VIDEOWRITER_PROP_NSTRIPES = 3
VIDEOWRITER_PROP_QUALITY = 1

WARP_FILL_OUTLIERS = 8

WARP_INVERSE_MAP = 16

WINDOW_AUTOSIZE = 1
WINDOW_FREERATIO = 256
WINDOW_FULLSCREEN = 1

WINDOW_GUI_EXPANDED = 0
WINDOW_GUI_NORMAL = 16

WINDOW_KEEPRATIO = 0
WINDOW_NORMAL = 0
WINDOW_OPENGL = 4096

WND_PROP_ASPECT_RATIO = 2

WND_PROP_AUTOSIZE = 1
WND_PROP_FULLSCREEN = 0
WND_PROP_OPENGL = 3
WND_PROP_VISIBLE = 4

_InputArray_CUDA_GPU_MAT = 589824

_InputArray_CUDA_HOST_MEM = 524288

_InputArray_EXPR = 393216

_InputArray_FIXED_SIZE = 1073741824
_InputArray_FIXED_TYPE = -2147483648

_InputArray_KIND_MASK = 2031616
_InputArray_KIND_SHIFT = 16

_InputArray_MAT = 65536
_InputArray_MATX = 131072
_InputArray_NONE = 0

_InputArray_OPENGL_BUFFER = 458752

_InputArray_STD_BOOL_VECTOR = 786432

_InputArray_STD_VECTOR = 196608

_InputArray_STD_VECTOR_CUDA_GPU_MAT = 851968

_InputArray_STD_VECTOR_MAT = 327680
_InputArray_STD_VECTOR_UMAT = 720896
_InputArray_STD_VECTOR_VECTOR = 262144

_InputArray_UMAT = 655360

_INPUT_ARRAY_CUDA_GPU_MAT = 589824

_INPUT_ARRAY_CUDA_HOST_MEM = 524288

_INPUT_ARRAY_EXPR = 393216

_INPUT_ARRAY_FIXED_SIZE = 1073741824
_INPUT_ARRAY_FIXED_TYPE = -2147483648

_INPUT_ARRAY_KIND_MASK = 2031616
_INPUT_ARRAY_KIND_SHIFT = 16

_INPUT_ARRAY_MAT = 65536
_INPUT_ARRAY_MATX = 131072
_INPUT_ARRAY_NONE = 0

_INPUT_ARRAY_OPENGL_BUFFER = 458752

_INPUT_ARRAY_STD_BOOL_VECTOR = 786432

_INPUT_ARRAY_STD_VECTOR = 196608

_INPUT_ARRAY_STD_VECTOR_CUDA_GPU_MAT = 851968

_INPUT_ARRAY_STD_VECTOR_MAT = 327680
_INPUT_ARRAY_STD_VECTOR_UMAT = 720896
_INPUT_ARRAY_STD_VECTOR_VECTOR = 262144

_INPUT_ARRAY_UMAT = 655360

_OutputArray_DEPTH_MASK_16S = 8
_OutputArray_DEPTH_MASK_16U = 4
_OutputArray_DEPTH_MASK_32F = 32
_OutputArray_DEPTH_MASK_32S = 16
_OutputArray_DEPTH_MASK_64F = 64
_OutputArray_DEPTH_MASK_8S = 2
_OutputArray_DEPTH_MASK_8U = 1
_OutputArray_DEPTH_MASK_ALL = 127

_OutputArray_DEPTH_MASK_ALL_BUT_8S = 125

_OutputArray_DEPTH_MASK_FLT = 96

_OUTPUT_ARRAY_DEPTH_MASK_16S = 8
_OUTPUT_ARRAY_DEPTH_MASK_16U = 4
_OUTPUT_ARRAY_DEPTH_MASK_32F = 32
_OUTPUT_ARRAY_DEPTH_MASK_32S = 16
_OUTPUT_ARRAY_DEPTH_MASK_64F = 64
_OUTPUT_ARRAY_DEPTH_MASK_8S = 2
_OUTPUT_ARRAY_DEPTH_MASK_8U = 1
_OUTPUT_ARRAY_DEPTH_MASK_ALL = 127

_OUTPUT_ARRAY_DEPTH_MASK_ALL_BUT_8S = 125

_OUTPUT_ARRAY_DEPTH_MASK_FLT = 96

__UMAT_USAGE_FLAGS_32BIT = 2147483647

__version__ = '3.2.0'

# functions

def absdiff(src1, src2, dst=None): # real signature unknown; restored from __doc__
    """ absdiff(src1, src2[, dst]) -> dst """
    pass

def accumulate(src, dst, mask=None): # real signature unknown; restored from __doc__
    """ accumulate(src, dst[, mask]) -> dst """
    pass

def accumulateProduct(src1, src2, dst, mask=None): # real signature unknown; restored from __doc__
    """ accumulateProduct(src1, src2, dst[, mask]) -> dst """
    pass

def accumulateSquare(src, dst, mask=None): # real signature unknown; restored from __doc__
    """ accumulateSquare(src, dst[, mask]) -> dst """
    pass

def accumulateWeighted(src, dst, alpha, mask=None): # real signature unknown; restored from __doc__
    """ accumulateWeighted(src, dst, alpha[, mask]) -> dst """
    pass

def adaptiveThreshold(src, maxValue, adaptiveMethod, thresholdType, blockSize, C, dst=None): # real signature unknown; restored from __doc__
    """ adaptiveThreshold(src, maxValue, adaptiveMethod, thresholdType, blockSize, C[, dst]) -> dst """
    pass

def add(src1, src2, dst=None, mask=None, dtype=None): # real signature unknown; restored from __doc__
    """ add(src1, src2[, dst[, mask[, dtype]]]) -> dst """
    pass

def addText(img, text, org, nameFont, pointSize=None, color=None, weight=None, style=None, spacing=None): # real signature unknown; restored from __doc__
    """ addText(img, text, org, nameFont[, pointSize[, color[, weight[, style[, spacing]]]]]) -> None """
    pass

def addWeighted(src1, alpha, src2, beta, gamma, dst=None, dtype=None): # real signature unknown; restored from __doc__
    """ addWeighted(src1, alpha, src2, beta, gamma[, dst[, dtype]]) -> dst """
    pass

def AgastFeatureDetector_create(threshold=None, nonmaxSuppression=None, type=None): # real signature unknown; restored from __doc__
    """ AgastFeatureDetector_create([, threshold[, nonmaxSuppression[, type]]]) -> retval """
    pass

def AKAZE_create(descriptor_type=None, descriptor_size=None, descriptor_channels=None, threshold=None, nOctaves=None, nOctaveLayers=None, diffusivity=None): # real signature unknown; restored from __doc__
    """ AKAZE_create([, descriptor_type[, descriptor_size[, descriptor_channels[, threshold[, nOctaves[, nOctaveLayers[, diffusivity]]]]]]]) -> retval """
    pass

def applyColorMap(src, colormap, dst=None): # real signature unknown; restored from __doc__
    """ applyColorMap(src, colormap[, dst]) -> dst """
    pass

def approxPolyDP(curve, epsilon, closed, approxCurve=None): # real signature unknown; restored from __doc__
    """ approxPolyDP(curve, epsilon, closed[, approxCurve]) -> approxCurve """
    pass

def arcLength(curve, closed): # real signature unknown; restored from __doc__
    """ arcLength(curve, closed) -> retval """
    pass

def arrowedLine(img, pt1, pt2, color, thickness=None, line_type=None, shift=None, tipLength=None): # real signature unknown; restored from __doc__
    """ arrowedLine(img, pt1, pt2, color[, thickness[, line_type[, shift[, tipLength]]]]) -> img """
    pass

def batchDistance(src1, src2, dtype, dist=None, nidx=None, normType=None, K=None, mask=None, update=None, crosscheck=None): # real signature unknown; restored from __doc__
    """ batchDistance(src1, src2, dtype[, dist[, nidx[, normType[, K[, mask[, update[, crosscheck]]]]]]]) -> dist, nidx """
    pass

def BFMatcher(normType=None, crossCheck=None): # real signature unknown; restored from __doc__
    """ BFMatcher([, normType[, crossCheck]]) -> <BFMatcher object> """
    pass

def BFMatcher_create(normType=None, crossCheck=None): # real signature unknown; restored from __doc__
    """ BFMatcher_create([, normType[, crossCheck]]) -> retval """
    pass

def bilateralFilter(src, d, sigmaColor, sigmaSpace, dst=None, borderType=None): # real signature unknown; restored from __doc__
    """ bilateralFilter(src, d, sigmaColor, sigmaSpace[, dst[, borderType]]) -> dst """
    pass

def bitwise_and(src1, src2, dst=None, mask=None): # real signature unknown; restored from __doc__
    """ bitwise_and(src1, src2[, dst[, mask]]) -> dst """
    pass

def bitwise_not(src, dst=None, mask=None): # real signature unknown; restored from __doc__
    """ bitwise_not(src[, dst[, mask]]) -> dst """
    pass

def bitwise_or(src1, src2, dst=None, mask=None): # real signature unknown; restored from __doc__
    """ bitwise_or(src1, src2[, dst[, mask]]) -> dst """
    pass

def bitwise_xor(src1, src2, dst=None, mask=None): # real signature unknown; restored from __doc__
    """ bitwise_xor(src1, src2[, dst[, mask]]) -> dst """
    pass

def blur(src, ksize, dst=None, anchor=None, borderType=None): # real signature unknown; restored from __doc__
    """ blur(src, ksize[, dst[, anchor[, borderType]]]) -> dst """
    pass

def borderInterpolate(p, len, borderType): # real signature unknown; restored from __doc__
    """ borderInterpolate(p, len, borderType) -> retval """
    pass

def boundingRect(points): # real signature unknown; restored from __doc__
    """ boundingRect(points) -> retval """
    pass

def BOWImgDescriptorExtractor(dextractor, dmatcher): # real signature unknown; restored from __doc__
    """ BOWImgDescriptorExtractor(dextractor, dmatcher) -> <BOWImgDescriptorExtractor object> """
    pass

def BOWKMeansTrainer(clusterCount, termcrit=None, attempts=None, flags=None): # real signature unknown; restored from __doc__
    """ BOWKMeansTrainer(clusterCount[, termcrit[, attempts[, flags]]]) -> <BOWKMeansTrainer object> """
    pass

def boxFilter(src, ddepth, ksize, dst=None, anchor=None, normalize=None, borderType=None): # real signature unknown; restored from __doc__
    """ boxFilter(src, ddepth, ksize[, dst[, anchor[, normalize[, borderType]]]]) -> dst """
    pass

def boxPoints(box, points=None): # real signature unknown; restored from __doc__
    """ boxPoints(box[, points]) -> points """
    pass

def BRISK_create(thresh=None, octaves=None, patternScale=None): # real signature unknown; restored from __doc__
    """ BRISK_create([, thresh[, octaves[, patternScale]]]) -> retval  or  BRISK_create(radiusList, numberList[, dMax[, dMin[, indexChange]]]) -> retval """
    pass

def buildOpticalFlowPyramid(img, winSize, maxLevel, pyramid=None, withDerivatives=None, pyrBorder=None, derivBorder=None, tryReuseInputImage=None): # real signature unknown; restored from __doc__
    """ buildOpticalFlowPyramid(img, winSize, maxLevel[, pyramid[, withDerivatives[, pyrBorder[, derivBorder[, tryReuseInputImage]]]]]) -> retval, pyramid """
    pass

def calcBackProject(images, channels, hist, ranges, scale, dst=None): # real signature unknown; restored from __doc__
    """ calcBackProject(images, channels, hist, ranges, scale[, dst]) -> dst """
    pass

def calcCovarMatrix(samples, mean, flags, covar=None, ctype=None): # real signature unknown; restored from __doc__
    """ calcCovarMatrix(samples, mean, flags[, covar[, ctype]]) -> covar, mean """
    pass

def calcHist(images, channels, mask, histSize, ranges, hist=None, accumulate=None): # real signature unknown; restored from __doc__
    """ calcHist(images, channels, mask, histSize, ranges[, hist[, accumulate]]) -> hist """
    pass

def calcOpticalFlowFarneback(prev, next, flow, pyr_scale, levels, winsize, iterations, poly_n, poly_sigma, flags): # real signature unknown; restored from __doc__
    """ calcOpticalFlowFarneback(prev, next, flow, pyr_scale, levels, winsize, iterations, poly_n, poly_sigma, flags) -> flow """
    pass

def calcOpticalFlowPyrLK(prevImg, nextImg, prevPts, nextPts, status=None, err=None, winSize=None, maxLevel=None, criteria=None, flags=None, minEigThreshold=None): # real signature unknown; restored from __doc__
    """ calcOpticalFlowPyrLK(prevImg, nextImg, prevPts, nextPts[, status[, err[, winSize[, maxLevel[, criteria[, flags[, minEigThreshold]]]]]]]) -> nextPts, status, err """
    pass

def calibrateCamera(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs, rvecs=None, tvecs=None, flags=None, criteria=None): # real signature unknown; restored from __doc__
    """ calibrateCamera(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs[, rvecs[, tvecs[, flags[, criteria]]]]) -> retval, cameraMatrix, distCoeffs, rvecs, tvecs """
    pass

def calibrateCameraExtended(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs, rvecs=None, tvecs=None, stdDeviationsIntrinsics=None, stdDeviationsExtrinsics=None, perViewErrors=None, flags=None, criteria=None): # real signature unknown; restored from __doc__
    """ calibrateCameraExtended(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs[, rvecs[, tvecs[, stdDeviationsIntrinsics[, stdDeviationsExtrinsics[, perViewErrors[, flags[, criteria]]]]]]]) -> retval, cameraMatrix, distCoeffs, rvecs, tvecs, stdDeviationsIntrinsics, stdDeviationsExtrinsics, perViewErrors """
    pass

def calibrationMatrixValues(cameraMatrix, imageSize, apertureWidth, apertureHeight): # real signature unknown; restored from __doc__
    """ calibrationMatrixValues(cameraMatrix, imageSize, apertureWidth, apertureHeight) -> fovx, fovy, focalLength, principalPoint, aspectRatio """
    pass

def CamShift(probImage, window, criteria): # real signature unknown; restored from __doc__
    """ CamShift(probImage, window, criteria) -> retval, window """
    pass

def Canny(image, threshold1, threshold2, edges=None, apertureSize=None, L2gradient=None): # real signature unknown; restored from __doc__
    """ Canny(image, threshold1, threshold2[, edges[, apertureSize[, L2gradient]]]) -> edges  or  Canny(dx, dy, threshold1, threshold2[, edges[, L2gradient]]) -> edges """
    pass

def cartToPolar(x, y, magnitude=None, angle=None, angleInDegrees=None): # real signature unknown; restored from __doc__
    """ cartToPolar(x, y[, magnitude[, angle[, angleInDegrees]]]) -> magnitude, angle """
    pass

def CascadeClassifier(filename=None): # real signature unknown; restored from __doc__
    """ CascadeClassifier([filename]) -> <CascadeClassifier object> """
    pass

def CascadeClassifier_convert(oldcascade, newcascade): # real signature unknown; restored from __doc__
    """ CascadeClassifier_convert(oldcascade, newcascade) -> retval """
    pass

def checkHardwareSupport(feature): # real signature unknown; restored from __doc__
    """ checkHardwareSupport(feature) -> retval """
    pass

def checkRange(a, quiet=None, minVal=None, maxVal=None): # real signature unknown; restored from __doc__
    """ checkRange(a[, quiet[, minVal[, maxVal]]]) -> retval, pos """
    pass

def circle(img, center, radius, color, thickness=None, lineType=None, shift=None): # real signature unknown; restored from __doc__
    """ circle(img, center, radius, color[, thickness[, lineType[, shift]]]) -> img """
    pass

def clipLine(imgRect, pt1, pt2): # real signature unknown; restored from __doc__
    """ clipLine(imgRect, pt1, pt2) -> retval, pt1, pt2 """
    pass

def colorChange(src, mask, dst=None, red_mul=None, green_mul=None, blue_mul=None): # real signature unknown; restored from __doc__
    """ colorChange(src, mask[, dst[, red_mul[, green_mul[, blue_mul]]]]) -> dst """
    pass

def compare(src1, src2, cmpop, dst=None): # real signature unknown; restored from __doc__
    """ compare(src1, src2, cmpop[, dst]) -> dst """
    pass

def compareHist(H1, H2, method): # real signature unknown; restored from __doc__
    """ compareHist(H1, H2, method) -> retval """
    pass

def completeSymm(mtx, lowerToUpper=None): # real signature unknown; restored from __doc__
    """ completeSymm(mtx[, lowerToUpper]) -> mtx """
    pass

def composeRT(rvec1, tvec1, rvec2, tvec2, rvec3=None, tvec3=None, dr3dr1=None, dr3dt1=None, dr3dr2=None, dr3dt2=None, dt3dr1=None, dt3dt1=None, dt3dr2=None, dt3dt2=None): # real signature unknown; restored from __doc__
    """ composeRT(rvec1, tvec1, rvec2, tvec2[, rvec3[, tvec3[, dr3dr1[, dr3dt1[, dr3dr2[, dr3dt2[, dt3dr1[, dt3dt1[, dt3dr2[, dt3dt2]]]]]]]]]]) -> rvec3, tvec3, dr3dr1, dr3dt1, dr3dr2, dr3dt2, dt3dr1, dt3dt1, dt3dr2, dt3dt2 """
    pass

def computeCorrespondEpilines(points, whichImage, F, lines=None): # real signature unknown; restored from __doc__
    """ computeCorrespondEpilines(points, whichImage, F[, lines]) -> lines """
    pass

def connectedComponents(image, labels=None, connectivity=None, ltype=None): # real signature unknown; restored from __doc__
    """ connectedComponents(image[, labels[, connectivity[, ltype]]]) -> retval, labels """
    pass

def connectedComponentsWithAlgorithm(image, connectivity, ltype, ccltype, labels=None): # real signature unknown; restored from __doc__
    """ connectedComponentsWithAlgorithm(image, connectivity, ltype, ccltype[, labels]) -> retval, labels """
    pass

def connectedComponentsWithStats(image, labels=None, stats=None, centroids=None, connectivity=None, ltype=None): # real signature unknown; restored from __doc__
    """ connectedComponentsWithStats(image[, labels[, stats[, centroids[, connectivity[, ltype]]]]]) -> retval, labels, stats, centroids """
    pass

def connectedComponentsWithStatsWithAlgorithm(image, connectivity, ltype, ccltype, labels=None, stats=None, centroids=None): # real signature unknown; restored from __doc__
    """ connectedComponentsWithStatsWithAlgorithm(image, connectivity, ltype, ccltype[, labels[, stats[, centroids]]]) -> retval, labels, stats, centroids """
    pass

def contourArea(contour, oriented=None): # real signature unknown; restored from __doc__
    """ contourArea(contour[, oriented]) -> retval """
    pass

def convertFp16(src, dst=None): # real signature unknown; restored from __doc__
    """ convertFp16(src[, dst]) -> dst """
    pass

def convertMaps(map1, map2, dstmap1type, dstmap1=None, dstmap2=None, nninterpolation=None): # real signature unknown; restored from __doc__
    """ convertMaps(map1, map2, dstmap1type[, dstmap1[, dstmap2[, nninterpolation]]]) -> dstmap1, dstmap2 """
    pass

def convertPointsFromHomogeneous(src, dst=None): # real signature unknown; restored from __doc__
    """ convertPointsFromHomogeneous(src[, dst]) -> dst """
    pass

def convertPointsToHomogeneous(src, dst=None): # real signature unknown; restored from __doc__
    """ convertPointsToHomogeneous(src[, dst]) -> dst """
    pass

def convertScaleAbs(src, dst=None, alpha=None, beta=None): # real signature unknown; restored from __doc__
    """ convertScaleAbs(src[, dst[, alpha[, beta]]]) -> dst """
    pass

def convexHull(points, hull=None, clockwise=None, returnPoints=None): # real signature unknown; restored from __doc__
    """ convexHull(points[, hull[, clockwise[, returnPoints]]]) -> hull """
    pass

def convexityDefects(contour, convexhull, convexityDefects=None): # real signature unknown; restored from __doc__
    """ convexityDefects(contour, convexhull[, convexityDefects]) -> convexityDefects """
    pass

def copyMakeBorder(src, top, bottom, left, right, borderType, dst=None, value=None): # real signature unknown; restored from __doc__
    """ copyMakeBorder(src, top, bottom, left, right, borderType[, dst[, value]]) -> dst """
    pass

def cornerEigenValsAndVecs(src, blockSize, ksize, dst=None, borderType=None): # real signature unknown; restored from __doc__
    """ cornerEigenValsAndVecs(src, blockSize, ksize[, dst[, borderType]]) -> dst """
    pass

def cornerHarris(src, blockSize, ksize, k, dst=None, borderType=None): # real signature unknown; restored from __doc__
    """ cornerHarris(src, blockSize, ksize, k[, dst[, borderType]]) -> dst """
    pass

def cornerMinEigenVal(src, blockSize, dst=None, ksize=None, borderType=None): # real signature unknown; restored from __doc__
    """ cornerMinEigenVal(src, blockSize[, dst[, ksize[, borderType]]]) -> dst """
    pass

def cornerSubPix(image, corners, winSize, zeroZone, criteria): # real signature unknown; restored from __doc__
    """ cornerSubPix(image, corners, winSize, zeroZone, criteria) -> corners """
    pass

def correctMatches(F, points1, points2, newPoints1=None, newPoints2=None): # real signature unknown; restored from __doc__
    """ correctMatches(F, points1, points2[, newPoints1[, newPoints2]]) -> newPoints1, newPoints2 """
    pass

def countNonZero(src): # real signature unknown; restored from __doc__
    """ countNonZero(src) -> retval """
    pass

def createAffineTransformer(fullAffine): # real signature unknown; restored from __doc__
    """ createAffineTransformer(fullAffine) -> retval """
    pass

def createAlignMTB(max_bits=None, exclude_range=None, cut=None): # real signature unknown; restored from __doc__
    """ createAlignMTB([, max_bits[, exclude_range[, cut]]]) -> retval """
    pass

def createBackgroundSubtractorKNN(history=None, dist2Threshold=None, detectShadows=None): # real signature unknown; restored from __doc__
    """ createBackgroundSubtractorKNN([, history[, dist2Threshold[, detectShadows]]]) -> retval """
    pass

def createBackgroundSubtractorMOG2(history=None, varThreshold=None, detectShadows=None): # real signature unknown; restored from __doc__
    """ createBackgroundSubtractorMOG2([, history[, varThreshold[, detectShadows]]]) -> retval """
    pass

def createButton(buttonName, onChange, userData=None, buttonType=None, initialButtonState=None): # real signature unknown; restored from __doc__
    """ createButton(buttonName, onChange [, userData, buttonType, initialButtonState]) -> None """
    pass

def createCalibrateDebevec(samples=None, lambda_=None, random=None): # real signature unknown; restored from __doc__
    """ createCalibrateDebevec([, samples[, lambda[, random]]]) -> retval """
    pass

def createCalibrateRobertson(max_iter=None, threshold=None): # real signature unknown; restored from __doc__
    """ createCalibrateRobertson([, max_iter[, threshold]]) -> retval """
    pass

def createChiHistogramCostExtractor(nDummies=None, defaultCost=None): # real signature unknown; restored from __doc__
    """ createChiHistogramCostExtractor([, nDummies[, defaultCost]]) -> retval """
    pass

def createCLAHE(clipLimit=None, tileGridSize=None): # real signature unknown; restored from __doc__
    """ createCLAHE([, clipLimit[, tileGridSize]]) -> retval """
    pass

def createEMDHistogramCostExtractor(flag=None, nDummies=None, defaultCost=None): # real signature unknown; restored from __doc__
    """ createEMDHistogramCostExtractor([, flag[, nDummies[, defaultCost]]]) -> retval """
    pass

def createEMDL1HistogramCostExtractor(nDummies=None, defaultCost=None): # real signature unknown; restored from __doc__
    """ createEMDL1HistogramCostExtractor([, nDummies[, defaultCost]]) -> retval """
    pass

def createHanningWindow(winSize, type, dst=None): # real signature unknown; restored from __doc__
    """ createHanningWindow(winSize, type[, dst]) -> dst """
    pass

def createHausdorffDistanceExtractor(distanceFlag=None, rankProp=None): # real signature unknown; restored from __doc__
    """ createHausdorffDistanceExtractor([, distanceFlag[, rankProp]]) -> retval """
    pass

def createLineSegmentDetector(_refine=None, _scale=None, _sigma_scale=None, _quant=None, _ang_th=None, _log_eps=None, _density_th=None, _n_bins=None): # real signature unknown; restored from __doc__
    """ createLineSegmentDetector([, _refine[, _scale[, _sigma_scale[, _quant[, _ang_th[, _log_eps[, _density_th[, _n_bins]]]]]]]]) -> retval """
    pass

def createMergeDebevec(): # real signature unknown; restored from __doc__
    """ createMergeDebevec() -> retval """
    pass

def createMergeMertens(contrast_weight=None, saturation_weight=None, exposure_weight=None): # real signature unknown; restored from __doc__
    """ createMergeMertens([, contrast_weight[, saturation_weight[, exposure_weight]]]) -> retval """
    pass

def createMergeRobertson(): # real signature unknown; restored from __doc__
    """ createMergeRobertson() -> retval """
    pass

def createNormHistogramCostExtractor(flag=None, nDummies=None, defaultCost=None): # real signature unknown; restored from __doc__
    """ createNormHistogramCostExtractor([, flag[, nDummies[, defaultCost]]]) -> retval """
    pass

def createOptFlow_DualTVL1(): # real signature unknown; restored from __doc__
    """ createOptFlow_DualTVL1() -> retval """
    pass

def createShapeContextDistanceExtractor(nAngularBins=None, nRadialBins=None, innerRadius=None, outerRadius=None, iterations=None, comparer=None, transformer=None): # real signature unknown; restored from __doc__
    """ createShapeContextDistanceExtractor([, nAngularBins[, nRadialBins[, innerRadius[, outerRadius[, iterations[, comparer[, transformer]]]]]]]) -> retval """
    pass

def createStitcher(try_use_gpu=None): # real signature unknown; restored from __doc__
    """ createStitcher([, try_use_gpu]) -> retval """
    pass

def createThinPlateSplineShapeTransformer(regularizationParameter=None): # real signature unknown; restored from __doc__
    """ createThinPlateSplineShapeTransformer([, regularizationParameter]) -> retval """
    pass

def createTonemap(gamma=None): # real signature unknown; restored from __doc__
    """ createTonemap([, gamma]) -> retval """
    pass

def createTonemapDrago(gamma=None, saturation=None, bias=None): # real signature unknown; restored from __doc__
    """ createTonemapDrago([, gamma[, saturation[, bias]]]) -> retval """
    pass

def createTonemapDurand(gamma=None, contrast=None, saturation=None, sigma_space=None, sigma_color=None): # real signature unknown; restored from __doc__
    """ createTonemapDurand([, gamma[, contrast[, saturation[, sigma_space[, sigma_color]]]]]) -> retval """
    pass

def createTonemapMantiuk(gamma=None, scale=None, saturation=None): # real signature unknown; restored from __doc__
    """ createTonemapMantiuk([, gamma[, scale[, saturation]]]) -> retval """
    pass

def createTonemapReinhard(gamma=None, intensity=None, light_adapt=None, color_adapt=None): # real signature unknown; restored from __doc__
    """ createTonemapReinhard([, gamma[, intensity[, light_adapt[, color_adapt]]]]) -> retval """
    pass

def createTrackbar(trackbarName, windowName, value, count, onChange): # real signature unknown; restored from __doc__
    """ createTrackbar(trackbarName, windowName, value, count, onChange) -> None """
    pass

def cubeRoot(val): # real signature unknown; restored from __doc__
    """ cubeRoot(val) -> retval """
    pass

def cvtColor(src, code, dst=None, dstCn=None): # real signature unknown; restored from __doc__
    """ cvtColor(src, code[, dst[, dstCn]]) -> dst """
    pass

def dct(src, dst=None, flags=None): # real signature unknown; restored from __doc__
    """ dct(src[, dst[, flags]]) -> dst """
    pass

def decolor(src, grayscale=None, color_boost=None): # real signature unknown; restored from __doc__
    """ decolor(src[, grayscale[, color_boost]]) -> grayscale, color_boost """
    pass

def decomposeEssentialMat(E, R1=None, R2=None, t=None): # real signature unknown; restored from __doc__
    """ decomposeEssentialMat(E[, R1[, R2[, t]]]) -> R1, R2, t """
    pass

def decomposeHomographyMat(H, K, rotations=None, translations=None, normals=None): # real signature unknown; restored from __doc__
    """ decomposeHomographyMat(H, K[, rotations[, translations[, normals]]]) -> retval, rotations, translations, normals """
    pass

def decomposeProjectionMatrix(projMatrix, cameraMatrix=None, rotMatrix=None, transVect=None, rotMatrixX=None, rotMatrixY=None, rotMatrixZ=None, eulerAngles=None): # real signature unknown; restored from __doc__
    """ decomposeProjectionMatrix(projMatrix[, cameraMatrix[, rotMatrix[, transVect[, rotMatrixX[, rotMatrixY[, rotMatrixZ[, eulerAngles]]]]]]]) -> cameraMatrix, rotMatrix, transVect, rotMatrixX, rotMatrixY, rotMatrixZ, eulerAngles """
    pass

def demosaicing(_src, code, _dst=None, dcn=None): # real signature unknown; restored from __doc__
    """ demosaicing(_src, code[, _dst[, dcn]]) -> _dst """
    pass

def denoise_TVL1(observations, result, lambda_=None, niters=None): # real signature unknown; restored from __doc__
    """ denoise_TVL1(observations, result[, lambda[, niters]]) -> None """
    pass

def DescriptorMatcher_create(descriptorMatcherType): # real signature unknown; restored from __doc__
    """ DescriptorMatcher_create(descriptorMatcherType) -> retval  or  DescriptorMatcher_create(matcherType) -> retval """
    pass

def destroyAllWindows(): # real signature unknown; restored from __doc__
    """ destroyAllWindows() -> None """
    pass

def destroyWindow(winname): # real signature unknown; restored from __doc__
    """ destroyWindow(winname) -> None """
    pass

def detailEnhance(src, dst=None, sigma_s=None, sigma_r=None): # real signature unknown; restored from __doc__
    """ detailEnhance(src[, dst[, sigma_s[, sigma_r]]]) -> dst """
    pass

def determinant(mtx): # real signature unknown; restored from __doc__
    """ determinant(mtx) -> retval """
    pass

def dft(src, dst=None, flags=None, nonzeroRows=None): # real signature unknown; restored from __doc__
    """ dft(src[, dst[, flags[, nonzeroRows]]]) -> dst """
    pass

def dilate(src, kernel, dst=None, anchor=None, iterations=None, borderType=None, borderValue=None): # real signature unknown; restored from __doc__
    """ dilate(src, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]) -> dst """
    pass

def displayOverlay(winname, text, delayms=None): # real signature unknown; restored from __doc__
    """ displayOverlay(winname, text[, delayms]) -> None """
    pass

def displayStatusBar(winname, text, delayms=None): # real signature unknown; restored from __doc__
    """ displayStatusBar(winname, text[, delayms]) -> None """
    pass

def distanceTransform(src, distanceType, maskSize, dst=None, dstType=None): # real signature unknown; restored from __doc__
    """ distanceTransform(src, distanceType, maskSize[, dst[, dstType]]) -> dst """
    pass

def distanceTransformWithLabels(src, distanceType, maskSize, dst=None, labels=None, labelType=None): # real signature unknown; restored from __doc__
    """ distanceTransformWithLabels(src, distanceType, maskSize[, dst[, labels[, labelType]]]) -> dst, labels """
    pass

def divide(src1, src2, dst=None, scale=None, dtype=None): # real signature unknown; restored from __doc__
    """ divide(src1, src2[, dst[, scale[, dtype]]]) -> dst  or  divide(scale, src2[, dst[, dtype]]) -> dst """
    pass

def DMatch(): # real signature unknown; restored from __doc__
    """ DMatch() -> <DMatch object>  or  DMatch(_queryIdx, _trainIdx, _distance) -> <DMatch object>  or  DMatch(_queryIdx, _trainIdx, _imgIdx, _distance) -> <DMatch object> """
    pass

def drawChessboardCorners(image, patternSize, corners, patternWasFound): # real signature unknown; restored from __doc__
    """ drawChessboardCorners(image, patternSize, corners, patternWasFound) -> image """
    pass

def drawContours(image, contours, contourIdx, color, thickness=None, lineType=None, hierarchy=None, maxLevel=None, offset=None): # real signature unknown; restored from __doc__
    """ drawContours(image, contours, contourIdx, color[, thickness[, lineType[, hierarchy[, maxLevel[, offset]]]]]) -> image """
    pass

def drawKeypoints(image, keypoints, outImage, color=None, flags=None): # real signature unknown; restored from __doc__
    """ drawKeypoints(image, keypoints, outImage[, color[, flags]]) -> outImage """
    pass

def drawMarker(img, position, color, markerType=None, markerSize=None, thickness=None, line_type=None): # real signature unknown; restored from __doc__
    """ drawMarker(img, position, color[, markerType[, markerSize[, thickness[, line_type]]]]) -> img """
    pass

def drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchColor=None, singlePointColor=None, matchesMask=None, flags=None): # real signature unknown; restored from __doc__
    """ drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg[, matchColor[, singlePointColor[, matchesMask[, flags]]]]) -> outImg """
    pass

def drawMatchesKnn(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchColor=None, singlePointColor=None, matchesMask=None, flags=None): # real signature unknown; restored from __doc__
    """ drawMatchesKnn(img1, keypoints1, img2, keypoints2, matches1to2, outImg[, matchColor[, singlePointColor[, matchesMask[, flags]]]]) -> outImg """
    pass

def DualTVL1OpticalFlow_create(tau=None, lambda_=None, theta=None, nscales=None, warps=None, epsilon=None, innnerIterations=None, outerIterations=None, scaleStep=None, gamma=None, medianFiltering=None, useInitialFlow=None): # real signature unknown; restored from __doc__
    """ DualTVL1OpticalFlow_create([, tau[, lambda[, theta[, nscales[, warps[, epsilon[, innnerIterations[, outerIterations[, scaleStep[, gamma[, medianFiltering[, useInitialFlow]]]]]]]]]]]]) -> retval """
    pass

def edgePreservingFilter(src, dst=None, flags=None, sigma_s=None, sigma_r=None): # real signature unknown; restored from __doc__
    """ edgePreservingFilter(src[, dst[, flags[, sigma_s[, sigma_r]]]]) -> dst """
    pass

def eigen(src, eigenvalues=None, eigenvectors=None): # real signature unknown; restored from __doc__
    """ eigen(src[, eigenvalues[, eigenvectors]]) -> retval, eigenvalues, eigenvectors """
    pass

def ellipse(img, center, axes, angle, startAngle, endAngle, color, thickness=None, lineType=None, shift=None): # real signature unknown; restored from __doc__
    """ ellipse(img, center, axes, angle, startAngle, endAngle, color[, thickness[, lineType[, shift]]]) -> img  or  ellipse(img, box, color[, thickness[, lineType]]) -> img """
    pass

def ellipse2Poly(center, axes, angle, arcStart, arcEnd, delta): # real signature unknown; restored from __doc__
    """ ellipse2Poly(center, axes, angle, arcStart, arcEnd, delta) -> pts """
    pass

def equalizeHist(src, dst=None): # real signature unknown; restored from __doc__
    """ equalizeHist(src[, dst]) -> dst """
    pass

def erode(src, kernel, dst=None, anchor=None, iterations=None, borderType=None, borderValue=None): # real signature unknown; restored from __doc__
    """ erode(src, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]) -> dst """
    pass

def estimateAffine2D(from_, to, inliers=None, method=None, ransacReprojThreshold=None, maxIters=None, confidence=None, refineIters=None): # real signature unknown; restored from __doc__
    """ estimateAffine2D(from, to[, inliers[, method[, ransacReprojThreshold[, maxIters[, confidence[, refineIters]]]]]]) -> retval, inliers """
    pass

def estimateAffine3D(src, dst, out=None, inliers=None, ransacThreshold=None, confidence=None): # real signature unknown; restored from __doc__
    """ estimateAffine3D(src, dst[, out[, inliers[, ransacThreshold[, confidence]]]]) -> retval, out, inliers """
    pass

def estimateAffinePartial2D(from_, to, inliers=None, method=None, ransacReprojThreshold=None, maxIters=None, confidence=None, refineIters=None): # real signature unknown; restored from __doc__
    """ estimateAffinePartial2D(from, to[, inliers[, method[, ransacReprojThreshold[, maxIters[, confidence[, refineIters]]]]]]) -> retval, inliers """
    pass

def estimateRigidTransform(src, dst, fullAffine): # real signature unknown; restored from __doc__
    """ estimateRigidTransform(src, dst, fullAffine) -> retval """
    pass

def exp(src, dst=None): # real signature unknown; restored from __doc__
    """ exp(src[, dst]) -> dst """
    pass

def extractChannel(src, coi, dst=None): # real signature unknown; restored from __doc__
    """ extractChannel(src, coi[, dst]) -> dst """
    pass

def FarnebackOpticalFlow_create(numLevels=None, pyrScale=None, fastPyramids=None, winSize=None, numIters=None, polyN=None, polySigma=None, flags=None): # real signature unknown; restored from __doc__
    """ FarnebackOpticalFlow_create([, numLevels[, pyrScale[, fastPyramids[, winSize[, numIters[, polyN[, polySigma[, flags]]]]]]]]) -> retval """
    pass

def fastAtan2(y, x): # real signature unknown; restored from __doc__
    """ fastAtan2(y, x) -> retval """
    pass

def FastFeatureDetector_create(threshold=None, nonmaxSuppression=None, type=None): # real signature unknown; restored from __doc__
    """ FastFeatureDetector_create([, threshold[, nonmaxSuppression[, type]]]) -> retval """
    pass

def fastNlMeansDenoising(src, dst=None, h=None, templateWindowSize=None, searchWindowSize=None): # real signature unknown; restored from __doc__
    """ fastNlMeansDenoising(src[, dst[, h[, templateWindowSize[, searchWindowSize]]]]) -> dst  or  fastNlMeansDenoising(src, h[, dst[, templateWindowSize[, searchWindowSize[, normType]]]]) -> dst """
    pass

def fastNlMeansDenoisingColored(src, dst=None, h=None, hColor=None, templateWindowSize=None, searchWindowSize=None): # real signature unknown; restored from __doc__
    """ fastNlMeansDenoisingColored(src[, dst[, h[, hColor[, templateWindowSize[, searchWindowSize]]]]]) -> dst """
    pass

def fastNlMeansDenoisingColoredMulti(srcImgs, imgToDenoiseIndex, temporalWindowSize, dst=None, h=None, hColor=None, templateWindowSize=None, searchWindowSize=None): # real signature unknown; restored from __doc__
    """ fastNlMeansDenoisingColoredMulti(srcImgs, imgToDenoiseIndex, temporalWindowSize[, dst[, h[, hColor[, templateWindowSize[, searchWindowSize]]]]]) -> dst """
    pass

def fastNlMeansDenoisingMulti(srcImgs, imgToDenoiseIndex, temporalWindowSize, dst=None, h=None, templateWindowSize=None, searchWindowSize=None): # real signature unknown; restored from __doc__
    """ fastNlMeansDenoisingMulti(srcImgs, imgToDenoiseIndex, temporalWindowSize[, dst[, h[, templateWindowSize[, searchWindowSize]]]]) -> dst  or  fastNlMeansDenoisingMulti(srcImgs, imgToDenoiseIndex, temporalWindowSize, h[, dst[, templateWindowSize[, searchWindowSize[, normType]]]]) -> dst """
    pass

def FileNode(): # real signature unknown; restored from __doc__
    """ FileNode() -> <FileNode object> """
    pass

def FileStorage(source=None, flags=None, encoding=None): # real signature unknown; restored from __doc__
    """ FileStorage([source, flags[, encoding]]) -> <FileStorage object> """
    pass

def fillConvexPoly(img, points, color, lineType=None, shift=None): # real signature unknown; restored from __doc__
    """ fillConvexPoly(img, points, color[, lineType[, shift]]) -> img """
    pass

def fillPoly(img, pts, color, lineType=None, shift=None, offset=None): # real signature unknown; restored from __doc__
    """ fillPoly(img, pts, color[, lineType[, shift[, offset]]]) -> img """
    pass

def filter2D(src, ddepth, kernel, dst=None, anchor=None, delta=None, borderType=None): # real signature unknown; restored from __doc__
    """ filter2D(src, ddepth, kernel[, dst[, anchor[, delta[, borderType]]]]) -> dst """
    pass

def filterSpeckles(img, newVal, maxSpeckleSize, maxDiff, buf=None): # real signature unknown; restored from __doc__
    """ filterSpeckles(img, newVal, maxSpeckleSize, maxDiff[, buf]) -> img, buf """
    pass

def findChessboardCorners(image, patternSize, corners=None, flags=None): # real signature unknown; restored from __doc__
    """ findChessboardCorners(image, patternSize[, corners[, flags]]) -> retval, corners """
    pass

def findCirclesGrid(image, patternSize, centers=None, flags=None, blobDetector=None): # real signature unknown; restored from __doc__
    """ findCirclesGrid(image, patternSize[, centers[, flags[, blobDetector]]]) -> retval, centers """
    pass

def findContours(image, mode, method, contours=None, hierarchy=None, offset=None): # real signature unknown; restored from __doc__
    """ findContours(image, mode, method[, contours[, hierarchy[, offset]]]) -> image, contours, hierarchy """
    pass

def findEssentialMat(points1, points2, cameraMatrix, method=None, prob=None, threshold=None, mask=None): # real signature unknown; restored from __doc__
    """ findEssentialMat(points1, points2, cameraMatrix[, method[, prob[, threshold[, mask]]]]) -> retval, mask  or  findEssentialMat(points1, points2[, focal[, pp[, method[, prob[, threshold[, mask]]]]]]) -> retval, mask """
    pass

def findFundamentalMat(points1, points2, method=None, param1=None, param2=None, mask=None): # real signature unknown; restored from __doc__
    """ findFundamentalMat(points1, points2[, method[, param1[, param2[, mask]]]]) -> retval, mask """
    pass

def findHomography(srcPoints, dstPoints, method=None, ransacReprojThreshold=None, mask=None, maxIters=None, confidence=None): # real signature unknown; restored from __doc__
    """ findHomography(srcPoints, dstPoints[, method[, ransacReprojThreshold[, mask[, maxIters[, confidence]]]]]) -> retval, mask """
    pass

def findNonZero(src, idx=None): # real signature unknown; restored from __doc__
    """ findNonZero(src[, idx]) -> idx """
    pass

def findTransformECC(templateImage, inputImage, warpMatrix, motionType=None, criteria=None, inputMask=None): # real signature unknown; restored from __doc__
    """ findTransformECC(templateImage, inputImage, warpMatrix[, motionType[, criteria[, inputMask]]]) -> retval, warpMatrix """
    pass

def fitEllipse(points): # real signature unknown; restored from __doc__
    """ fitEllipse(points) -> retval """
    pass

def fitLine(points, distType, param, reps, aeps, line=None): # real signature unknown; restored from __doc__
    """ fitLine(points, distType, param, reps, aeps[, line]) -> line """
    pass

def FlannBasedMatcher(indexParams=None, searchParams=None): # real signature unknown; restored from __doc__
    """ FlannBasedMatcher([, indexParams[, searchParams]]) -> <FlannBasedMatcher object> """
    pass

def FlannBasedMatcher_create(): # real signature unknown; restored from __doc__
    """ FlannBasedMatcher_create() -> retval """
    pass

def flip(src, flipCode, dst=None): # real signature unknown; restored from __doc__
    """ flip(src, flipCode[, dst]) -> dst """
    pass

def floodFill(image, mask, seedPoint, newVal, loDiff=None, upDiff=None, flags=None): # real signature unknown; restored from __doc__
    """ floodFill(image, mask, seedPoint, newVal[, loDiff[, upDiff[, flags]]]) -> retval, image, mask, rect """
    pass

def GaussianBlur(src, ksize, sigmaX, dst=None, sigmaY=None, borderType=None): # real signature unknown; restored from __doc__
    """ GaussianBlur(src, ksize, sigmaX[, dst[, sigmaY[, borderType]]]) -> dst """
    pass

def gemm(src1, src2, alpha, src3, beta, dst=None, flags=None): # real signature unknown; restored from __doc__
    """ gemm(src1, src2, alpha, src3, beta[, dst[, flags]]) -> dst """
    pass

def getAffineTransform(src, dst): # real signature unknown; restored from __doc__
    """ getAffineTransform(src, dst) -> retval """
    pass

def getBuildInformation(): # real signature unknown; restored from __doc__
    """ getBuildInformation() -> retval """
    pass

def getCPUTickCount(): # real signature unknown; restored from __doc__
    """ getCPUTickCount() -> retval """
    pass

def getDefaultNewCameraMatrix(cameraMatrix, imgsize=None, centerPrincipalPoint=None): # real signature unknown; restored from __doc__
    """ getDefaultNewCameraMatrix(cameraMatrix[, imgsize[, centerPrincipalPoint]]) -> retval """
    pass

def getDerivKernels(dx, dy, ksize, kx=None, ky=None, normalize=None, ktype=None): # real signature unknown; restored from __doc__
    """ getDerivKernels(dx, dy, ksize[, kx[, ky[, normalize[, ktype]]]]) -> kx, ky """
    pass

def getGaborKernel(ksize, sigma, theta, lambd, gamma, psi=None, ktype=None): # real signature unknown; restored from __doc__
    """ getGaborKernel(ksize, sigma, theta, lambd, gamma[, psi[, ktype]]) -> retval """
    pass

def getGaussianKernel(ksize, sigma, ktype=None): # real signature unknown; restored from __doc__
    """ getGaussianKernel(ksize, sigma[, ktype]) -> retval """
    pass

def getNumberOfCPUs(): # real signature unknown; restored from __doc__
    """ getNumberOfCPUs() -> retval """
    pass

def getNumThreads(): # real signature unknown; restored from __doc__
    """ getNumThreads() -> retval """
    pass

def getOptimalDFTSize(vecsize): # real signature unknown; restored from __doc__
    """ getOptimalDFTSize(vecsize) -> retval """
    pass

def getOptimalNewCameraMatrix(cameraMatrix, distCoeffs, imageSize, alpha, newImgSize=None, centerPrincipalPoint=None): # real signature unknown; restored from __doc__
    """ getOptimalNewCameraMatrix(cameraMatrix, distCoeffs, imageSize, alpha[, newImgSize[, centerPrincipalPoint]]) -> retval, validPixROI """
    pass

def getPerspectiveTransform(src, dst): # real signature unknown; restored from __doc__
    """ getPerspectiveTransform(src, dst) -> retval """
    pass

def getRectSubPix(image, patchSize, center, patch=None, patchType=None): # real signature unknown; restored from __doc__
    """ getRectSubPix(image, patchSize, center[, patch[, patchType]]) -> patch """
    pass

def getRotationMatrix2D(center, angle, scale): # real signature unknown; restored from __doc__
    """ getRotationMatrix2D(center, angle, scale) -> retval """
    pass

def getStructuringElement(shape, ksize, anchor=None): # real signature unknown; restored from __doc__
    """ getStructuringElement(shape, ksize[, anchor]) -> retval """
    pass

def getTextSize(text, fontFace, fontScale, thickness): # real signature unknown; restored from __doc__
    """ getTextSize(text, fontFace, fontScale, thickness) -> retval, baseLine """
    pass

def getThreadNum(): # real signature unknown; restored from __doc__
    """ getThreadNum() -> retval """
    pass

def getTickCount(): # real signature unknown; restored from __doc__
    """ getTickCount() -> retval """
    pass

def getTickFrequency(): # real signature unknown; restored from __doc__
    """ getTickFrequency() -> retval """
    pass

def getTrackbarPos(trackbarname, winname): # real signature unknown; restored from __doc__
    """ getTrackbarPos(trackbarname, winname) -> retval """
    pass

def getValidDisparityROI(roi1, roi2, minDisparity, numberOfDisparities, SADWindowSize): # real signature unknown; restored from __doc__
    """ getValidDisparityROI(roi1, roi2, minDisparity, numberOfDisparities, SADWindowSize) -> retval """
    pass

def getWindowProperty(winname, prop_id): # real signature unknown; restored from __doc__
    """ getWindowProperty(winname, prop_id) -> retval """
    pass

def GFTTDetector_create(maxCorners=None, qualityLevel=None, minDistance=None, blockSize=None, useHarrisDetector=None, k=None): # real signature unknown; restored from __doc__
    """ GFTTDetector_create([, maxCorners[, qualityLevel[, minDistance[, blockSize[, useHarrisDetector[, k]]]]]]) -> retval """
    pass

def goodFeaturesToTrack(image, maxCorners, qualityLevel, minDistance, corners=None, mask=None, blockSize=None, useHarrisDetector=None, k=None): # real signature unknown; restored from __doc__
    """ goodFeaturesToTrack(image, maxCorners, qualityLevel, minDistance[, corners[, mask[, blockSize[, useHarrisDetector[, k]]]]]) -> corners """
    pass

def grabCut(img, mask, rect, bgdModel, fgdModel, iterCount, mode=None): # real signature unknown; restored from __doc__
    """ grabCut(img, mask, rect, bgdModel, fgdModel, iterCount[, mode]) -> mask, bgdModel, fgdModel """
    pass

def groupRectangles(rectList, groupThreshold, eps=None): # real signature unknown; restored from __doc__
    """ groupRectangles(rectList, groupThreshold[, eps]) -> rectList, weights """
    pass

def haveOpenVX(): # real signature unknown; restored from __doc__
    """ haveOpenVX() -> retval """
    pass

def hconcat(src, dst=None): # real signature unknown; restored from __doc__
    """ hconcat(src[, dst]) -> dst """
    pass

def HOGDescriptor(): # real signature unknown; restored from __doc__
    """ HOGDescriptor() -> <HOGDescriptor object>  or  HOGDescriptor(_winSize, _blockSize, _blockStride, _cellSize, _nbins[, _derivAperture[, _winSigma[, _histogramNormType[, _L2HysThreshold[, _gammaCorrection[, _nlevels[, _signedGradient]]]]]]]) -> <HOGDescriptor object>  or  HOGDescriptor(filename) -> <HOGDescriptor object> """
    pass

def HOGDescriptor_getDaimlerPeopleDetector(): # real signature unknown; restored from __doc__
    """ HOGDescriptor_getDaimlerPeopleDetector() -> retval """
    pass

def HOGDescriptor_getDefaultPeopleDetector(): # real signature unknown; restored from __doc__
    """ HOGDescriptor_getDefaultPeopleDetector() -> retval """
    pass

def HoughCircles(image, method, dp, minDist, circles=None, param1=None, param2=None, minRadius=None, maxRadius=None): # real signature unknown; restored from __doc__
    """ HoughCircles(image, method, dp, minDist[, circles[, param1[, param2[, minRadius[, maxRadius]]]]]) -> circles """
    pass

def HoughLines(image, rho, theta, threshold, lines=None, srn=None, stn=None, min_theta=None, max_theta=None): # real signature unknown; restored from __doc__
    """ HoughLines(image, rho, theta, threshold[, lines[, srn[, stn[, min_theta[, max_theta]]]]]) -> lines """
    pass

def HoughLinesP(image, rho, theta, threshold, lines=None, minLineLength=None, maxLineGap=None): # real signature unknown; restored from __doc__
    """ HoughLinesP(image, rho, theta, threshold[, lines[, minLineLength[, maxLineGap]]]) -> lines """
    pass

def HuMoments(m, hu=None): # real signature unknown; restored from __doc__
    """ HuMoments(m[, hu]) -> hu """
    pass

def idct(src, dst=None, flags=None): # real signature unknown; restored from __doc__
    """ idct(src[, dst[, flags]]) -> dst """
    pass

def idft(src, dst=None, flags=None, nonzeroRows=None): # real signature unknown; restored from __doc__
    """ idft(src[, dst[, flags[, nonzeroRows]]]) -> dst """
    pass

def illuminationChange(src, mask, dst=None, alpha=None, beta=None): # real signature unknown; restored from __doc__
    """ illuminationChange(src, mask[, dst[, alpha[, beta]]]) -> dst """
    pass

def imdecode(buf, flags): # real signature unknown; restored from __doc__
    """ imdecode(buf, flags) -> retval """
    pass

def imencode(ext, img, params=None): # real signature unknown; restored from __doc__
    """ imencode(ext, img[, params]) -> retval, buf """
    pass

def imread(filename, flags=None): # real signature unknown; restored from __doc__
    """ imread(filename[, flags]) -> retval """
    pass

def imreadmulti(filename, mats, flags=None): # real signature unknown; restored from __doc__
    """ imreadmulti(filename, mats[, flags]) -> retval """
    pass

def imshow(winname, mat): # real signature unknown; restored from __doc__
    """ imshow(winname, mat) -> None """
    pass

def imwrite(filename, img, params=None): # real signature unknown; restored from __doc__
    """ imwrite(filename, img[, params]) -> retval """
    pass

def initCameraMatrix2D(objectPoints, imagePoints, imageSize, aspectRatio=None): # real signature unknown; restored from __doc__
    """ initCameraMatrix2D(objectPoints, imagePoints, imageSize[, aspectRatio]) -> retval """
    pass

def initUndistortRectifyMap(cameraMatrix, distCoeffs, R, newCameraMatrix, size, m1type, map1=None, map2=None): # real signature unknown; restored from __doc__
    """ initUndistortRectifyMap(cameraMatrix, distCoeffs, R, newCameraMatrix, size, m1type[, map1[, map2]]) -> map1, map2 """
    pass

def initWideAngleProjMap(cameraMatrix, distCoeffs, imageSize, destImageWidth, m1type, map1=None, map2=None, projType=None, alpha=None): # real signature unknown; restored from __doc__
    """ initWideAngleProjMap(cameraMatrix, distCoeffs, imageSize, destImageWidth, m1type[, map1[, map2[, projType[, alpha]]]]) -> retval, map1, map2 """
    pass

def inpaint(src, inpaintMask, inpaintRadius, flags, dst=None): # real signature unknown; restored from __doc__
    """ inpaint(src, inpaintMask, inpaintRadius, flags[, dst]) -> dst """
    pass

def inRange(src, lowerb, upperb, dst=None): # real signature unknown; restored from __doc__
    """ inRange(src, lowerb, upperb[, dst]) -> dst """
    pass

def insertChannel(src, dst, coi): # real signature unknown; restored from __doc__
    """ insertChannel(src, dst, coi) -> dst """
    pass

def integral(src, sum=None, sdepth=None): # real signature unknown; restored from __doc__
    """ integral(src[, sum[, sdepth]]) -> sum """
    pass

def integral2(src, sum=None, sqsum=None, sdepth=None, sqdepth=None): # real signature unknown; restored from __doc__
    """ integral2(src[, sum[, sqsum[, sdepth[, sqdepth]]]]) -> sum, sqsum """
    pass

def integral3(src, sum=None, sqsum=None, tilted=None, sdepth=None, sqdepth=None): # real signature unknown; restored from __doc__
    """ integral3(src[, sum[, sqsum[, tilted[, sdepth[, sqdepth]]]]]) -> sum, sqsum, tilted """
    pass

def intersectConvexConvex(_p1, _p2, _p12=None, handleNested=None): # real signature unknown; restored from __doc__
    """ intersectConvexConvex(_p1, _p2[, _p12[, handleNested]]) -> retval, _p12 """
    pass

def invert(src, dst=None, flags=None): # real signature unknown; restored from __doc__
    """ invert(src[, dst[, flags]]) -> retval, dst """
    pass

def invertAffineTransform(M, iM=None): # real signature unknown; restored from __doc__
    """ invertAffineTransform(M[, iM]) -> iM """
    pass

def isContourConvex(contour): # real signature unknown; restored from __doc__
    """ isContourConvex(contour) -> retval """
    pass

def KalmanFilter(dynamParams=None, measureParams=None, controlParams=None, type=None): # real signature unknown; restored from __doc__
    """ KalmanFilter([dynamParams, measureParams[, controlParams[, type]]]) -> <KalmanFilter object> """
    pass

def KAZE_create(extended=None, upright=None, threshold=None, nOctaves=None, nOctaveLayers=None, diffusivity=None): # real signature unknown; restored from __doc__
    """ KAZE_create([, extended[, upright[, threshold[, nOctaves[, nOctaveLayers[, diffusivity]]]]]]) -> retval """
    pass

def KeyPoint(x=None, y=None, _size=None, _angle=None, _response=None, _octave=None, _class_id=None): # real signature unknown; restored from __doc__
    """ KeyPoint([x, y, _size[, _angle[, _response[, _octave[, _class_id]]]]]) -> <KeyPoint object> """
    pass

def KeyPoint_convert(keypoints, keypointIndexes=None): # real signature unknown; restored from __doc__
    """ KeyPoint_convert(keypoints[, keypointIndexes]) -> points2f  or  KeyPoint_convert(points2f[, size[, response[, octave[, class_id]]]]) -> keypoints """
    pass

def KeyPoint_overlap(kp1, kp2): # real signature unknown; restored from __doc__
    """ KeyPoint_overlap(kp1, kp2) -> retval """
    pass

def kmeans(data, K, bestLabels, criteria, attempts, flags, centers=None): # real signature unknown; restored from __doc__
    """ kmeans(data, K, bestLabels, criteria, attempts, flags[, centers]) -> retval, bestLabels, centers """
    pass

def Laplacian(src, ddepth, dst=None, ksize=None, scale=None, delta=None, borderType=None): # real signature unknown; restored from __doc__
    """ Laplacian(src, ddepth[, dst[, ksize[, scale[, delta[, borderType]]]]]) -> dst """
    pass

def line(img, pt1, pt2, color, thickness=None, lineType=None, shift=None): # real signature unknown; restored from __doc__
    """ line(img, pt1, pt2, color[, thickness[, lineType[, shift]]]) -> img """
    pass

def linearPolar(src, center, maxRadius, flags, dst=None): # real signature unknown; restored from __doc__
    """ linearPolar(src, center, maxRadius, flags[, dst]) -> dst """
    pass

def log(src, dst=None): # real signature unknown; restored from __doc__
    """ log(src[, dst]) -> dst """
    pass

def logPolar(src, center, M, flags, dst=None): # real signature unknown; restored from __doc__
    """ logPolar(src, center, M, flags[, dst]) -> dst """
    pass

def LUT(src, lut, dst=None): # real signature unknown; restored from __doc__
    """ LUT(src, lut[, dst]) -> dst """
    pass

def magnitude(x, y, magnitude=None): # real signature unknown; restored from __doc__
    """ magnitude(x, y[, magnitude]) -> magnitude """
    pass

def Mahalanobis(v1, v2, icovar): # real signature unknown; restored from __doc__
    """ Mahalanobis(v1, v2, icovar) -> retval """
    pass

def matchShapes(contour1, contour2, method, parameter): # real signature unknown; restored from __doc__
    """ matchShapes(contour1, contour2, method, parameter) -> retval """
    pass

def matchTemplate(image, templ, method, result=None, mask=None): # real signature unknown; restored from __doc__
    """ matchTemplate(image, templ, method[, result[, mask]]) -> result """
    pass

def matMulDeriv(A, B, dABdA=None, dABdB=None): # real signature unknown; restored from __doc__
    """ matMulDeriv(A, B[, dABdA[, dABdB]]) -> dABdA, dABdB """
    pass

def max(src1, src2, dst=None): # real signature unknown; restored from __doc__
    """ max(src1, src2[, dst]) -> dst """
    pass

def mean(src, mask=None): # real signature unknown; restored from __doc__
    """ mean(src[, mask]) -> retval """
    pass

def meanShift(probImage, window, criteria): # real signature unknown; restored from __doc__
    """ meanShift(probImage, window, criteria) -> retval, window """
    pass

def meanStdDev(src, mean=None, stddev=None, mask=None): # real signature unknown; restored from __doc__
    """ meanStdDev(src[, mean[, stddev[, mask]]]) -> mean, stddev """
    pass

def medianBlur(src, ksize, dst=None): # real signature unknown; restored from __doc__
    """ medianBlur(src, ksize[, dst]) -> dst """
    pass

def merge(mv, dst=None): # real signature unknown; restored from __doc__
    """ merge(mv[, dst]) -> dst """
    pass

def min(src1, src2, dst=None): # real signature unknown; restored from __doc__
    """ min(src1, src2[, dst]) -> dst """
    pass

def minAreaRect(points): # real signature unknown; restored from __doc__
    """ minAreaRect(points) -> retval """
    pass

def minEnclosingCircle(points): # real signature unknown; restored from __doc__
    """ minEnclosingCircle(points) -> center, radius """
    pass

def minEnclosingTriangle(points, triangle=None): # real signature unknown; restored from __doc__
    """ minEnclosingTriangle(points[, triangle]) -> retval, triangle """
    pass

def minMaxLoc(src, mask=None): # real signature unknown; restored from __doc__
    """ minMaxLoc(src[, mask]) -> minVal, maxVal, minLoc, maxLoc """
    pass

def mixChannels(src, dst, fromTo): # real signature unknown; restored from __doc__
    """ mixChannels(src, dst, fromTo) -> dst """
    pass

def moments(array, binaryImage=None): # real signature unknown; restored from __doc__
    """ moments(array[, binaryImage]) -> retval """
    pass

def morphologyEx(src, op, kernel, dst=None, anchor=None, iterations=None, borderType=None, borderValue=None): # real signature unknown; restored from __doc__
    """ morphologyEx(src, op, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]) -> dst """
    pass

def moveWindow(winname, x, y): # real signature unknown; restored from __doc__
    """ moveWindow(winname, x, y) -> None """
    pass

def MSER_create(_delta=None, _min_area=None, _max_area=None, _max_variation=None, _min_diversity=None, _max_evolution=None, _area_threshold=None, _min_margin=None, _edge_blur_size=None): # real signature unknown; restored from __doc__
    """ MSER_create([, _delta[, _min_area[, _max_area[, _max_variation[, _min_diversity[, _max_evolution[, _area_threshold[, _min_margin[, _edge_blur_size]]]]]]]]]) -> retval """
    pass

def mulSpectrums(a, b, flags, c=None, conjB=None): # real signature unknown; restored from __doc__
    """ mulSpectrums(a, b, flags[, c[, conjB]]) -> c """
    pass

def multiply(src1, src2, dst=None, scale=None, dtype=None): # real signature unknown; restored from __doc__
    """ multiply(src1, src2[, dst[, scale[, dtype]]]) -> dst """
    pass

def MultiTracker(trackerType=None): # real signature unknown; restored from __doc__
    """ MultiTracker([, trackerType]) -> <MultiTracker object> """
    pass

def mulTransposed(src, aTa, dst=None, delta=None, scale=None, dtype=None): # real signature unknown; restored from __doc__
    """ mulTransposed(src, aTa[, dst[, delta[, scale[, dtype]]]]) -> dst """
    pass

def namedWindow(winname, flags=None): # real signature unknown; restored from __doc__
    """ namedWindow(winname[, flags]) -> None """
    pass

def norm(src1, normType=None, mask=None): # real signature unknown; restored from __doc__
    """ norm(src1[, normType[, mask]]) -> retval  or  norm(src1, src2[, normType[, mask]]) -> retval """
    pass

def normalize(src, dst, alpha=None, beta=None, norm_type=None, dtype=None, mask=None): # real signature unknown; restored from __doc__
    """ normalize(src, dst[, alpha[, beta[, norm_type[, dtype[, mask]]]]]) -> dst """
    pass

def ORB_create(nfeatures=None, scaleFactor=None, nlevels=None, edgeThreshold=None, firstLevel=None, WTA_K=None, scoreType=None, patchSize=None, fastThreshold=None): # real signature unknown; restored from __doc__
    """ ORB_create([, nfeatures[, scaleFactor[, nlevels[, edgeThreshold[, firstLevel[, WTA_K[, scoreType[, patchSize[, fastThreshold]]]]]]]]]) -> retval """
    pass

def patchNaNs(a, val=None): # real signature unknown; restored from __doc__
    """ patchNaNs(a[, val]) -> a """
    pass

def PCABackProject(data, mean, eigenvectors, result=None): # real signature unknown; restored from __doc__
    """ PCABackProject(data, mean, eigenvectors[, result]) -> result """
    pass

def PCACompute(data, mean, eigenvectors=None, maxComponents=None): # real signature unknown; restored from __doc__
    """ PCACompute(data, mean[, eigenvectors[, maxComponents]]) -> mean, eigenvectors  or  PCACompute(data, mean, retainedVariance[, eigenvectors]) -> mean, eigenvectors """
    pass

def PCAProject(data, mean, eigenvectors, result=None): # real signature unknown; restored from __doc__
    """ PCAProject(data, mean, eigenvectors[, result]) -> result """
    pass

def pencilSketch(src, dst1=None, dst2=None, sigma_s=None, sigma_r=None, shade_factor=None): # real signature unknown; restored from __doc__
    """ pencilSketch(src[, dst1[, dst2[, sigma_s[, sigma_r[, shade_factor]]]]]) -> dst1, dst2 """
    pass

def perspectiveTransform(src, m, dst=None): # real signature unknown; restored from __doc__
    """ perspectiveTransform(src, m[, dst]) -> dst """
    pass

def phase(x, y, angle=None, angleInDegrees=None): # real signature unknown; restored from __doc__
    """ phase(x, y[, angle[, angleInDegrees]]) -> angle """
    pass

def phaseCorrelate(src1, src2, window=None): # real signature unknown; restored from __doc__
    """ phaseCorrelate(src1, src2[, window]) -> retval, response """
    pass

def pointPolygonTest(contour, pt, measureDist): # real signature unknown; restored from __doc__
    """ pointPolygonTest(contour, pt, measureDist) -> retval """
    pass

def polarToCart(magnitude, angle, x=None, y=None, angleInDegrees=None): # real signature unknown; restored from __doc__
    """ polarToCart(magnitude, angle[, x[, y[, angleInDegrees]]]) -> x, y """
    pass

def polylines(img, pts, isClosed, color, thickness=None, lineType=None, shift=None): # real signature unknown; restored from __doc__
    """ polylines(img, pts, isClosed, color[, thickness[, lineType[, shift]]]) -> img """
    pass

def pow(src, power, dst=None): # real signature unknown; restored from __doc__
    """ pow(src, power[, dst]) -> dst """
    pass

def preCornerDetect(src, ksize, dst=None, borderType=None): # real signature unknown; restored from __doc__
    """ preCornerDetect(src, ksize[, dst[, borderType]]) -> dst """
    pass

def projectPoints(objectPoints, rvec, tvec, cameraMatrix, distCoeffs, imagePoints=None, jacobian=None, aspectRatio=None): # real signature unknown; restored from __doc__
    """ projectPoints(objectPoints, rvec, tvec, cameraMatrix, distCoeffs[, imagePoints[, jacobian[, aspectRatio]]]) -> imagePoints, jacobian """
    pass

def PSNR(src1, src2): # real signature unknown; restored from __doc__
    """ PSNR(src1, src2) -> retval """
    pass

def putText(img, text, org, fontFace, fontScale, color, thickness=None, lineType=None, bottomLeftOrigin=None): # real signature unknown; restored from __doc__
    """ putText(img, text, org, fontFace, fontScale, color[, thickness[, lineType[, bottomLeftOrigin]]]) -> img """
    pass

def pyrDown(src, dst=None, dstsize=None, borderType=None): # real signature unknown; restored from __doc__
    """ pyrDown(src[, dst[, dstsize[, borderType]]]) -> dst """
    pass

def pyrMeanShiftFiltering(src, sp, sr, dst=None, maxLevel=None, termcrit=None): # real signature unknown; restored from __doc__
    """ pyrMeanShiftFiltering(src, sp, sr[, dst[, maxLevel[, termcrit]]]) -> dst """
    pass

def pyrUp(src, dst=None, dstsize=None, borderType=None): # real signature unknown; restored from __doc__
    """ pyrUp(src[, dst[, dstsize[, borderType]]]) -> dst """
    pass

def randn(dst, mean, stddev): # real signature unknown; restored from __doc__
    """ randn(dst, mean, stddev) -> dst """
    pass

def randShuffle(dst, iterFactor=None): # real signature unknown; restored from __doc__
    """ randShuffle(dst[, iterFactor]) -> dst """
    pass

def randu(dst, low, high): # real signature unknown; restored from __doc__
    """ randu(dst, low, high) -> dst """
    pass

def recoverPose(E, points1, points2, cameraMatrix, R=None, t=None, mask=None): # real signature unknown; restored from __doc__
    """ recoverPose(E, points1, points2, cameraMatrix[, R[, t[, mask]]]) -> retval, R, t, mask  or  recoverPose(E, points1, points2[, R[, t[, focal[, pp[, mask]]]]]) -> retval, R, t, mask """
    pass

def rectangle(img, pt1, pt2, color, thickness=None, lineType=None, shift=None): # real signature unknown; restored from __doc__
    """ rectangle(img, pt1, pt2, color[, thickness[, lineType[, shift]]]) -> img """
    pass

def rectify3Collinear(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, cameraMatrix3, distCoeffs3, imgpt1, imgpt3, imageSize, R12, T12, R13, T13, alpha, newImgSize, flags, R1=None, R2=None, R3=None, P1=None, P2=None, P3=None, Q=None): # real signature unknown; restored from __doc__
    """ rectify3Collinear(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, cameraMatrix3, distCoeffs3, imgpt1, imgpt3, imageSize, R12, T12, R13, T13, alpha, newImgSize, flags[, R1[, R2[, R3[, P1[, P2[, P3[, Q]]]]]]]) -> retval, R1, R2, R3, P1, P2, P3, Q, roi1, roi2 """
    pass

def reduce(src, dim, rtype, dst=None, dtype=None): # real signature unknown; restored from __doc__
    """ reduce(src, dim, rtype[, dst[, dtype]]) -> dst """
    pass

def remap(src, map1, map2, interpolation, dst=None, borderMode=None, borderValue=None): # real signature unknown; restored from __doc__
    """ remap(src, map1, map2, interpolation[, dst[, borderMode[, borderValue]]]) -> dst """
    pass

def repeat(src, ny, nx, dst=None): # real signature unknown; restored from __doc__
    """ repeat(src, ny, nx[, dst]) -> dst """
    pass

def reprojectImageTo3D(disparity, Q, _3dImage=None, handleMissingValues=None, ddepth=None): # real signature unknown; restored from __doc__
    """ reprojectImageTo3D(disparity, Q[, _3dImage[, handleMissingValues[, ddepth]]]) -> _3dImage """
    pass

def resize(src, dsize, dst=None, fx=None, fy=None, interpolation=None): # real signature unknown; restored from __doc__
    """ resize(src, dsize[, dst[, fx[, fy[, interpolation]]]]) -> dst """
    pass

def resizeWindow(winname, width, height): # real signature unknown; restored from __doc__
    """ resizeWindow(winname, width, height) -> None """
    pass

def Rodrigues(src, dst=None, jacobian=None): # real signature unknown; restored from __doc__
    """ Rodrigues(src[, dst[, jacobian]]) -> dst, jacobian """
    pass

def rotate(src, rotateCode, dst=None): # real signature unknown; restored from __doc__
    """ rotate(src, rotateCode[, dst]) -> dst """
    pass

def rotatedRectangleIntersection(rect1, rect2, intersectingRegion=None): # real signature unknown; restored from __doc__
    """ rotatedRectangleIntersection(rect1, rect2[, intersectingRegion]) -> retval, intersectingRegion """
    pass

def RQDecomp3x3(src, mtxR=None, mtxQ=None, Qx=None, Qy=None, Qz=None): # real signature unknown; restored from __doc__
    """ RQDecomp3x3(src[, mtxR[, mtxQ[, Qx[, Qy[, Qz]]]]]) -> retval, mtxR, mtxQ, Qx, Qy, Qz """
    pass

def sampsonDistance(pt1, pt2, F): # real signature unknown; restored from __doc__
    """ sampsonDistance(pt1, pt2, F) -> retval """
    pass

def scaleAdd(src1, alpha, src2, dst=None): # real signature unknown; restored from __doc__
    """ scaleAdd(src1, alpha, src2[, dst]) -> dst """
    pass

def Scharr(src, ddepth, dx, dy, dst=None, scale=None, delta=None, borderType=None): # real signature unknown; restored from __doc__
    """ Scharr(src, ddepth, dx, dy[, dst[, scale[, delta[, borderType]]]]) -> dst """
    pass

def seamlessClone(src, dst, mask, p, flags, blend=None): # real signature unknown; restored from __doc__
    """ seamlessClone(src, dst, mask, p, flags[, blend]) -> blend """
    pass

def selectROI(img, fromCenter=None): # real signature unknown; restored from __doc__
    """ selectROI(img[, fromCenter]) -> retval  or  selectROI(windowName, img[, showCrossair[, fromCenter]]) -> retval  or  selectROI(windowName, img, boundingBox[, fromCenter]) -> None """
    pass

def sepFilter2D(src, ddepth, kernelX, kernelY, dst=None, anchor=None, delta=None, borderType=None): # real signature unknown; restored from __doc__
    """ sepFilter2D(src, ddepth, kernelX, kernelY[, dst[, anchor[, delta[, borderType]]]]) -> dst """
    pass

def setIdentity(mtx, s=None): # real signature unknown; restored from __doc__
    """ setIdentity(mtx[, s]) -> mtx """
    pass

def setMouseCallback(windowName, onMouse, param=None): # real signature unknown; restored from __doc__
    """ setMouseCallback(windowName, onMouse [, param]) -> None """
    pass

def setNumThreads(nthreads): # real signature unknown; restored from __doc__
    """ setNumThreads(nthreads) -> None """
    pass

def setRNGSeed(seed): # real signature unknown; restored from __doc__
    """ setRNGSeed(seed) -> None """
    pass

def setTrackbarMax(trackbarname, winname, maxval): # real signature unknown; restored from __doc__
    """ setTrackbarMax(trackbarname, winname, maxval) -> None """
    pass

def setTrackbarMin(trackbarname, winname, minval): # real signature unknown; restored from __doc__
    """ setTrackbarMin(trackbarname, winname, minval) -> None """
    pass

def setTrackbarPos(trackbarname, winname, pos): # real signature unknown; restored from __doc__
    """ setTrackbarPos(trackbarname, winname, pos) -> None """
    pass

def setUseOpenVX(flag): # real signature unknown; restored from __doc__
    """ setUseOpenVX(flag) -> None """
    pass

def setUseOptimized(onoff): # real signature unknown; restored from __doc__
    """ setUseOptimized(onoff) -> None """
    pass

def setWindowProperty(winname, prop_id, prop_value): # real signature unknown; restored from __doc__
    """ setWindowProperty(winname, prop_id, prop_value) -> None """
    pass

def setWindowTitle(winname, title): # real signature unknown; restored from __doc__
    """ setWindowTitle(winname, title) -> None """
    pass

def SimpleBlobDetector_create(parameters=None): # real signature unknown; restored from __doc__
    """ SimpleBlobDetector_create([, parameters]) -> retval """
    pass

def SimpleBlobDetector_Params(): # real signature unknown; restored from __doc__
    """ SimpleBlobDetector_Params() -> <SimpleBlobDetector_Params object> """
    pass

def Sobel(src, ddepth, dx, dy, dst=None, ksize=None, scale=None, delta=None, borderType=None): # real signature unknown; restored from __doc__
    """ Sobel(src, ddepth, dx, dy[, dst[, ksize[, scale[, delta[, borderType]]]]]) -> dst """
    pass

def solve(src1, src2, dst=None, flags=None): # real signature unknown; restored from __doc__
    """ solve(src1, src2[, dst[, flags]]) -> retval, dst """
    pass

def solveCubic(coeffs, roots=None): # real signature unknown; restored from __doc__
    """ solveCubic(coeffs[, roots]) -> retval, roots """
    pass

def solveLP(Func, Constr, z): # real signature unknown; restored from __doc__
    """ solveLP(Func, Constr, z) -> retval """
    pass

def solvePnP(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec=None, tvec=None, useExtrinsicGuess=None, flags=None): # real signature unknown; restored from __doc__
    """ solvePnP(objectPoints, imagePoints, cameraMatrix, distCoeffs[, rvec[, tvec[, useExtrinsicGuess[, flags]]]]) -> retval, rvec, tvec """
    pass

def solvePnPRansac(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec=None, tvec=None, useExtrinsicGuess=None, iterationsCount=None, reprojectionError=None, confidence=None, inliers=None, flags=None): # real signature unknown; restored from __doc__
    """ solvePnPRansac(objectPoints, imagePoints, cameraMatrix, distCoeffs[, rvec[, tvec[, useExtrinsicGuess[, iterationsCount[, reprojectionError[, confidence[, inliers[, flags]]]]]]]]) -> retval, rvec, tvec, inliers """
    pass

def solvePoly(coeffs, roots=None, maxIters=None): # real signature unknown; restored from __doc__
    """ solvePoly(coeffs[, roots[, maxIters]]) -> retval, roots """
    pass

def sort(src, flags, dst=None): # real signature unknown; restored from __doc__
    """ sort(src, flags[, dst]) -> dst """
    pass

def sortIdx(src, flags, dst=None): # real signature unknown; restored from __doc__
    """ sortIdx(src, flags[, dst]) -> dst """
    pass

def SparsePyrLKOpticalFlow_create(winSize=None, maxLevel=None, crit=None, flags=None, minEigThreshold=None): # real signature unknown; restored from __doc__
    """ SparsePyrLKOpticalFlow_create([, winSize[, maxLevel[, crit[, flags[, minEigThreshold]]]]]) -> retval """
    pass

def spatialGradient(src, dx=None, dy=None, ksize=None, borderType=None): # real signature unknown; restored from __doc__
    """ spatialGradient(src[, dx[, dy[, ksize[, borderType]]]]) -> dx, dy """
    pass

def split(m, mv=None): # real signature unknown; restored from __doc__
    """ split(m[, mv]) -> mv """
    pass

def sqrBoxFilter(_src, ddepth, ksize, _dst=None, anchor=None, normalize=None, borderType=None): # real signature unknown; restored from __doc__
    """ sqrBoxFilter(_src, ddepth, ksize[, _dst[, anchor[, normalize[, borderType]]]]) -> _dst """
    pass

def sqrt(src, dst=None): # real signature unknown; restored from __doc__
    """ sqrt(src[, dst]) -> dst """
    pass

def startWindowThread(): # real signature unknown; restored from __doc__
    """ startWindowThread() -> retval """
    pass

def StereoBM_create(numDisparities=None, blockSize=None): # real signature unknown; restored from __doc__
    """ StereoBM_create([, numDisparities[, blockSize]]) -> retval """
    pass

def stereoCalibrate(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R=None, T=None, E=None, F=None, flags=None, criteria=None): # real signature unknown; restored from __doc__
    """ stereoCalibrate(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize[, R[, T[, E[, F[, flags[, criteria]]]]]]) -> retval, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, R, T, E, F """
    pass

def stereoRectify(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, R1=None, R2=None, P1=None, P2=None, Q=None, flags=None, alpha=None, newImageSize=None): # real signature unknown; restored from __doc__
    """ stereoRectify(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T[, R1[, R2[, P1[, P2[, Q[, flags[, alpha[, newImageSize]]]]]]]]) -> R1, R2, P1, P2, Q, validPixROI1, validPixROI2 """
    pass

def stereoRectifyUncalibrated(points1, points2, F, imgSize, H1=None, H2=None, threshold=None): # real signature unknown; restored from __doc__
    """ stereoRectifyUncalibrated(points1, points2, F, imgSize[, H1[, H2[, threshold]]]) -> retval, H1, H2 """
    pass

def StereoSGBM_create(minDisparity, numDisparities, blockSize, P1=None, P2=None, disp12MaxDiff=None, preFilterCap=None, uniquenessRatio=None, speckleWindowSize=None, speckleRange=None, mode=None): # real signature unknown; restored from __doc__
    """ StereoSGBM_create(minDisparity, numDisparities, blockSize[, P1[, P2[, disp12MaxDiff[, preFilterCap[, uniquenessRatio[, speckleWindowSize[, speckleRange[, mode]]]]]]]]) -> retval """
    pass

def stylization(src, dst=None, sigma_s=None, sigma_r=None): # real signature unknown; restored from __doc__
    """ stylization(src[, dst[, sigma_s[, sigma_r]]]) -> dst """
    pass

def Subdiv2D(rect=None): # real signature unknown; restored from __doc__
    """ Subdiv2D([rect]) -> <Subdiv2D object> """
    pass

def subtract(src1, src2, dst=None, mask=None, dtype=None): # real signature unknown; restored from __doc__
    """ subtract(src1, src2[, dst[, mask[, dtype]]]) -> dst """
    pass

def sumElems(src): # real signature unknown; restored from __doc__
    """ sumElems(src) -> retval """
    pass

def SVBackSubst(w, u, vt, rhs, dst=None): # real signature unknown; restored from __doc__
    """ SVBackSubst(w, u, vt, rhs[, dst]) -> dst """
    pass

def SVDecomp(src, w=None, u=None, vt=None, flags=None): # real signature unknown; restored from __doc__
    """ SVDecomp(src[, w[, u[, vt[, flags]]]]) -> w, u, vt """
    pass

def textureFlattening(src, mask, dst=None, low_threshold=None, high_threshold=None, kernel_size=None): # real signature unknown; restored from __doc__
    """ textureFlattening(src, mask[, dst[, low_threshold[, high_threshold[, kernel_size]]]]) -> dst """
    pass

def threshold(src, thresh, maxval, type, dst=None): # real signature unknown; restored from __doc__
    """ threshold(src, thresh, maxval, type[, dst]) -> retval, dst """
    pass

def TickMeter(): # real signature unknown; restored from __doc__
    """ TickMeter() -> <TickMeter object> """
    pass

def trace(mtx): # real signature unknown; restored from __doc__
    """ trace(mtx) -> retval """
    pass

def Tracker_create(trackerType): # real signature unknown; restored from __doc__
    """ Tracker_create(trackerType) -> retval """
    pass

def transform(src, m, dst=None): # real signature unknown; restored from __doc__
    """ transform(src, m[, dst]) -> dst """
    pass

def transpose(src, dst=None): # real signature unknown; restored from __doc__
    """ transpose(src[, dst]) -> dst """
    pass

def triangulatePoints(projMatr1, projMatr2, projPoints1, projPoints2, points4D=None): # real signature unknown; restored from __doc__
    """ triangulatePoints(projMatr1, projMatr2, projPoints1, projPoints2[, points4D]) -> points4D """
    pass

def undistort(src, cameraMatrix, distCoeffs, dst=None, newCameraMatrix=None): # real signature unknown; restored from __doc__
    """ undistort(src, cameraMatrix, distCoeffs[, dst[, newCameraMatrix]]) -> dst """
    pass

def undistortPoints(src, cameraMatrix, distCoeffs, dst=None, R=None, P=None): # real signature unknown; restored from __doc__
    """ undistortPoints(src, cameraMatrix, distCoeffs[, dst[, R[, P]]]) -> dst """
    pass

def useOpenVX(): # real signature unknown; restored from __doc__
    """ useOpenVX() -> retval """
    pass

def useOptimized(): # real signature unknown; restored from __doc__
    """ useOptimized() -> retval """
    pass

def validateDisparity(disparity, cost, minDisparity, numberOfDisparities, disp12MaxDisp=None): # real signature unknown; restored from __doc__
    """ validateDisparity(disparity, cost, minDisparity, numberOfDisparities[, disp12MaxDisp]) -> disparity """
    pass

def vconcat(src, dst=None): # real signature unknown; restored from __doc__
    """ vconcat(src[, dst]) -> dst """
    pass

def VideoCapture(): # real signature unknown; restored from __doc__
    """ VideoCapture() -> <VideoCapture object>  or  VideoCapture(filename) -> <VideoCapture object>  or  VideoCapture(filename, apiPreference) -> <VideoCapture object>  or  VideoCapture(index) -> <VideoCapture object> """
    pass

def VideoWriter(filename=None, fourcc=None, fps=None, frameSize=None, isColor=None): # real signature unknown; restored from __doc__
    """ VideoWriter([filename, fourcc, fps, frameSize[, isColor]]) -> <VideoWriter object> """
    pass

def VideoWriter_fourcc(c1, c2, c3, c4): # real signature unknown; restored from __doc__
    """ VideoWriter_fourcc(c1, c2, c3, c4) -> retval """
    pass

def waitKey(delay=None): # real signature unknown; restored from __doc__
    """ waitKey([, delay]) -> retval """
    pass

def waitKeyEx(delay=None): # real signature unknown; restored from __doc__
    """ waitKeyEx([, delay]) -> retval """
    pass

def warpAffine(src, M, dsize, dst=None, flags=None, borderMode=None, borderValue=None): # real signature unknown; restored from __doc__
    """ warpAffine(src, M, dsize[, dst[, flags[, borderMode[, borderValue]]]]) -> dst """
    pass

def warpPerspective(src, M, dsize, dst=None, flags=None, borderMode=None, borderValue=None): # real signature unknown; restored from __doc__
    """ warpPerspective(src, M, dsize[, dst[, flags[, borderMode[, borderValue]]]]) -> dst """
    pass

def watershed(image, markers): # real signature unknown; restored from __doc__
    """ watershed(image, markers) -> markers """
    pass

# classes

class error(Exception):
    # no doc
    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """list of weak references to the object (if defined)"""



class UMat(object):
    """ OpenCV 3 UMat wrapper. Used for T-API support. """
    def get(self, *args, **kwargs): # real signature unknown
        """ Returns numpy array """
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass


# variables with complex values

__loader__ = None # (!) real value is ''

__spec__ = None # (!) real value is ''

