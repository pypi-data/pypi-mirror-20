#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Wen Guan, <wen.guan@cern.ch>, 2014
# - Sylvain Blunier, <sylvain.blunier@cern.ch>, 2016
# - Tomas Javurek, <Tomas.Javurek@cern.ch>, 2016
# - Cedric Serfon, <cedric.serfon@cern.ch>, 2015-2017

import os
import sys

from rucio.client import Client
from rucio.common.config import config_get
from rucio.common.exception import RSEProtocolNotSupported
from rucio.rse import rsemanager as rsemgr
from rucio.api.rse import list_rse_attributes

OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3


def get_space(rsename, proxy, protocol='srm'):
    client = Client()
    retvalue = OK
    rse_settings = rsemgr.get_rse_info(rsename)
    print protocol
    if rse_settings['protocols'] and protocol == 'json':
        rse_settings['protocols'][0]['impl'] = 'rucio.rse.protocols.gsiftp.Default'
        protocol = 'gsiftp'
    try:
        gs, ret = rsemgr.get_space_usage(rse_settings, protocol)
        if gs:
            totalsize = long(ret["totalsize"])
            freesize = long(ret["unusedsize"])
            usedsize = totalsize - freesize
        else:
            print "Failed to get rse(%s) space information: %s" % (rsename, str(ret))
            retvalue = WARNING
    except RSEProtocolNotSupported as error:
        print error
        retvalue = WARNING
    except Exception as error:
        print "Failed to get rse(%s) space information: %s" % (rsename, str(error))
        retvalue = WARNING

    if retvalue == OK:
        print "Update RSE %s space usage (usedsize: %s, freesize: %s)" % (rsename, usedsize, freesize)
        client.set_rse_usage(rsename, protocol, usedsize, freesize)
        client.set_rse_usage(rsename, 'storage', usedsize, freesize)
    return retvalue


if __name__ == "__main__":

    cloud = sys.argv[1]

    exitvalue = OK
    retvalue = OK
    usedsize = 0
    freesize = 0

    try:
        PROXY = config_get('nagios', 'proxy')
        os.environ["X509_USER_PROXY"] = PROXY
    except Exception as error:
        print "Failed to get proxy from rucio.cfg"

    client = Client()
    rses = client.list_rses('cloud=%s' % cloud)
    for rse in sorted(rses):
        rsename = rse['rse']
        print 'Running on %s' % rsename
        attr = list_rse_attributes(rsename)
        if 'space_usage_method' in attr.keys():
            retvalue = get_space(rsename, PROXY, protocol=attr['space_usage_method'])
        else:
            retvalue = get_space(rsename, PROXY, protocol='srm')

        exitvalue = max(exitvalue, retvalue)
    sys.exit(exitvalue)
