# coding: utf-8

"""
    Unique ID

    API to look up or generate a unique study identifier

    OpenAPI spec version: 1.0.0
    Contact: scweber@stanford.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ValidMrn(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, mrn=None, firstname=None, lastname=None, dob=None, epic_mrn=None, epic_firstname=None, epic_lastname=None, epic_dob=None):
        """
        ValidMrn - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'mrn': 'str',
            'firstname': 'str',
            'lastname': 'str',
            'dob': 'str',
            'epic_mrn': 'str',
            'epic_firstname': 'str',
            'epic_lastname': 'str',
            'epic_dob': 'str'
        }

        self.attribute_map = {
            'mrn': 'mrn',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'dob': 'dob',
            'epic_mrn': 'epic_mrn',
            'epic_firstname': 'epic_firstname',
            'epic_lastname': 'epic_lastname',
            'epic_dob': 'epic_dob'
        }

        self._mrn = mrn
        self._firstname = firstname
        self._lastname = lastname
        self._dob = dob
        self._epic_mrn = epic_mrn
        self._epic_firstname = epic_firstname
        self._epic_lastname = epic_lastname
        self._epic_dob = epic_dob

    @property
    def mrn(self):
        """
        Gets the mrn of this ValidMrn.

        :return: The mrn of this ValidMrn.
        :rtype: str
        """
        return self._mrn

    @mrn.setter
    def mrn(self, mrn):
        """
        Sets the mrn of this ValidMrn.

        :param mrn: The mrn of this ValidMrn.
        :type: str
        """
        if mrn is None:
            raise ValueError("Invalid value for `mrn`, must not be `None`")

        self._mrn = mrn

    @property
    def firstname(self):
        """
        Gets the firstname of this ValidMrn.

        :return: The firstname of this ValidMrn.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """
        Sets the firstname of this ValidMrn.

        :param firstname: The firstname of this ValidMrn.
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """
        Gets the lastname of this ValidMrn.

        :return: The lastname of this ValidMrn.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """
        Sets the lastname of this ValidMrn.

        :param lastname: The lastname of this ValidMrn.
        :type: str
        """

        self._lastname = lastname

    @property
    def dob(self):
        """
        Gets the dob of this ValidMrn.

        :return: The dob of this ValidMrn.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """
        Sets the dob of this ValidMrn.

        :param dob: The dob of this ValidMrn.
        :type: str
        """

        self._dob = dob

    @property
    def epic_mrn(self):
        """
        Gets the epic_mrn of this ValidMrn.

        :return: The epic_mrn of this ValidMrn.
        :rtype: str
        """
        return self._epic_mrn

    @epic_mrn.setter
    def epic_mrn(self, epic_mrn):
        """
        Sets the epic_mrn of this ValidMrn.

        :param epic_mrn: The epic_mrn of this ValidMrn.
        :type: str
        """

        self._epic_mrn = epic_mrn

    @property
    def epic_firstname(self):
        """
        Gets the epic_firstname of this ValidMrn.

        :return: The epic_firstname of this ValidMrn.
        :rtype: str
        """
        return self._epic_firstname

    @epic_firstname.setter
    def epic_firstname(self, epic_firstname):
        """
        Sets the epic_firstname of this ValidMrn.

        :param epic_firstname: The epic_firstname of this ValidMrn.
        :type: str
        """

        self._epic_firstname = epic_firstname

    @property
    def epic_lastname(self):
        """
        Gets the epic_lastname of this ValidMrn.

        :return: The epic_lastname of this ValidMrn.
        :rtype: str
        """
        return self._epic_lastname

    @epic_lastname.setter
    def epic_lastname(self, epic_lastname):
        """
        Sets the epic_lastname of this ValidMrn.

        :param epic_lastname: The epic_lastname of this ValidMrn.
        :type: str
        """

        self._epic_lastname = epic_lastname

    @property
    def epic_dob(self):
        """
        Gets the epic_dob of this ValidMrn.

        :return: The epic_dob of this ValidMrn.
        :rtype: str
        """
        return self._epic_dob

    @epic_dob.setter
    def epic_dob(self, epic_dob):
        """
        Sets the epic_dob of this ValidMrn.

        :param epic_dob: The epic_dob of this ValidMrn.
        :type: str
        """

        self._epic_dob = epic_dob

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
