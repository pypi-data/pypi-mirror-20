# coding: utf-8

"""
    Unique ID

    API to look up or generate a unique study identifier

    OpenAPI spec version: 1.0.0
    Contact: scweber@stanford.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UidEntity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, id_source=None, suid=None, jittered_timestamp=None, custom_fields=None, items=None):
        """
        UidEntity - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'id_source': 'str',
            'suid': 'str',
            'jittered_timestamp': 'str',
            'custom_fields': 'list[CustomField]',
            'items': 'list[UidChildEntity]'
        }

        self.attribute_map = {
            'id': 'id',
            'id_source': 'id_source',
            'suid': 'suid',
            'jittered_timestamp': 'jittered_timestamp',
            'custom_fields': 'custom_fields',
            'items': 'items'
        }

        self._id = id
        self._id_source = id_source
        self._suid = suid
        self._jittered_timestamp = jittered_timestamp
        self._custom_fields = custom_fields
        self._items = items

    @property
    def id(self):
        """
        Gets the id of this UidEntity.
        this is the external identifier for which a unique study id should be returned

        :return: The id of this UidEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this UidEntity.
        this is the external identifier for which a unique study id should be returned

        :param id: The id of this UidEntity.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def id_source(self):
        """
        Gets the id_source of this UidEntity.
        this scopes the identifier, since different source systems may wind up inadvertently using the same identifier

        :return: The id_source of this UidEntity.
        :rtype: str
        """
        return self._id_source

    @id_source.setter
    def id_source(self, id_source):
        """
        Sets the id_source of this UidEntity.
        this scopes the identifier, since different source systems may wind up inadvertently using the same identifier

        :param id_source: The id_source of this UidEntity.
        :type: str
        """
        if id_source is None:
            raise ValueError("Invalid value for `id_source`, must not be `None`")

        self._id_source = id_source

    @property
    def suid(self):
        """
        Gets the suid of this UidEntity.
        this is the Stanford UID or 'suid' generated for the supplied id and id_source pair in the context of the current study

        :return: The suid of this UidEntity.
        :rtype: str
        """
        return self._suid

    @suid.setter
    def suid(self, suid):
        """
        Sets the suid of this UidEntity.
        this is the Stanford UID or 'suid' generated for the supplied id and id_source pair in the context of the current study

        :param suid: The suid of this UidEntity.
        :type: str
        """
        if suid is None:
            raise ValueError("Invalid value for `suid`, must not be `None`")

        self._suid = suid

    @property
    def jittered_timestamp(self):
        """
        Gets the jittered_timestamp of this UidEntity.
        if the optional associated timestamp was supplied in the input message, this will be returned, suitably date-shifted from the original

        :return: The jittered_timestamp of this UidEntity.
        :rtype: str
        """
        return self._jittered_timestamp

    @jittered_timestamp.setter
    def jittered_timestamp(self, jittered_timestamp):
        """
        Sets the jittered_timestamp of this UidEntity.
        if the optional associated timestamp was supplied in the input message, this will be returned, suitably date-shifted from the original

        :param jittered_timestamp: The jittered_timestamp of this UidEntity.
        :type: str
        """

        self._jittered_timestamp = jittered_timestamp

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this UidEntity.
        QUESTION Should this be returned in the response?

        :return: The custom_fields of this UidEntity.
        :rtype: list[CustomField]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this UidEntity.
        QUESTION Should this be returned in the response?

        :param custom_fields: The custom_fields of this UidEntity.
        :type: list[CustomField]
        """

        self._custom_fields = custom_fields

    @property
    def items(self):
        """
        Gets the items of this UidEntity.

        :return: The items of this UidEntity.
        :rtype: list[UidChildEntity]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this UidEntity.

        :param items: The items of this UidEntity.
        :type: list[UidChildEntity]
        """

        self._items = items

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
